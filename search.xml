<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>英语语法二</title>
      <link href="/2024/02/28/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E4%BA%8C/"/>
      <url>/2024/02/28/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>微信小程序开发</p><span id="more"></span><p>名词的复数</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2023/05/14/mysql/"/>
      <url>/2023/05/14/mysql/</url>
      
        <content type="html"><![CDATA[<p>msyql</p><span id="more"></span><h5 id="进入linuxdocker容器中的mysql"><a href="#进入linuxdocker容器中的mysql" class="headerlink" title="进入linuxdocker容器中的mysql"></a>进入linux<code>docker</code>容器中的mysql</h5><p>docker exec -it {容器id｜容器名称} bash</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it d75789dff2d4 bash;</span><br><span class="line">docker exec -it mysql-test  bash;</span><br></pre></td></tr></table></figure><h5 id="登陆mysql"><a href="#登陆mysql" class="headerlink" title="登陆mysql"></a>登陆mysql</h5><p>mysql -u{用户名} -p{密码} </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>ugs <span class="operator">-</span>p990522</span><br></pre></td></tr></table></figure><h5 id="创建mysql用户"><a href="#创建mysql用户" class="headerlink" title="创建mysql用户"></a>创建mysql用户</h5><p>用户表位置是在安装的mysql中msyql库中的user表中。官方推荐使用<code>create user</code>m命令创建用户,这张表主键PRIMARY KEY (<code>Host</code>,<code>User</code>)，<code>User</code>为用户名称,<code>Host</code>是用户的范围<code>%</code>表示全局，<code>localhost</code>表示只能在本地使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;gs&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;990522&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;gs&#x27;</span> @<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;990522&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/05/14/mysql/image-20230514154916592.png" alt="image-20230514154916592"></p><h5 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flysh privileges;</span><br></pre></td></tr></table></figure><h5 id="sql执行记录开关"><a href="#sql执行记录开关" class="headerlink" title="sql执行记录开关"></a>sql执行记录开关</h5><p>默认为0不开启，1开启</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@profilin</span>；</span><br><span class="line"><span class="keyword">set</span> profiling <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h5 id="查看当前存储引擎"><a href="#查看当前存储引擎" class="headerlink" title="查看当前存储引擎"></a>查看当前存储引擎</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines；</span><br></pre></td></tr></table></figure><h4 id="mysql变量"><a href="#mysql变量" class="headerlink" title="mysql变量"></a>mysql变量</h4><h5 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h5><h6 id="全局系统变量"><a href="#全局系统变量" class="headerlink" title="全局系统变量"></a>全局系统变量</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看全部系统变量</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES;</span><br><span class="line">#修改系统变量的值 <span class="operator">!</span><span class="operator">!</span><span class="operator">!</span>只针对当前数据库实例，数据库重启变量会重新初始化</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> max_connections <span class="operator">=</span> <span class="number">152</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>. max_connections <span class="operator">=</span> <span class="number">151</span>;</span><br></pre></td></tr></table></figure><h6 id="会话系统变量"><a href="#会话系统变量" class="headerlink" title="会话系统变量"></a>会话系统变量</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查看回话系统变量</span><br><span class="line"><span class="keyword">SHOW</span>  VARIABLES;</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES;</span><br><span class="line">#模糊查询系统变量</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%activate%&#x27;</span>; </span><br><span class="line">#查看某一个系统变量</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.admin_port;</span><br><span class="line">#不写修饰符默认先查询回话再查询全局</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@admin_port</span>;</span><br><span class="line">#修改会话变量 ！！！只作用在当前回话，重新连接会重新初始化</span><br><span class="line"><span class="keyword">SET</span> SESSION character_set_client <span class="operator">=</span> <span class="string">&#x27;gbk&#x27;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@session</span>.character_set_client <span class="operator">=</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h5><h6 id="用户回话变量"><a href="#用户回话变量" class="headerlink" title="用户回话变量"></a>用户回话变量</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#设置用户变量</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m</span> <span class="operator">=</span> <span class="number">1</span>;                                                                                        <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m2</span> :<span class="operator">=</span> <span class="number">2</span>; </span><br><span class="line"><span class="keyword">set</span> <span class="variable">@m3</span> :<span class="operator">=</span> <span class="variable">@m</span> <span class="operator">+</span> <span class="variable">@m2</span>;</span><br><span class="line">#查询用户变量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@m3</span>;</span><br><span class="line"># 加入<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@count</span> :<span class="operator">=</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> book;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@count</span>;</span><br></pre></td></tr></table></figure><h6 id="用户局部变量"><a href="#用户局部变量" class="headerlink" title="用户局部变量"></a>用户局部变量</h6>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8</title>
      <link href="/2023/04/17/java8/"/>
      <url>/2023/04/17/java8/</url>
      
        <content type="html"><![CDATA[<p>java8学习</p><span id="more"></span><h4 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h4><p>函数式接口在Java中是指：<strong>有且仅有一个抽象方法的接口</strong></p><h5 id="FunctionalInterface注解"><a href="#FunctionalInterface注解" class="headerlink" title="@FunctionalInterface注解"></a><strong>@FunctionalInterface注解</strong></h5><p>该注解用来检测该接口是否为函数式接口，若接口中没有抽象方法或抽象方法的个数大于1那么就会报错，反之通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">a1</span> <span class="params">(String parm1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h5><h5 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h5><p>被誉为Java8最大的特性。Lambda 表达式方便了函数式编程，大大简化了开发。Lambda表达式由逗号分隔的<code>参数列表</code>、<code>-&gt;符号</code>和<code>语句块</code>三部分组成 。</p><h5 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h5><h6 id="创建流的三种方式"><a href="#创建流的三种方式" class="headerlink" title="创建流的三种方式"></a>创建流的三种方式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//通过集合</span></span><br><span class="line">    ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Stream&lt;Object&gt; stream = list.stream();</span><br><span class="line">    <span class="comment">//通过数组</span></span><br><span class="line">    Integer[] integers = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;&#125;;</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = Arrays.stream(integers);</span><br><span class="line">    <span class="comment">//静态方法Stream.of</span></span><br><span class="line">    Stream&lt;String&gt; eqwewq = Stream.of(<span class="string">&quot;eqwewq&quot;</span>, <span class="string">&quot;qwe&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="示例结构"><a href="#示例结构" class="headerlink" title="示例结构"></a>示例结构</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;李白&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;花木兰&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;千年之狐&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;剑舞者&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;青春决赛季&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;青春决赛季&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="过滤filter"><a href="#过滤filter" class="headerlink" title="过滤filter"></a>过滤filter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;过滤&quot;</span>);</span><br><span class="line">list.stream().filter(u -&gt; u.id == <span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="分页limit"><a href="#分页limit" class="headerlink" title="分页limit"></a>分页limit</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;分页&quot;</span>);</span><br><span class="line">list.stream().limit(<span class="number">2</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="跳过skip"><a href="#跳过skip" class="headerlink" title="跳过skip"></a>跳过skip</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;跳过&quot;</span>);</span><br><span class="line">list.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="去重distinct"><a href="#去重distinct" class="headerlink" title="去重distinct"></a>去重distinct</h6><p>是通过equals和hashCode，所以要重写这两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="中间操作map"><a href="#中间操作map" class="headerlink" title="中间操作map"></a>中间操作map</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; nameList = list.stream().map(u -&gt; u.name).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h6 id="排序sorted"><a href="#排序sorted" class="headerlink" title="排序sorted"></a>排序sorted</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//数组排序</span><br><span class="line">        int[] ints = new int[]&#123;4, 453, 35, 6564, 75634, 3&#125;;</span><br><span class="line">        Arrays.stream(ints).sorted().forEach(System.out::println);</span><br><span class="line">        //集合中的对象排序</span><br><span class="line">        list.stream().map(u -&gt; u.id).sorted(Integer :: compareTo).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="判断Match"><a href="#判断Match" class="headerlink" title="判断Match"></a>判断Match</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否都满足条件</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> list.stream().allMatch(user -&gt; user.id == <span class="number">3</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="comment">//是否有一个满足条件</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> list.stream().anyMatch(user -&gt; user.id == <span class="number">3</span>);</span><br><span class="line">System.out.println(b2);</span><br><span class="line"><span class="comment">//是否都不满足</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span> list.stream().noneMatch(user -&gt; user.id == <span class="number">4</span>);</span><br><span class="line">System.out.println(b3);</span><br></pre></td></tr></table></figure><h6 id="返回元素"><a href="#返回元素" class="headerlink" title="返回元素"></a>返回元素</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回第一个</span></span><br><span class="line">System.out.println(list.stream().findFirst().get());</span><br><span class="line"><span class="comment">//返回数据个数</span></span><br><span class="line">System.out.println(list.stream().count());</span><br><span class="line"><span class="comment">//返回最大值</span></span><br><span class="line">System.out.println(list.stream().map(user -&gt; user.id).max(Integer::compareTo).get());</span><br><span class="line"><span class="comment">//返回最小值</span></span><br><span class="line">System.out.println(list.stream().map(user -&gt; user.id).min(Integer::compareTo).get());</span><br></pre></td></tr></table></figure><h6 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(list.stream().map(e -&gt; e.name).reduce((e1,e2) -&gt; e1 + e2));</span><br><span class="line">System.out.println(list.stream().map(e -&gt; e.name).reduce(<span class="string">&quot;a:&quot;</span>, (e1,e2) -&gt; e1 + e2));</span><br></pre></td></tr></table></figure><h6 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;User&gt;&gt; collect = list.stream().collect(Collectors.groupingBy(e -&gt; e.name));</span><br><span class="line">collect.keySet().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h5 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h5><h6 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1 参数不能为null</span></span><br><span class="line">Optional&lt;String&gt; 参数 = Optional.of(<span class="string">&quot;参数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2 参数可以为null</span></span><br><span class="line">Optional&lt;Object&gt; o = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三 创建一个参数为null的Optional对象</span></span><br><span class="line">Optional&lt;Object&gt; empty = Optional.empty();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语法基础一</title>
      <link href="/2023/04/02/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/02/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>只作为入门基础，有些定义不准确</p><span id="more"></span><h3 id="英语语句构成"><a href="#英语语句构成" class="headerlink" title="英语语句构成"></a>英语语句构成</h3><p>也就是英语的构成部分，一共有7个，主语、谓语、宾语、表句、补语、定语、状语</p><h4 id="主语"><a href="#主语" class="headerlink" title="主语"></a>主语</h4><p>定义：就是一句话叙述的对象，或者是这句话主要讲的内容，名词、代词、数词、动词不定式、动名词、句子、其他（只包含有特殊词意的短语或者单词）都可以作为主语。</p><h5 id="名词作主语"><a href="#名词作主语" class="headerlink" title="名词作主语"></a>名词作主语</h5><p>世界万物所有名称，人，物体等所有东西，例如钢笔（pen），声音（voice），北京（BeiJing）包括人名等等</p><p>示例：English is easy.</p><h5 id="代词作主语"><a href="#代词作主语" class="headerlink" title="代词作主语"></a>代词作主语</h5><p>代词就是为了避免重复而代替名词的词语。代词又分为指示代词跟人称代词。</p><h6 id="人称代词"><a href="#人称代词" class="headerlink" title="人称代词"></a>人称代词</h6><p>人称代词又分为主格和宾格。主格就是作主语的格式，宾格就是作宾语的格式。主格和宾格都是指同一个意思，只是作用不同。</p><p><strong>主格</strong></p><p>人称代词的主格只有：“I（我）、we （我们）、you （你，你们）、she （她）、he（他）、it（它）、they (他们，她们，它们)”。</p><p>示例：I am teacher.</p><p><strong>宾格</strong></p><p><font color="red">注意！人称代词只有主格可以作为主语，宾格不可以</font></p><p>人称代词的宾格只有：“me（我）、us（我们）、you （你，你们）、her （她）、him（他）、it（它）、them(他们，她们，它们)”。</p><h6 id="指示代词"><a href="#指示代词" class="headerlink" title="指示代词"></a>指示代词</h6><p>用来特指某一个或一类事物，指示代词分单数（this &#x2F; that）和复数（these &#x2F; those）</p><p>示例：This is my book.</p><h5 id="数词作主语"><a href="#数词作主语" class="headerlink" title="数词作主语"></a>数词作主语</h5><p>就是数字，数词就是 1 2 3 4 5 6 7 8 9（基数词）或者第一、第二、第三、第四、第五（序数词）。不管是基数词还是序数词都可以作主语。</p><p>示例：One is a lucky number.（1 是一个幸运号码）</p><h5 id="动词不定式或短语做主语"><a href="#动词不定式或短语做主语" class="headerlink" title="动词不定式或短语做主语"></a>动词不定式或短语做主语</h5><p>动词的其他形式，跟短语。在英语里面，一个动词原型是不能直接作主语的。比如：“eat”是一个动词原型。 吃很重要，不能直接说，“Eat is important”，而要说，“Eating is important”或者“To eat is important”。“To eat”就是动词不定式“eating”就是动名词。“Eat,to eat,eating”意思都是一样的，都是“吃”的意思，只是形式不一样，因为它们作用不同。“Eat”是谓语动词，作谓语的；而“to eat,eating”不能作谓语，但是可以作主语、表语、宾语、状语等，所以叫非谓语。</p><p>示例：to learn english.(学英语 to learn作为主语)，To learn english is easy.(学英语是容易的 To learn english这个短语作为主语存在)</p><h5 id="动名词或者动名词短语"><a href="#动名词或者动名词短语" class="headerlink" title="动名词或者动名词短语"></a>动名词或者动名词短语</h5><p>learning English 学英语</p><p>helping poor people 帮助穷人 </p><p>示例：Learning English is funny.学英语是有趣的。（Learning English作主语）Helping poor people is our duty. 帮助穷人是我们的责任（Helping poor people作主语）</p><h5 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h5><p>示例：</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>具有名词含义的短语或者词，还有就是加了一些特殊的符号的词有大家都能理解的意思。比如，“old”本来是形容词，但是加上“the”之后就变成名词的含义了，“the old”表示“老人”的意思，所以可以作主语。“eat” is a verb. “eat”是一个动词。 （“Eat”是动词原型，但是这里加上了引号，表达名词含义，所以也可以作主语。）</p><h4 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h4><p>定义：主语动作或者状态的词语。谓语是分两种，一种是动作型的谓语，另一种是状态型的谓语。谓语只跟主语有关系，说明主语的情况，跟其他成分没有关系。</p><p><strong>动作型谓语</strong></p><p>动作型的谓语就是由动词构成的，比如说 eat（吃），drink （喝），play（玩），buy（买）但是像：think（思考）like（喜欢）know（知道）consider（考虑）hope（希望）这些词语没有表示明显的动作，或者说是一种看不见的动作。这些都是表示心理行为的词语，也属于动词</p><p>的范畴。</p><h4 id="其他词"><a href="#其他词" class="headerlink" title="其他词"></a>其他词</h4><h5 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h5><p>动词不定式和动名词都叫非谓语动词。</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java23种设计模式详解</title>
      <link href="/2023/03/22/java23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/03/22/java23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>设计模式详解</p><span id="more"></span><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><h4 id="1-简单工厂模式（Simple-Factory-Pattern）"><a href="#1-简单工厂模式（Simple-Factory-Pattern）" class="headerlink" title="1. 简单工厂模式（Simple Factory Pattern）"></a>1. 简单工厂模式（Simple Factory Pattern）</h4><p>简单工厂模式的核心是定义一个创建对象的接口，将对象的创建和本身的业务逻辑分离，降低系统的耦合度，使得两个修改起来相对容易些，当以后实现改变时，只需要修改工厂类即可。在简单工厂模式中，我们在创建对象时不会向客户端暴露创建逻辑，而是使用一个共同的接口来创建对象。</p><h5 id="不使用工厂写法写法"><a href="#不使用工厂写法写法" class="headerlink" title="不使用工厂写法写法"></a>不使用工厂写法写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getGoods</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Mose</span> <span class="variable">mose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mose</span>();</span><br><span class="line">            <span class="type">KeyBoard</span> <span class="variable">keyBoard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyBoard</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mose</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Mose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoard</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">KeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="简单工厂方式"><a href="#简单工厂方式" class="headerlink" title="简单工厂方式"></a>简单工厂方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getGoods</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory</span>();</span><br><span class="line">            <span class="type">Mose</span> <span class="variable">mose</span> <span class="operator">=</span> (Mose) factory.createEntity(EntityEnum.MOSE);</span><br><span class="line">            <span class="type">KeyBoard</span> <span class="variable">keyboard</span> <span class="operator">=</span> (KeyBoard) factory.createEntity(EntityEnum.KEYBOARD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EntityEnum</span> &#123;</span><br><span class="line">        MOSE,KEYBOARD</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">createEntity</span> <span class="params">(EntityEnum entityEnum)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (EntityEnum.MOSE == entityEnum) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mose</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EntityEnum.KEYBOARD == entityEnum) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyBoard</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mose</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Mose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoard</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">KeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h6><p>简单工厂模式使用工厂类来统一创建对象，实现了使用和创建的分离。只需知道具体产品类所对应的参数即可，通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</p><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h6><p> 但缺点在于不符合“开闭原则”，每次添加新产品就需要修改工厂类。在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展维护，并且工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</p><h4 id="2-工厂方法模式（Factory-Method-Pattern）"><a href="#2-工厂方法模式（Factory-Method-Pattern）" class="headerlink" title="2. 工厂方法模式（Factory Method Pattern）"></a>2. 工厂方法模式（Factory Method Pattern）</h4><p>工厂方法模式是将工厂类的创建过程抽象出来，每个具体的产品类都有一个对应的工厂类来创建对象。客户端代码只需要调用相应的工厂类来创建对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mose</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Mose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoard</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">KeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">FactoryProduct</span> &#123;</span><br><span class="line">        Product <span class="title function_">creatProduct</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoseFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryProduct</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Mose <span class="title function_">creatProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mose</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoardFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryProduct</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> KeyBoard <span class="title function_">creatProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyBoard</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mian</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MoseFactory</span> <span class="variable">moseFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoseFactory</span>();</span><br><span class="line">        <span class="type">Mose</span> <span class="variable">mose</span> <span class="operator">=</span> moseFactory.creatProduct();</span><br><span class="line">        <span class="type">KeyBoardFactory</span> <span class="variable">keyBoardFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyBoardFactory</span>();</span><br><span class="line">        <span class="type">KeyBoard</span> <span class="variable">keyBoard</span> <span class="operator">=</span> keyBoardFactory.creatProduct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">demo3</span> <span class="variable">demo3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo3</span>();</span><br><span class="line">        demo3.mian();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h6><p>工厂方法模式将工厂抽象化，并定义了一个创建对象的接口。每次增加新的产品只需要增加该产品跟该产品的工厂类由具体工厂类决定要实例化的产品是哪个，将对象的创建与实例化延迟到子类，这样工厂的设计就符合“开闭原则”了，扩展时不必去修改原来的代码。</p><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h6><p>但缺点在于，每增加一个产品都需要增加一个具体产品类和实现工厂类，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p><p>缺点：</p><h4 id="3-抽象工厂模式（Abstract-Factory-Pattern）"><a href="#3-抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="3. 抽象工厂模式（Abstract Factory Pattern）"></a>3. 抽象工厂模式（Abstract Factory Pattern）</h4><p>抽象工厂模式是在工厂方法模式的基础上，将工厂类的抽象化程度再提高一层。抽象工厂模式用于创建一组相关的对象，它提供了一个接口，用于创建一系列的产品。客户端代码不需要关心具体的产品类，只需要知道抽象工厂和抽象产品类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产品抽象类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鼠标抽象实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mose</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Mose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键盘抽象实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoard</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">KeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 维修抽象类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Maintain</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaintainMose</span> <span class="keyword">extends</span> <span class="title class_">Maintain</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MaintainMose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;维修一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaintainKeyBoard</span> <span class="keyword">extends</span> <span class="title class_">Maintain</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MaintainKeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;维修一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象工厂类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> Maintain <span class="title function_">createMaintain</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoseFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Mose <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mose</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> MaintainMose <span class="title function_">createMaintain</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MaintainMose</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoardFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> KeyBoard <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyBoard</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> MaintainKeyBoard <span class="title function_">createMaintain</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MaintainKeyBoard</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MoseFactory</span> <span class="variable">moseFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoseFactory</span>();</span><br><span class="line">        moseFactory.createProduct();</span><br><span class="line">        moseFactory.createMaintain();</span><br><span class="line">        <span class="type">KeyBoardFactory</span> <span class="variable">keyBoardFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyBoardFactory</span>();</span><br><span class="line">        keyBoardFactory.createProduct();</span><br><span class="line">        keyBoardFactory.createMaintain();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">demo4</span> <span class="variable">demo3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo4</span>();</span><br><span class="line">        demo3.mian();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a><strong>缺点：</strong></h6><p> 但该模式的缺点在于添加新的行为时比较麻烦，如果需要添加一个新产品族对象时，需要更改接口及其下所有子类，这必然会带来很大的麻烦。</p><h4 id="4-单例模式（Singleton-Pattern）"><a href="#4-单例模式（Singleton-Pattern）" class="headerlink" title="4. 单例模式（Singleton Pattern）"></a>4. 单例模式（Singleton Pattern）</h4><p>单例模式是最简单的设计模式之一。在单例模式中，一个类只能创建一个实例，以确保它所有的实例都访问相同的状态。</p><h5 id="简单懒汉模式"><a href="#简单懒汉模式" class="headerlink" title="简单懒汉模式"></a>简单懒汉模式</h5><p>在第一次创建对象的时候去创建对象，使用static保证只会实例化一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Demo5</span> <span class="variable">demo5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo5</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo5 <span class="title function_">getDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == demo5) &#123;</span><br><span class="line">            demo5 = <span class="keyword">new</span> <span class="title class_">Demo5</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> demo5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo5</span> <span class="variable">demo</span> <span class="operator">=</span> Demo5.getDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a><strong>缺点：</strong></h6><p>懒汉式单例的实现是线程不安全的，在并发环境下可能出现多个 Singleton 实例的问题。要实现线程安全，有以下三种方式</p><h6 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h6><p>在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟99%的情况下是不需要同步的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Demo5 <span class="title function_">getDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == demo5) &#123;</span><br><span class="line">        demo5 = <span class="keyword">new</span> <span class="title class_">Demo5</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> demo5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h6><p>双重检查锁定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">Demo6</span> <span class="variable">demo5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo6</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Demo6 <span class="title function_">getDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == demo5) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Demo6.class)&#123;</span><br><span class="line">                <span class="comment">//判断两次空是避免两个线程都通过了第一个&quot;null == demo5&quot;校验，从而创建多次对象</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == demo5) &#123;</span><br><span class="line">                    demo5 = <span class="keyword">new</span> <span class="title class_">Demo6</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> demo5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方式三：静态内部类"><a href="#方式三：静态内部类" class="headerlink" title="方式三：静态内部类"></a>方式三：静态内部类</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Demo7 &#123;</span><br><span class="line"></span><br><span class="line">    //静态内部类只会加载一次</span><br><span class="line">    public static class Demo7a &#123;</span><br><span class="line">        private static final Demo7 dmo = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Demo7 getDemo() &#123;</span><br><span class="line">        return Demo7a.dmo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="简单饿汉模式"><a href="#简单饿汉模式" class="headerlink" title="简单饿汉模式"></a>简单饿汉模式</h5><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="type">Demo8</span> <span class="variable">demo5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo8</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Demo8</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Demo8 <span class="title function_">getDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> demo5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><p>因为声明的对象是提前创建好，且申明是静态的，会在类初始化时候创建，在类卸载时候才释放，生命周期过长</p><h4 id="5-原型模式（Prototype-Pattern）"><a href="#5-原型模式（Prototype-Pattern）" class="headerlink" title="5. 原型模式（Prototype Pattern）"></a>5. 原型模式（Prototype Pattern）</h4><p>原型模式是指创建重复的对象，同时又能保证性能。它通常需要先创建一个原型对象，然后通过复制该对象来创建新的对象。</p><h6 id="原型模式的优点与适用场景："><a href="#原型模式的优点与适用场景：" class="headerlink" title="原型模式的优点与适用场景："></a>原型模式的优点与适用场景：</h6><p>（1）原型模式比 new 方式创建对象的性能要好的多，因为 Object 类的 clone() 方法是一个本地方法，直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显；</p><p>（2）简化对象的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo9</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Demo9a</span> <span class="variable">demo9a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo9a</span>(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        <span class="type">Demo9a</span> <span class="variable">clone1</span> <span class="operator">=</span> demo9a.clone();</span><br><span class="line">        System.out.println(demo9a);</span><br><span class="line">        System.out.println(clone1);</span><br><span class="line">        System.out.println(demo9a.equals(clone1)+ <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">        clone1.setName(<span class="string">&quot;花木兰&quot;</span>);</span><br><span class="line">        System.out.println(demo9a);</span><br><span class="line">        System.out.println(clone1);</span><br><span class="line">        System.out.println(demo9a.equals(clone1)+ <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo9a</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Demo9a <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (Demo9a) <span class="built_in">super</span>.clone();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo9a</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo9a</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新equals跟hashcode方法用来比较对象的值是否相等</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Demo9a</span> <span class="variable">demo9a</span> <span class="operator">=</span> (Demo9a) o;</span><br><span class="line">        <span class="keyword">return</span> name.equals(demo9a.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Demo9a&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><h4 id="6-适配器模式（Adapter-Pattern）"><a href="#6-适配器模式（Adapter-Pattern）" class="headerlink" title="6. 适配器模式（Adapter Pattern）"></a>6. 适配器模式（Adapter Pattern）</h4><p>适配器模式是一种结构型模式，它允许一个已经存在的类的接口与另一个接口不兼容的类进行合作。适配器模式主要分成三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p><h5 id="类的适配器模式"><a href="#类的适配器模式" class="headerlink" title="类的适配器模式"></a>类的适配器模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//加强版</span></span><br><span class="line">        <span class="type">insa</span> <span class="variable">demo0Plas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo0Plas</span>();</span><br><span class="line">        demo0Plas.a();</span><br><span class="line">        <span class="comment">//普通版</span></span><br><span class="line">        <span class="type">insa</span> <span class="variable">demo0a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo0a</span>();</span><br><span class="line">        demo0a.a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">insa</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo0a</span> <span class="keyword">implements</span> <span class="title class_">insa</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加强版pals类方法a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo0s</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加强版方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器，同时实现两个类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Demo0Plas</span> <span class="keyword">extends</span> <span class="title class_">Demo0s</span> <span class="keyword">implements</span> <span class="title class_">insa</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口的适配器模式"><a href="#接口的适配器模式" class="headerlink" title="接口的适配器模式"></a>接口的适配器模式</h5><p>有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">sub1</span> <span class="variable">sub1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sub1</span>();</span><br><span class="line">        <span class="type">sub2</span> <span class="variable">sub2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sub2</span>();</span><br><span class="line">        sub2.method2();</span><br><span class="line">        sub1.method1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">As</span> <span class="keyword">implements</span> <span class="title class_">a</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sub1</span> <span class="keyword">extends</span> <span class="title class_">As</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sub2</span> <span class="keyword">extends</span> <span class="title class_">As</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-桥接模式（Bridge-Pattern）"><a href="#7-桥接模式（Bridge-Pattern）" class="headerlink" title="7. 桥接模式（Bridge Pattern）"></a>7. 桥接模式（Bridge Pattern）</h4><p>桥接模式是一种结构型模式，它将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>咖啡店，有两种咖啡加糖或者加奶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加糖咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加奶咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MilkSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在准备加两个容量规格的咖啡，大杯和小杯，当然你可以对应加几个实现类不就得了？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加糖咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxCoffeeSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大杯加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加糖咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinCoffeeSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小杯加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加奶咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxMilkSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大杯加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加奶咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinMilkSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小杯加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再过几天，你们要上架超大杯很中杯子。。。。。。这时候你的实现类将是M*N所有维度的乘集，这个你需要使用设计模式，让你代码降低耦合</p><h5 id="重新设计后代码"><a href="#重新设计后代码" class="headerlink" title="重新设计后代码"></a>重新设计后代码</h5><p>M*N 优化后为 M+N</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CoffeeAbstract</span> <span class="variable">coffeeAbstract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Max</span>();</span><br><span class="line">        <span class="comment">//加奶</span></span><br><span class="line">        coffeeAbstract.setCoffeeService(<span class="keyword">new</span> <span class="title class_">MilkSugaring</span>());</span><br><span class="line">        coffeeAbstract.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//购买咖啡接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CoffeeService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MilkSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把加材料的抽象出来</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> CoffeeService coffeeService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CoffeeService <span class="title function_">getCoffeeService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffeeService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCoffeeService</span><span class="params">(CoffeeService coffeeService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coffeeService = coffeeService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Max</span> <span class="keyword">extends</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;大杯&quot;</span>);</span><br><span class="line">        coffeeService.buyCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Min</span> <span class="keyword">extends</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;小杯&quot;</span>);</span><br><span class="line">        coffeeService.buyCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你想增加超大杯跟中杯只需要增加两个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Centre</span> <span class="keyword">extends</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;中杯&quot;</span>);</span><br><span class="line">        coffeeService.buyCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Huge</span> <span class="keyword">extends</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;超杯&quot;</span>);</span><br><span class="line">        coffeeService.buyCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><p>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</p><h4 id="8-装饰器模式（Decorator-Pattern）"><a href="#8-装饰器模式（Decorator-Pattern）" class="headerlink" title="8. 装饰器模式（Decorator Pattern）"></a>8. 装饰器模式（Decorator Pattern）</h4><p>装饰器模式是一种结构型模式，它允许你通过将对象包装在一个装饰器类中来扩展其行为，而不需要修改其代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HuaMuLan</span> <span class="variable">huaMuLan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaMuLan</span>();</span><br><span class="line">        <span class="type">Pifu</span> <span class="variable">pifu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pifu</span>(huaMuLan);</span><br><span class="line">        System.out.println(pifu.getIncident());</span><br><span class="line">        System.out.println(pifu.getAttack());</span><br><span class="line">        <span class="type">ZhuangBei</span> <span class="variable">zhuangBei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZhuangBei</span>(huaMuLan);</span><br><span class="line">        System.out.println(zhuangBei.getIncident());</span><br><span class="line">        System.out.println(zhuangBei.getAttack());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">YingXiong</span>&#123;</span><br><span class="line">    <span class="comment">//加成栏</span></span><br><span class="line">    <span class="keyword">private</span> String incident;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> attack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getAttack</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getIncident</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择英雄</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuaMuLan</span> <span class="keyword">extends</span> <span class="title class_">YingXiong</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIncident</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;选择花木兰\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一层装饰者 买了皮肤</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pifu</span> <span class="keyword">extends</span> <span class="title class_">HuaMuLan</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HuaMuLan huaMuLan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pifu</span><span class="params">(HuaMuLan huaMuLan)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.huaMuLan = huaMuLan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> huaMuLan.getAttack() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIncident</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> huaMuLan.getIncident()  + <span class="string">&quot;购买皮肤水晶猎龙者\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二层装饰 买了装备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZhuangBei</span> <span class="keyword">extends</span> <span class="title class_">HuaMuLan</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HuaMuLan huaMuLan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ZhuangBei</span><span class="params">(HuaMuLan huaMuLan)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.huaMuLan = huaMuLan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> huaMuLan.getAttack() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIncident</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> huaMuLan.getIncident()  + <span class="string">&quot;购买铁剑\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-组合模式（Composite-Pattern）"><a href="#9-组合模式（Composite-Pattern）" class="headerlink" title="9. 组合模式（Composite Pattern）"></a>9. 组合模式（Composite Pattern）</h5><p>组合模式是一种结构型模式，它允许你将对象组合成树形结构来表现“整体&#x2F;部分”层次结构。</p><p>示例：文件夹浏览，我们需要把不同类型的文件兼容到一个窗口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Folders</span> <span class="variable">zwjj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folders</span>(<span class="string">&quot;总文件夹&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">TextFile</span> <span class="variable">aText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextFile</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">ImagerFile</span> <span class="variable">bImager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImagerFile</span>(<span class="string">&quot;b.jpg&quot;</span>);</span><br><span class="line">        <span class="type">Folders</span> <span class="variable">cFolders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folders</span>(<span class="string">&quot;C文件夹&quot;</span>);</span><br><span class="line">        zwjj.add(aText);</span><br><span class="line">        zwjj.add(bImager);</span><br><span class="line">        zwjj.add(cFolders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向C文件夹中添加文件：c.txt、c.jpg </span></span><br><span class="line">        <span class="type">TextFile</span> <span class="variable">cText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextFile</span>(<span class="string">&quot;c.txt&quot;</span>);</span><br><span class="line">        <span class="type">ImagerFile</span> <span class="variable">cImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImagerFile</span>(<span class="string">&quot;c.jpg&quot;</span>);</span><br><span class="line">        cFolders.add(cText);</span><br><span class="line">        cFolders.add(cImage);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//遍历一级文件夹</span></span><br><span class="line">        zwjj.getAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历C文件夹</span></span><br><span class="line">        cFolders.getAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">File</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件夹也是一个文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Folders</span> <span class="keyword">extends</span> <span class="title class_">File</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;File&gt; files;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Folders</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.files = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">add</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> files.add(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> files.remove(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterator&lt;File&gt; iterator = files.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextFile</span> <span class="keyword">extends</span> <span class="title class_">File</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextFile</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是文本文件，文件名：&quot;</span> + <span class="built_in">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImagerFile</span> <span class="keyword">extends</span> <span class="title class_">File</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImagerFile</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是图像文件，文件名：&quot;</span> + <span class="built_in">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-外观模式（Facade-Pattern）"><a href="#10-外观模式（Facade-Pattern）" class="headerlink" title="10. 外观模式（Facade Pattern）"></a>10. 外观模式（Facade Pattern）</h5><p>外观模式是一种结构型模式，它提供了一个简单的接口，隐藏了一个复杂的子系统的复杂性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Service1</span> <span class="variable">service1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Service1Impl</span>();</span><br><span class="line">        service1.all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Service1</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">all</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Service1Impl</span> <span class="keyword">implements</span> <span class="title class_">Service1</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">all</span><span class="params">()</span> &#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-享元模式（Flyweight-Pattern）"><a href="#11-享元模式（Flyweight-Pattern）" class="headerlink" title="11. 享元模式（Flyweight Pattern）"></a>11. 享元模式（Flyweight Pattern）</h5><p>Java中的享元模式（Flyweight Pattern）是一种结构型设计模式，它可以在大量的相似对象之间共享尽可能多的数据，从而减少内存的使用量和提高性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassFactory</span> <span class="variable">classFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassFactory</span>();</span><br><span class="line">        <span class="type">a</span> <span class="variable">f1</span> <span class="operator">=</span> classFactory.getFlyweight(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        <span class="type">a</span> <span class="variable">f2</span> <span class="operator">=</span> classFactory.getFlyweight(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        <span class="type">a</span> <span class="variable">f3</span> <span class="operator">=</span> classFactory.getFlyweight(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">getThisclass</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    String className;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">b</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getThisclass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前类是&quot;</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassFactory</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> HashMap&lt;String, a&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    a <span class="title function_">getFlyweight</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">a</span> <span class="variable">a</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == a) &#123;</span><br><span class="line">            a = <span class="keyword">new</span> <span class="title class_">b</span>(key);</span><br><span class="line">            map.put(key, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-代理模式（Proxy-Pattern）"><a href="#12-代理模式（Proxy-Pattern）" class="headerlink" title="12. 代理模式（Proxy Pattern）"></a>12. 代理模式（Proxy Pattern）</h4><p>代理模式是一种结构型模式，它为其他对象提供一种代理以控制对这个对象的访问。</p><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p>静态代理：由程序员创建或特定工具自动生成源代码，也就是<strong>在编译时就已经将接口、被代理类、代理类等确定下来</strong>。在程序运行之前，代理类的.class文件就已经生成。</p><p>示例：学生缴纳班费，但是班长代理学生上交班费，班长就是学生的代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个缴费的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">giveMoney</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生缴费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">giveMoney</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;上交班费50元&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StudentsClassMonitor</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="comment">//被代理的学生</span></span><br><span class="line">        Student stu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StudentsClassMonitor</span><span class="params">(Person stu)</span> &#123;</span><br><span class="line">            <span class="comment">// 只代理学生对象</span></span><br><span class="line">            <span class="keyword">if</span> (stu.getClass() == Student.class) &#123;</span><br><span class="line">                <span class="built_in">this</span>.stu = (Student) stu;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理上交班费，调用被代理学生的上交班费行为</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">giveMoney</span><span class="params">()</span> &#123;</span><br><span class="line">            stu.giveMoney();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//被代理的学生张三，他的班费上交有代理对象monitor（班长）完成</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成代理对象，并将张三传给代理对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">monitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentsClassMonitor</span>(zhangsan);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//班长代理上交班费</span></span><br><span class="line">        monitor.giveMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h4><h5 id="13-责任链模式（Chain-of-Responsibility-Pattern）"><a href="#13-责任链模式（Chain-of-Responsibility-Pattern）" class="headerlink" title="13. 责任链模式（Chain of Responsibility Pattern）"></a>13. 责任链模式（Chain of Responsibility Pattern）</h5><p>责任链模式是一种行为型模式，它允许你将请求沿着处理链进行传递，直到有一个对象处理为止。</p><h5 id="14-命令模式（Command-Pattern）"><a href="#14-命令模式（Command-Pattern）" class="headerlink" title="14. 命令模式（Command Pattern）"></a>14. 命令模式（Command Pattern）</h5><p>命令模式是一种行为型模式，它将请求封装为对象，从而允许你使用不同的请求、队列或日志来参数化客户端请求。</p><h5 id="15-解释器模式（Interpreter-Pattern）"><a href="#15-解释器模式（Interpreter-Pattern）" class="headerlink" title="15. 解释器模式（Interpreter Pattern）"></a>15. 解释器模式（Interpreter Pattern）</h5><p>解释器模式是一种行为型模式，它定义了一种语言，然后通过该语言来解释表达式。</p><h5 id="16-迭代器模式（Iterator-Pattern）"><a href="#16-迭代器模式（Iterator-Pattern）" class="headerlink" title="16. 迭代器模式（Iterator Pattern）"></a>16. 迭代器模式（Iterator Pattern）</h5><p>迭代器模式是一种行为型模式，它允许你在不暴露集合底层表示的情况下遍历集合。</p><h5 id="17-中介者模式（Mediator-Pattern）"><a href="#17-中介者模式（Mediator-Pattern）" class="headerlink" title="17. 中介者模式（Mediator Pattern）"></a>17. 中介者模式（Mediator Pattern）</h5><p>中介者模式是一种行为型模式，它允许你减少对象之间的直接耦合，通过将它们的通信委托给一个中介者对象来实现。</p><h5 id="18-备忘录模式（Memento-Pattern）"><a href="#18-备忘录模式（Memento-Pattern）" class="headerlink" title="18. 备忘录模式（Memento Pattern）"></a>18. 备忘录模式（Memento Pattern）</h5><p>备忘录模式是一种行为型模式，它允许你在不暴露对象实现细节的情况下保存和恢复对象的状态。</p><h5 id="19-观察者模式（Observer-Pattern）"><a href="#19-观察者模式（Observer-Pattern）" class="headerlink" title="19. 观察者模式（Observer Pattern）"></a>19. 观察者模式（Observer Pattern）</h5><p>观察者模式是一种行为型模式，它允许你定义一种订阅机制，以便一个对象的状态发生变化时通知一组对象。</p><h5 id="20-状态模式（State-Pattern）"><a href="#20-状态模式（State-Pattern）" class="headerlink" title="20. 状态模式（State Pattern）"></a>20. 状态模式（State Pattern）</h5><p>状态模式是一种行为型模式，它允许你在一个对象内部状态发生变化时改变其行为。</p><h5 id="21-策略模式（Strategy-Pattern）"><a href="#21-策略模式（Strategy-Pattern）" class="headerlink" title="21. 策略模式（Strategy Pattern）"></a>21. 策略模式（Strategy Pattern）</h5><p>策略模式是一种行为型模式，它允许你定义一系列算法，然后将它们封装在一个对象中，以便在运行时动态地选择算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, Pull&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Pull&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;A&quot;</span>, <span class="keyword">new</span> <span class="title class_">Cell</span>());</span><br><span class="line">        put(<span class="string">&quot;B&quot;</span>, <span class="keyword">new</span> <span class="title class_">Msg</span>());</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Context</span>(map.get(str)).pull();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Pull</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略实现类1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cell</span> <span class="keyword">implements</span> <span class="title class_">Pull</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cell 个小电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略实现类2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Msg</span> <span class="keyword">implements</span> <span class="title class_">Pull</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msg 个小短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环境类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Pull pull;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(Pull pull)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pull = pull;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msg 个小短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="22-模板方法模式（Template-Method-Pattern）"><a href="#22-模板方法模式（Template-Method-Pattern）" class="headerlink" title="22. 模板方法模式（Template Method Pattern）"></a>22. 模板方法模式（Template Method Pattern）</h5><p>模板方法模式是一种行为型模式，它定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现。</p><h5 id="23-访问者模式（Visitor-Pattern）"><a href="#23-访问者模式（Visitor-Pattern）" class="headerlink" title="23. 访问者模式（Visitor Pattern）"></a>23. 访问者模式（Visitor Pattern）</h5><p>访问者模式是一种行为型模式，它允许你将操作从元素的类中分离出来，将它们封装在一个访问者对象中。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-AOP详解</title>
      <link href="/2023/03/22/spring-AOP%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/03/22/spring-AOP%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>springAOP常见四种实现方式详解</p><span id="more"></span><h4 id="springAOP介绍"><a href="#springAOP介绍" class="headerlink" title="springAOP介绍"></a>springAOP介绍</h4><p>Spring AOP是Spring框架中的一个核心组件，它提供了一种在运行时动态地将代码织入到应用程序中的机制。通过AOP，可以在不修改原始代码的情况下，实现各种横切关注点的功能，例如日志记录、事务管理、安全性等。</p><h4 id="springAOP实现方式"><a href="#springAOP实现方式" class="headerlink" title="springAOP实现方式"></a>springAOP实现方式</h4><p>Spring AOP就是基于动态代理实现的， 分为两种代理，jdk动态代理（基于接口）和cglib代理（基于类的）。如果目标对象实现了接口，就用jdk动态代理，如果未实现接口就用cglib动态代理。</p><h4 id="jdk-cglib动态代理详解"><a href="#jdk-cglib动态代理详解" class="headerlink" title="jdk&amp;cglib动态代理详解"></a>jdk&amp;cglib动态代理详解</h4><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类 ，使用的是 Java反射技术实现，生成类的过程比较高效。<br>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 ，使用asm字节码框架实现，相关执行的过程比较高效，<br>JDK代理是不需要第三方库支持，只需要JDK环境就可以进行代理，使用条件:实现InvocationHandler + 使用Proxy.newProxyInstance产生代理对象 + 被代理的对象必须要实现接口<br>CGLib必须依赖于CGLib的类库，但是它需要类来实现任何接口代理的是指定的类生成一个子类，覆盖其中的方法，是一种继承但是针对接口编程的环境下推荐使用JDK的代理</p><p>示例：</p><p>1.定义用户创建跟新增的两个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManager</span> &#123;</span><br><span class="line">    <span class="comment">//新增用户抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String userName, String password)</span>;</span><br><span class="line">    <span class="comment">//删除用户抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delUser</span><span class="params">(String userName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManager</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写用户新增方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String userName, String password)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了用户新增的方法！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;传入参数：\nuserName = &quot;</span> + userName +<span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写删除用户方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delUser</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了删除的方法！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;传入参数：\nuserName = &quot;</span>+userName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.jdk实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要代理的目标对象</span></span><br><span class="line">    <span class="keyword">private</span>  Object targetObject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getJDKProxy</span> <span class="params">(Object targetObject)</span> &#123;</span><br><span class="line">        <span class="comment">//为目标target赋值</span></span><br><span class="line">        <span class="built_in">this</span>.targetObject = targetObject;</span><br><span class="line">        <span class="comment">//JDK动态代理只能针对实现了接口的类进行代理，newProxyInstance 函数所需参数就可看来</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxyObject</span> <span class="operator">=</span> Proxy.newProxyInstance(targetObject.getClass().getClassLoader(), targetObject.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> proxyObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK动态代理，监听开始！&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用invoke方法，result存储该方法的返回值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(targetObject,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK动态代理，监听结束！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.cglib代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cglib动态代理，实现MethodInterceptor接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;<span class="comment">//需要代理的目标对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写拦截方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cglib动态代理，监听开始！&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target,args);<span class="comment">//方法执行参数：target 目标对象 arr参数数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Cglib动态代理，监听结束！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义获取代理对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> UserManager <span class="title function_">getCglibProxy</span><span class="params">(Object targetObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = targetObject;<span class="comment">//为目标对象target赋值</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//设置父类,因为Cglib是针对指定的类生成一个子类，所以需要指定父类</span></span><br><span class="line">        enhancer.setSuperclass(targetObject.getClass()); <span class="comment">//UserManagerImpl</span></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);<span class="comment">//设置回调</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> enhancer.create();<span class="comment">//创建并返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> (UserManager) result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.proxy.CglibProxy.CglibProxy;</span><br><span class="line"><span class="keyword">import</span> com.proxy.JDKProxy.JdkProxy;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">JdkProxy</span> <span class="variable">jdkProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkProxy</span>();  <span class="comment">//实例化JDKProxy对象</span></span><br><span class="line">        <span class="type">UserManager</span> <span class="variable">userJdk</span> <span class="operator">=</span> (UserManager) jdkProxy.getJDKProxy(<span class="keyword">new</span> <span class="title class_">UserManagerImpl</span>());   <span class="comment">//获取代理对象</span></span><br><span class="line">        userJdk.addUser(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">CglibProxy</span> <span class="variable">cglibProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibProxy</span>(); <span class="comment">//实例化CglibProxy对象</span></span><br><span class="line">        <span class="type">UserManager</span> <span class="variable">userCglib</span> <span class="operator">=</span> cglibProxy.getCglibProxy(<span class="keyword">new</span> <span class="title class_">UserManagerImpl</span>());<span class="comment">//获取代理对象</span></span><br><span class="line">        userCglib.delUser(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="aop的通知方法"><a href="#aop的通知方法" class="headerlink" title="aop的通知方法"></a>aop的通知方法</h4><p>前置通知：在我们执行目标方法之前运行</p><p>后置通知：在我们目标方法运行结束之后，不管有没有异常</p><p>返回通知：在我们的目标方法正常返回值后运行</p><p>异常通知：在我们的目标方法出现异常后运行</p><p>环绕通知：目标方法的调用由环绕通知决定，即你可以决定是否调用目标方法，joinPoint.procced()就是执行目标方法的代码 。环绕通知可以控制返回对象</p><h4 id="AOP的几种实现方式"><a href="#AOP的几种实现方式" class="headerlink" title="AOP的几种实现方式"></a>AOP的几种实现方式</h4><p>使用到的依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方式一：XML配置方式"><a href="#方式一：XML配置方式" class="headerlink" title="方式一：XML配置方式"></a>方式一：XML配置方式</h5><p>1.定义一个Person类，类中有一个吃饭的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建一个两个切面类，实现spring用于aop的接口</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>MethodBeforeAdvice</td><td>前置通知</td></tr><tr><td>AfterAdvice</td><td>后置通知</td></tr><tr><td>AfterReturningAdvice</td><td>返回通知</td></tr><tr><td>ThrowsAdvice</td><td>异常通知</td></tr><tr><td>MethodInterceptor</td><td>环绕通知</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeforeEat</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知===先要做饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterEat</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知===吃完饭刷碗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置切面，application.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1、注册bean，将实体类注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterEat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo1.AfterEat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeEat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo1.BeforeEat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo1.Person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2、配置AOP切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点 expression为表达式，参数为切入的位置，demo1.Person.*表示类中所有方法都切入，*(..)两个点表示不指定参数（任意）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* demo1.Person.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置类切入到哪里:如beforeLog类切入到expression表达式指的位置，即demo1类下的所有方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterEat&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeEat&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过目标的bean id，获得代理对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) context.getBean(<span class="string">&quot;person&quot;</span>);<span class="comment">//获取注册的bean对象，实例对象变成bean对象，就是代理对象</span></span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">前置通知==吃饭前做饭</span><br><span class="line">吃饭了</span><br><span class="line">后置通知===吃完饭刷碗</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><h5 id="方式2：自定义类来实现AOP"><a href="#方式2：自定义类来实现AOP" class="headerlink" title="方式2：自定义类来实现AOP"></a>方式2：自定义类来实现AOP</h5><p>1.创建一个自定义切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">diyPointCut</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========方法执行前==========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========方法执行后==========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.xm配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1、注册bean，将实体类注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo1.diyPointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo1.Person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* demo1.Person.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知（指定diyPointCut类中的哪个method，aop:before就表示前置）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application2.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过目标的bean id，获得代理对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) context.getBean(<span class="string">&quot;person&quot;</span>);<span class="comment">//获取注册的bean对象，实例对象变成bean对象，就是代理对象</span></span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.结果</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=========方法执行前==========</span><br><span class="line">吃饭了</span><br><span class="line">=========方法执行后==========</span><br></pre></td></tr></table></figure><h5 id="方式三：基于注解实现"><a href="#方式三：基于注解实现" class="headerlink" title="方式三：基于注解实现"></a>方式三：基于注解实现</h5><h6 id="aop注解"><a href="#aop注解" class="headerlink" title="aop注解"></a>aop注解</h6><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Aspect</td><td><strong>注解用来描述一个切面类，定义切面类的时候需要打上这个注解。</strong></td></tr><tr><td>@Order</td><td>个自定义的<code>AOP</code>注解可以对应多个切面类，这些切面类执行顺序由<code>@Order</code>注解管理，该注解后的数字越小，所在切面类越先执行。</td></tr><tr><td>@Pointcut</td><td>注解，用来定义一个切点，即上文中所关注的某件事情的入口，切入点定义了事件触发时机。</td></tr><tr><td>@Around</td><td>在方法执行之前和之后都执行通知。</td></tr><tr><td>@Before</td><td><strong>注解指定的方法在切面切入目标方法之前执行</strong></td></tr><tr><td>@After</td><td><code>@After</code> 注解和 <code>@Before</code> 注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 Log 处理。</td></tr><tr><td>@AfterReturning</td><td>解和 <code>@After</code> 有些类似，区别在于 <code>@AfterReturning</code> 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理</td></tr><tr><td>@AfterThrowing</td><td>当被切方法执行过程中抛出异常时，会进入 <code>@AfterThrowing</code> 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。要注意的是 <code>throwing</code> 属性的值必须要和参数一致，否则会报错。该方法中的第二个入参即为抛出的异常。</td></tr></tbody></table><p>示例</p><p>1.新建了一个boot项目</p><p>2.依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.切面逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogHelp</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.aopdemo2.demo.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLog</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;触发切面方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;addLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法 &quot;</span> + methodName + <span class="string">&quot;前置加强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;addLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfter</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法 &quot;</span> + methodName + <span class="string">&quot;后置加强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;addLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法 &quot;</span> + methodName + <span class="string">&quot;执行前加强&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法 &quot;</span> + methodName + <span class="string">&quot;执行后加强&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;addLog()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法 &quot;</span> + methodName + <span class="string">&quot;返回值加强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut = &quot;addLog()&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterThrowing</span><span class="params">(JoinPoint joinPoint, Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法 &quot;</span> + methodName + <span class="string">&quot;报错加强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sw</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LogHelp logHelp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;d&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">a</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;Object&gt; objects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">            objects.get(<span class="number">10</span>);</span><br><span class="line">            logHelp.addLog();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;sadasds&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;sadas&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射详解</title>
      <link href="/2023/03/21/java%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/03/21/java%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>java反射详解</p><span id="more"></span><h4 id="一、反射的概念"><a href="#一、反射的概念" class="headerlink" title="一、反射的概念"></a>一、反射的概念</h4><h5 id="1-1动态语言跟静态语言"><a href="#1-1动态语言跟静态语言" class="headerlink" title="1.1动态语言跟静态语言"></a>1.1动态语言跟静态语言</h5><h6 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a><strong>动态语言</strong></h6><p>是一种可以在运行时可以改变其结构的语言：例如新的函数、代码、对象可以被引进</p><p>例如：html，js，php，python等</p><h6 id="静态语言"><a href="#静态语言" class="headerlink" title="静态语言"></a>静态语言</h6><p>与之相反，就是再运行时结构不可变的静态语言，例如java更改本地代码后你需要重新编译启动</p><p>例如：java、c、c++、</p><h6 id="准动态语言"><a href="#准动态语言" class="headerlink" title="准动态语言"></a>准动态语言</h6><p>严格来说java并不能算一种纯静态语言，因为java有一定的动态性。我们可以利用java反射的机制获得类似动态语言的特性。java的动态性让编程的时候变得更灵活</p><h5 id="1-2java的反射机制概念"><a href="#1-2java的反射机制概念" class="headerlink" title="1.2java的反射机制概念"></a>1.2java的反射机制概念</h5><p>Java 中的反射机制，就是在运行的时候，对于任何一个类，都可以知道这个类里面的所有属性和方法；对于任何一个对象，都可以调用这个对象里面的任意一个方法和属性。这种动态获取信息和动态调用对象方法的功能，就被称为 Java 中的反射机制</p><h5 id="1-3反射可以做什么"><a href="#1-3反射可以做什么" class="headerlink" title="1.3反射可以做什么"></a>1.3反射可以做什么</h5><p><img src="/2023/03/21/java%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/image-20230321160305747-9385787.png" alt="image-20230321160305747"></p><h5 id="1-4使用反射的好处跟缺点"><a href="#1-4使用反射的好处跟缺点" class="headerlink" title="1.4使用反射的好处跟缺点"></a>1.4使用反射的好处跟缺点</h5><p><strong>优点</strong>：可以实现动态创建对象和编译，灵活性大大提高</p><p><strong>缺点：</strong>对性能有影响。使用反射基本上是一种解释操作，这类操作慢于相同的直接执行</p><h4 id="二、class对象"><a href="#二、class对象" class="headerlink" title="二、class对象"></a>二、class对象</h4><h5 id="2-1获取class对象的几种方式"><a href="#2-1获取class对象的几种方式" class="headerlink" title="2.1获取class对象的几种方式"></a>2.1获取class对象的几种方式</h5><p><strong><font color="red">注意：在运行期间，一个类，只有一个Class对象产生。</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetReflection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//方式一 通过对象获取class对象</span></span><br><span class="line">        <span class="type">GetReflection</span> <span class="variable">getReflection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetReflection</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">getReflectionClass1</span> <span class="operator">=</span> getReflection.getClass();</span><br><span class="line">        System.out.println(getReflectionClass1.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二 通过累的所在路径获取对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">getReflectionClass2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.GetReflection&quot;</span>);</span><br><span class="line">        System.out.println(getReflectionClass2.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三 通过类名 类名class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">getReflectionClass3</span> <span class="operator">=</span> GetReflection.class;</span><br><span class="line">        System.out.println(getReflectionClass3.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2class类常用的方法"><a href="#2-2class类常用的方法" class="headerlink" title="2.2class类常用的方法"></a>2.2class类常用的方法</h5><p><img src="/2023/03/21/java%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/image-20230321163608458.png" alt="image-20230321163608458"></p><h5 id="2-3那些类型可以获得class对象"><a href="#2-3那些类型可以获得class对象" class="headerlink" title="2.3那些类型可以获得class对象"></a>2.3那些类型可以获得class对象</h5><p><img src="/2023/03/21/java%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/image-20230321163717313.png" alt="image-20230321163717313"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有类型的Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06_AllTypeClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class; <span class="comment">//类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class; <span class="comment">//接口</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class; <span class="comment">//一维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class; <span class="comment">//二维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Override.class; <span class="comment">//注解</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> ElementType.class; <span class="comment">//美剧</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class; <span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class; <span class="comment">//void</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class; <span class="comment">//class</span></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只要元素类型与维度一样,就是同一个Class</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三、反射的使用"><a href="#三、反射的使用" class="headerlink" title="三、反射的使用"></a>三、反射的使用</h4><h5 id="3-1反射构造方法"><a href="#3-1反射构造方法" class="headerlink" title="3.1反射构造方法"></a>3.1反射构造方法</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>getConstructors()</td><td>获取所有的公共构造方法</td></tr><tr><td>getDeclaredConstructors()</td><td>获取所有的构造方法，（包括私有的，受保护，共有，默认）</td></tr><tr><td>getConstructor()</td><td>获取共有或无参的构造方法，参数为构造方法参数类型例如</td></tr><tr><td>getDeclaredConstructor()</td><td>取私有的构造放饭参数为构造方法的参数类型；（包括私有的，受保护，共有，默认）；getDeclaredConstructor(String.class,int.class)</td></tr><tr><td>构造器对象.newInstance()</td><td>获取class的实例对象</td></tr><tr><td>操作的对象setAccessible(true)</td><td>忽略修饰符校验</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------------构造方法-------------------</span></span><br><span class="line">    <span class="comment">//（默认的构造方法）</span></span><br><span class="line">    Student(String str)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(默认)的构造方法 s = &quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了公有、无参构造方法执行了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个参数的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">char</span> name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有多个参数的构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String name ,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+name+<span class="string">&quot;年龄：&quot;</span>+ age);<span class="comment">//这的执行效率有问题，以后解决。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//受保护的构造方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Student</span><span class="params">(<span class="type">boolean</span> n)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;受保护的构造方法 n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有的构造方法   年龄：&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;Student&gt; studentClass = Student.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********************所有公有构造方法*********************************&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt;[] constructors = studentClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;************所有的构造方法(包括：私有、受保护、默认、公有)***************&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = studentClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(declaredConstructor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;*****************获取公有、无参的构造方法*******************************&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> studentClass.getConstructor(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;con = &quot;</span> + con);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;******************获取私有构造方法，并调用*******************************&quot;</span>);</span><br><span class="line">        con = studentClass.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(con);</span><br><span class="line">        <span class="comment">//调用构造方法</span></span><br><span class="line">        con.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力访问(忽略掉访问修饰符)</span></span><br><span class="line">        obj = con.newInstance(<span class="string">&quot;男&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">**********************所有公有构造方法*********************************</span><br><span class="line">public com.dto.Student()</span><br><span class="line">public com.dto.Student(char)</span><br><span class="line">************所有的构造方法(包括：私有、受保护、默认、公有)***************</span><br><span class="line">private com.dto.Student(int)</span><br><span class="line">protected com.dto.Student(boolean)</span><br><span class="line">private com.dto.Student(java.lang.String,int)</span><br><span class="line">com.dto.Student(java.lang.String)</span><br><span class="line">public com.dto.Student()</span><br><span class="line">public com.dto.Student(char)</span><br><span class="line">*****************获取公有、无参的构造方法*******************************</span><br><span class="line">con = public com.dto.Student()</span><br><span class="line">调用了公有、无参构造方法执行了。。。</span><br><span class="line">******************获取私有构造方法，并调用*******************************</span><br><span class="line">private com.dto.Student(java.lang.String,int)</span><br><span class="line">姓名：男年龄：2</span><br></pre></td></tr></table></figure><h5 id="3-2反射成员变量（字段）"><a href="#3-2反射成员变量（字段）" class="headerlink" title="3.2反射成员变量（字段）"></a>3.2反射成员变量（字段）</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getFields()</td><td>获取所有的共有字段</td></tr><tr><td>getDeclaredFields()</td><td>获取所有字段(包括私有、受保护、共有、默认的)）</td></tr><tr><td>getField(参数字段名称)</td><td>示例getField(“name”)，获取公有字段</td></tr><tr><td>getDeclaredField()</td><td>示例getDeclaredField(“phoneNum”)  获取私有字段 （包括私有的，受保护，共有，默认）</td></tr><tr><td>操作的对象setAccessible(true)</td><td>忽略修饰符校验</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, phoneNum=&#x27;&quot;</span> + phoneNum + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">userClass</span> <span class="operator">=</span> user.getClass();</span><br><span class="line">        <span class="comment">//获取字段</span></span><br><span class="line">        System.out.println(<span class="string">&quot;************获取所有公有的字段********************&quot;</span>);</span><br><span class="line">        Field[] fields = userClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;************获取所有的字段(包括私有、受保护、默认的)********************&quot;</span>);</span><br><span class="line">        Field[] declaredFields = userClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(declaredField);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;*************获取公有字段**并调用***********************************&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name1</span> <span class="operator">=</span> userClass.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name1);</span><br><span class="line">        <span class="comment">//获取一个对象 类似于 User user =  new User();</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> userClass.getConstructor().newInstance();</span><br><span class="line">        name1.set(o, <span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        <span class="comment">//验证</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> (User)o;</span><br><span class="line">        System.out.println(<span class="string">&quot;验证姓名：&quot;</span> + user1.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;**************获取私有字段****并调用********************************&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">phoneNum1</span> <span class="operator">=</span> userClass.getDeclaredField(<span class="string">&quot;phoneNum&quot;</span>);</span><br><span class="line">        System.out.println(phoneNum1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> userClass.getConstructor().newInstance();</span><br><span class="line">        phoneNum1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        phoneNum1.set(o1, <span class="string">&quot;15234324237&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) o1;</span><br><span class="line">        System.out.println(<span class="string">&quot;验证私有字段手机号&quot;</span>+user2.phoneNum);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">************获取所有公有的字段********************</span><br><span class="line">public java.lang.String com.dto.User.name</span><br><span class="line">************获取所有的字段(包括私有、受保护、默认的)********************</span><br><span class="line">public java.lang.String com.dto.User.name</span><br><span class="line">protected int com.dto.User.age</span><br><span class="line">char com.dto.User.sex</span><br><span class="line">private java.lang.String com.dto.User.phoneNum</span><br><span class="line">*************获取公有字段**并调用***********************************</span><br><span class="line">public java.lang.String com.dto.User.name</span><br><span class="line">验证姓名：李白</span><br><span class="line">**************获取私有字段****并调用********************************</span><br><span class="line">private java.lang.String com.dto.User.phoneNum</span><br><span class="line">验证私有字段手机号15234324237</span><br></pre></td></tr></table></figure><h5 id="3-3反射成员方法"><a href="#3-3反射成员方法" class="headerlink" title="3.3反射成员方法"></a>3.3反射成员方法</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>getMethods()</td><td>获取所有共有方法</td></tr><tr><td>getDeclaredMethods()</td><td>获取所有私有方法(包括私有、共有、受保护、默认的)</td></tr><tr><td>getMethod()</td><td>示例：aClass.getMethod(“show1”, String.class);获取共有方法</td></tr><tr><td>getDeclaredMethod()</td><td>示例：aClass.getDeclaredMethod(“show4”, Integer.class);获取所有私有方法(包括私有、受保护、默认的)</td></tr><tr><td>Method对象.invoke</td><td>执行当前方法，有返回值</td></tr><tr><td>操作的对象setAccessible(true)</td><td>忽略权限修饰符校验</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MothodDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了：公有的，String参数的show1(): s = &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了：受保护的，无参的show2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了：默认的，无参的show3()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">show4</span><span class="params">(Integer age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了，私有的，并且有返回值的，int参数的show4(): age = &quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.demo.MothodDemo&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***************获取所有的”公有“方法*******************&quot;</span>);</span><br><span class="line">        Method[] methods = aClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;***************获取所有的方法，包括私有的*******************&quot;</span>);</span><br><span class="line">        Method[] declaredMethods = aClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(declaredMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;***************获取公有方法并调用*******************&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">show1</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;show1&quot;</span>, String.class);</span><br><span class="line">        System.out.println(show1);</span><br><span class="line">        <span class="type">MothodDemo</span> <span class="variable">mothodDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MothodDemo</span>();</span><br><span class="line">        show1.invoke(mothodDemo, <span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***************获取私有的show4()方法******************&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">show3</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;show4&quot;</span>, Integer.class);</span><br><span class="line">        show3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.getConstructor().newInstance();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> show3.invoke(o, <span class="number">25</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;返回值：&quot;</span> + invoke);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">***************获取所有的”公有“方法*******************</span><br><span class="line">public void com.demo.MothodDemo.show1(java.lang.String)</span><br><span class="line">public static void com.demo.MothodDemo.main(java.lang.String[]) throws java.lang.Exception</span><br><span class="line">public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class="line">public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class="line">public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class="line">public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class="line">public java.lang.String java.lang.Object.toString()</span><br><span class="line">public native int java.lang.Object.hashCode()</span><br><span class="line">public final native java.lang.Class java.lang.Object.getClass()</span><br><span class="line">public final native void java.lang.Object.notify()</span><br><span class="line">public final native void java.lang.Object.notifyAll()</span><br><span class="line">***************获取所有的方法，包括私有的*******************</span><br><span class="line">public void com.demo.MothodDemo.show1(java.lang.String)</span><br><span class="line">protected void com.demo.MothodDemo.show2()</span><br><span class="line">void com.demo.MothodDemo.show3()</span><br><span class="line">private java.lang.String com.demo.MothodDemo.show4(java.lang.Integer)</span><br><span class="line">public static void com.demo.MothodDemo.main(java.lang.String[]) throws java.lang.Exception</span><br><span class="line">***************获取公有方法并调用*******************</span><br><span class="line">public void com.demo.MothodDemo.show1(java.lang.String)</span><br><span class="line">调用了：公有的，String参数的show1(): s = 李白</span><br><span class="line">***************获取私有的show4()方法******************</span><br><span class="line">调用了，私有的，并且有返回值的，int参数的show4(): age = 25</span><br><span class="line">返回值：abcd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-4反射main-方法"><a href="#3-4反射main-方法" class="headerlink" title="3.4反射main()方法"></a>3.4反射main()方法</h5><p>其实就是成员反射,但是比较特殊</p><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainMethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MainMethodDemo.main()方法执行了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainMethodDemoTwo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.demo.MainMethodDemo&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">main</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;main&quot;</span>, String[].class);</span><br><span class="line">        main.invoke(<span class="literal">null</span>, (Object) <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p>MainMethodDemo.main()方法执行了。。。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java自定义注解</title>
      <link href="/2023/03/21/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/03/21/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>java自定义注解</p><span id="more"></span><h4 id="一、注解简介"><a href="#一、注解简介" class="headerlink" title="一、注解简介"></a>一、注解简介</h4><p>注解<code>Annontation</code>,java5引入的新特性，位于java.long,annotation中。提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。是一种说明、配置、描述性的信息，与具体业务无关，也不会影响正常的业务逻辑。但我们可以用反射机制来进行校验、赋值等操作。</p><h5 id="自定义注解基础语法"><a href="#自定义注解基础语法" class="headerlink" title="自定义注解基础语法"></a>自定义注解基础语法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名 &#123;定义体&#125;</span><br></pre></td></tr></table></figure><h4 id="二、Annotation提供的元注解"><a href="#二、Annotation提供的元注解" class="headerlink" title="二、Annotation提供的元注解"></a>二、Annotation提供的元注解</h4><p>元注解的作用是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明，java5提供了4个元注解，jdk8加入了<code>Repeatable</code>、<code>Native</code>注解</p><h5 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h5><p><strong>作用：</strong>用于描述注解的使用范围</p><h6 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h6><p>备注：例如@Target(ElementType.METHOD)，标志的注解使用在方法上，但是我们在这个注解标志在类上，就会报错</p><table><thead><tr><th align="left"><strong>Target类型</strong></th><th>描述</th></tr></thead><tbody><tr><td align="left">ElementType.TYPE</td><td>应用于类、接口（包括注解类型）、枚举</td></tr><tr><td align="left">ElementType.FIELD</td><td>应用于属性（包括枚举中的常量）</td></tr><tr><td align="left">ElementType.METHOD</td><td>应用于方法</td></tr><tr><td align="left">ElementType.PARAMETER</td><td>应用于方法的形参</td></tr><tr><td align="left">ElementType.CONSTRUCTOR</td><td>应用于构造函数</td></tr><tr><td align="left">ElementType.LOCAL_VARIABLE</td><td>应用于局部变量</td></tr><tr><td align="left">ElementType.ANNOTATION_TYPE</td><td>应用于注解类型</td></tr><tr><td align="left">ElementType.PACKAGE</td><td>应用于包</td></tr><tr><td align="left">TYPE_PARAMETER</td><td>类型参数声明，JavaSE8引进，可以应用于类的泛型声明之处</td></tr><tr><td align="left">TYPE_USE</td><td>JavaSE8引进，此类型包括类型声明和类型参数声明，是为了方便设计者进行类型检查，例如，如果使用@Target（ElementType.TYPE_USE）对@NonNull进行标记，则类型检查器可以将@NonNull class C {…} C类的所有变量都视为非null</td></tr></tbody></table><h5 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h5><p><strong>作用</strong>：表明注解的生命周期</p><table><thead><tr><th>生命周期类型</th><th>描述</th></tr></thead><tbody><tr><td>RetentionPolicy.SOURCE</td><td>编译时被丢弃，不包含在类文件中</td></tr><tr><td>RetentionPolicy.CLASS</td><td>JVM加载时被丢弃，包含在类文件中，默认值</td></tr><tr><td>RetentionPolicy.RUNTIME</td><td>由JVM 加载，包含在类文件中，在运行时可以被获取到</td></tr></tbody></table><h5 id="Inherited"><a href="#Inherited" class="headerlink" title="Inherited"></a>Inherited</h5><p><strong>作用：</strong>定义该注解和子类的关系，使用此注解声明出来的自定义注解，在使用在类上面时，子类会自动继承此注解，否则，子类不会继承此注解。注意，使用Inherited声明出来的注解，只有在类上使用时才会有效，对方法，属性等其他无效。</p><h5 id="Documented"><a href="#Documented" class="headerlink" title="Documented"></a><strong>Documented</strong></h5><p><strong>作用</strong>：表明该注解标记的元素可以被Javadoc 或类似的工具文档化</p><h5 id="Repeatable"><a href="#Repeatable" class="headerlink" title="Repeatable"></a>Repeatable</h5><p><strong>作用</strong>：是否可重复注解，jdk1.8引入允许在相同的程序元素中重复注解，在需要对同一种注解多次使用时，往往需要借助 @Repeatable 注解。Java 8 版本以前，同一个程序元素前最多只能有一个相同类型的注解，如果需要在同一个元素前使用多个相同类型的注解，则必须使用注解“容器”</p><h5 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h5><p> <strong>作用：</strong>注解修饰成员变量，则表示这个变量可以被本地代码引用，常常被代码生成工具使用。对于 @Native 注解不常使用，了解即可</p><h4 id="三、注解的使用场景示例"><a href="#三、注解的使用场景示例" class="headerlink" title="三、注解的使用场景示例"></a>三、注解的使用场景示例</h4>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 自定义注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron表达式</title>
      <link href="/2023/03/07/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/03/07/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>cron使用</p><span id="more"></span><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>在使用定时调度任务的时候，我们最常用的，就是<code>cron</code>表达式了。通过<code>cron</code>表达式来指定任务在某个时间点或者周期性的执行。<code>cron</code>表达式配置起来简洁方便，无论是<code>Spring</code>的<code>@Scheduled</code>还是用<code>Quartz</code>框架，都支持cron表达式。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h5><p><code>cron</code>表达式是一个字符串，由6到7位字符组成，前6位是必须的，后面一位是可选的</p><p>从左到右，依次对每个字段指定相应的值，就可以确定一个任务的执行时间点和周期了。值可以由数字配合字符来组合。</p><p><img src="/2023/03/07/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20230307174212571-8182134.png" alt="image-20230307174212571"></p><h5 id="常用的字符"><a href="#常用的字符" class="headerlink" title="常用的字符"></a>常用的字符</h5><h6 id><a href="#" class="headerlink" title="*"></a><code>*</code></h6><p>每的意思，在不同的字符位上，就代表每秒，每分，每小时等。</p><p><code>-</code></p><p>指定值的范围。比如[1-10]，在秒字段里就是每分钟的第1到10秒，在分就是每小时的第1到10分钟，以此类推。</p><p><code>,</code></p><p>指定某几个值。比如[2,4,5]，在秒字段里就是每分钟的第2，第4，第5秒，以此类推。</p><p><code>/</code></p><p>定值的起始和增加幅度。比如[3&#x2F;5]，在秒字段就是每分钟的第3秒开始，每隔5秒生效一次，也就是第3秒、8秒、13秒，以此类推。</p><p><code>?</code></p><p>仅用于【日】和【周】字段。因为在指定某日和周几的时候，这两个值实际上是冲突的，所以需要用【?】标识不生效的字段。比如【0 1 * * * ?】就代表每年每月每日每小时的1分0秒触发任务。这里的周就没有效果了</p><p><code>SUN</code></p><p>仅用于【周】字段，表示星期日。也可以用数字1设置。周日到周六分别为SUN，MON，TUE，WED，THU，FRI和SAT，对应数字1，2，3，4，5，6，7。目前Quartz支持。</p><p><code>L</code></p><p>即last，用于【日】【周】字段。这里需要注意的是，在不同的字段的不同使用方式，其含义有所差别。</p><p><strong>用于日字段</strong>：直接使用L代表每个月的最后一天。也支持偏移量的方式，配置[L-1]则代表每月的倒数第二天。<br><strong>用于周字段</strong>：直接使用L代表每周的最后一天，也就是等效于[7]或[SAT]，但是如果配合上数字，比如[7L]，则代表每个月最后一个周六，等效于[SATL]。目前Quartz支持。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程</title>
      <link href="/2023/02/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/02/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>java多线程入门到进阶</p><span id="more"></span><h4 id="1-多线程相关概念"><a href="#1-多线程相关概念" class="headerlink" title="1.多线程相关概念"></a>1.多线程相关概念</h4><h5 id="1-1进程跟线程"><a href="#1-1进程跟线程" class="headerlink" title="1.1进程跟线程"></a>1.1进程跟线程</h5><p><strong>进程</strong>：可以理解为是正在运行的程序实体个进程中的执行场景&#x2F;执行单元，一个进程中包含多个进程</p><p><strong>线程</strong>：是操作系统能够进行运算调度的最小单位，是完成进程中的最小执行单位</p><h5 id="1-2并行跟并发"><a href="#1-2并行跟并发" class="headerlink" title="1.2并行跟并发"></a>1.2并行跟并发</h5><p><strong>并行</strong>：指同时发生两个并发事件，具有并发的含义。并发不一定并行，也可以说并发事件之间不一定要同一时刻发生。例如redis集群，把事情分给多个人去做，多线程的方式其实就是一种并行</p><p><strong>并发：</strong>又称共行性，是指处理多个同时性活动的能力。类似抢购同一时间会有大量请求到同一个地方</p><h5 id="1-3线程的生命周期"><a href="#1-3线程的生命周期" class="headerlink" title="1.3线程的生命周期"></a>1.3<strong>线程的生命周期</strong></h5><ol><li><p>新建状态（创建线程的时候）</p></li><li><p>就绪状态（未获取到cpu，等待执行）</p></li><li><p>运行状态（获取到cpu执行权，线程执行）</p></li><li><p>阻塞状态（线程进入阻塞状态，例如是用sleep线程执行暂停）</p></li><li><p>死亡状态（释放cpu线程结束）</p></li></ol><h4 id="2-java实现多线程"><a href="#2-java实现多线程" class="headerlink" title="2.java实现多线程"></a>2.java实现多线程</h4><h5 id="2-1继承-java-lang-Thread，重写-run方法"><a href="#2-1继承-java-lang-Thread，重写-run方法" class="headerlink" title="2.1继承 java.lang.Thread，重写 run方法"></a>2.1继承 <code>java.lang.Thread</code>，重写 <code>run方法</code></h5><p>比较简单，通过实例化这个子类，并调用start()方法来启动线程。这种方式的缺点也十分明显，因为java是单继承的，只能继承一个类局限性很大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadNewDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 编写程序，这段程序运行在分支线程中（分支栈）。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分支线程---&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        threadNewDemo1.start();</span><br><span class="line">        threadNewDemo2.start();</span><br><span class="line">        threadNewDemo3.start();</span><br><span class="line">        threadNewDemo4.start();</span><br><span class="line">        threadNewDemo5.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-编写一个类，实现-java-lang-Runnable-接口，实现run方法"><a href="#2-2-编写一个类，实现-java-lang-Runnable-接口，实现run方法" class="headerlink" title="2.2.编写一个类，实现 java.lang.Runnable 接口，实现run方法"></a>2.2.编写一个类，<strong>实现</strong> <strong><code>java.lang.Runnable</code></strong> 接口，实现<code>run方法</code></h5><p>这种方式相比较比继承<code>Thread</code>类的方式更加灵活，这种方式的优点是灵活性高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class RunnableNewDomo implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        // 编写程序，这段程序运行在分支线程中（分支栈）。</span><br><span class="line">        for(int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">            System.out.println(&quot;分支线程---&gt;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Thread thread1 = new Thread(new RunnableNewDomo());</span><br><span class="line">        Thread thread2 = new Thread(new RunnableNewDomo());</span><br><span class="line">        Thread thread3 = new Thread(new RunnableNewDomo());</span><br><span class="line">        Thread thread4 = new Thread(new RunnableNewDomo());</span><br><span class="line">        Thread thread5 = new Thread(new RunnableNewDomo());</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">        thread4.start();</span><br><span class="line">        thread5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-还有一种是实现Callable接口"><a href="#2-3-还有一种是实现Callable接口" class="headerlink" title="2.3.还有一种是实现Callable接口"></a>2.3.还有一种是实现<code>Callable</code>接口</h5><p>是在java1.5以后才加入的，这种方式与第二种方式类似，不同之处在于实现的是Callable接口而不是Runnable接口。Callable接口的call()方法可以返回一个结果，并且可以抛出异常。你可以使用ExecutorService来执行并返回一个Future对象，该对象可以用来获取任务的结果。这种方式的主要优点是可以返回结果和抛出异常，但它也需要你更多的代码来实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class CallableNewDomo implements Callable&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String call() throws RuntimeException &#123;</span><br><span class="line">        // 编写程序，这段程序运行在分支线程中（分支栈）。</span><br><span class="line">        for(int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">            System.out.println(&quot;分支线程---&gt;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;线程执行完成定义的返回值&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        //启动方式1FutureTask</span><br><span class="line">        CallableNewDomo callableNewDomo = new CallableNewDomo();</span><br><span class="line">        FutureTask task = new FutureTask(callableNewDomo);</span><br><span class="line">        Thread thread = new Thread(task);</span><br><span class="line">        thread.start();</span><br><span class="line">        task.get();</span><br><span class="line">        //借助线程池启动</span><br><span class="line">        CallableNewDomo callableNewDomo1 = new CallableNewDomo();</span><br><span class="line">        ExecutorService executor = Executors.newSingleThreadExecutor();</span><br><span class="line">        Future&lt;String&gt; submit = executor.submit(callableNewDomo1);</span><br><span class="line">        submit.get();</span><br><span class="line">        executor.shutdownNow();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-线程常用的方法"><a href="#3-线程常用的方法" class="headerlink" title="3.线程常用的方法"></a>3.线程常用的方法</h4><h5 id="3-1线程名称操作"><a href="#3-1线程名称操作" class="headerlink" title="3.1线程名称操作"></a>3.1线程名称操作</h5><h6 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread()"></a>currentThread()</h6><p>获取当前线程对象</p><h6 id="getName"><a href="#getName" class="headerlink" title="getName()"></a>getName()</h6><p>获取线程对象名字</p><h6 id="setName-String-name"><a href="#setName-String-name" class="headerlink" title="setName(String name)"></a>setName(String name)</h6><p>修改线程对象名字(当没有设置名称的时候名字为：Thread-0，Thread-2…..类推)</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadNewDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(currentThread());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        threadNewDemo1.start();</span><br><span class="line">        threadNewDemo2.start();</span><br><span class="line">        threadNewDemo2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        System.out.println(threadNewDemo1.getName());</span><br><span class="line">        System.out.println(threadNewDemo2.getName());</span><br><span class="line">        System.out.println(currentThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2023/02/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230308194229567.png" alt="image-20230308194229567"></p><h5 id="3-2sleep-方法使用"><a href="#3-2sleep-方法使用" class="headerlink" title="3.2sleep()方法使用"></a>3.2sleep()方法使用</h5><p>静态方法，让当前线程放弃占有的CPU资源进入休眠，进入阻塞状态。</p><h5 id="3-3stop-线程终止"><a href="#3-3stop-线程终止" class="headerlink" title="3.3stop()线程终止"></a>3.3stop()线程终止</h5><p><font color="red">注：已过期不建议使用，会有丢失数据的问题</font></p><p>那么怎么合理终止一个线程呢</p><p>例：可以定义一个开关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadNewDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Boolean</span> <span class="variable">flg</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flg) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前运行线程为：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; - 运行&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;暂停&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        threadNewDemo1.setName(<span class="string">&quot;花木兰&quot;</span>);</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        threadNewDemo2.setName(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        threadNewDemo1.start();</span><br><span class="line">        threadNewDemo2.start();</span><br><span class="line">        <span class="comment">//让线程跑2秒</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//暂停他</span></span><br><span class="line">        flg = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4线程优先级"><a href="#3-4线程优先级" class="headerlink" title="3.4线程优先级"></a>3.4线程优先级</h5><p>main线程的默认优先级是：<strong>5</strong><br>优先级较高的，只是抢到的<strong>CPU时间片</strong>相对多一些。大概率方向更偏向于优先级比较高的。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadNewDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Boolean</span> <span class="variable">flg</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flg) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前运行线程为：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; - 运行&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;暂停&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        threadNewDemo1.setName(<span class="string">&quot;花木兰&quot;</span>);</span><br><span class="line">        threadNewDemo1.setPriority(<span class="number">1</span>);</span><br><span class="line">        <span class="type">ThreadNewDemo</span> <span class="variable">threadNewDemo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadNewDemo</span>();</span><br><span class="line">        threadNewDemo2.setName(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        threadNewDemo2.setPriority(<span class="number">10</span>);</span><br><span class="line">        threadNewDemo1.start();</span><br><span class="line">        threadNewDemo2.start();</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//暂停他</span></span><br><span class="line">        flg = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230308203237927.png" alt="image-20230308203237927"></p><h5 id="3-5线程礼让yield"><a href="#3-5线程礼让yield" class="headerlink" title="3.5线程礼让yield()"></a>3.5线程礼让yield()</h5><p>让位，当前线程暂停，回到就绪状态，让给其它线程。只是放弃当前cpu权，并不是每次都让成功的，有可能它又抢到时间片了。</p><h5 id="3-6线程加入join"><a href="#3-6线程加入join" class="headerlink" title="3.6线程加入join()"></a>3.6线程加入join()</h5><p>一个线程.join()，当前线程会进入”**<code>阻塞状态</code>**“。等待加入线程执行完！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest13</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main begin&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable7</span>());</span><br><span class="line">        t.setName(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">//合并线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.join(); <span class="comment">// t合并到当前线程中，当前线程受阻塞，t线程执行直到结束。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable7</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-7守护线程Daemon"><a href="#3-7守护线程Daemon" class="headerlink" title="3.7守护线程Daemon()"></a>3.7守护线程Daemon()</h5><p><code>Daemon</code>默认是false用户线程，手动设置为true以后就是守护线程，会等待所有的线程执行完再停止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试守护线程</span></span><br><span class="line"><span class="comment"> * 上帝守护你</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo23_DaemonThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">God</span> <span class="variable">god</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(god);</span><br><span class="line">        <span class="comment">//默认false表示是用户线程,正常的线程都是用户线程...</span></span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//上帝守护线程启动</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">//你 用户线程启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(you).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑着你&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你一生都开心的活着&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;====goodbye!world====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-线程安全"><a href="#4-线程安全" class="headerlink" title="4.线程安全"></a>4.线程安全</h4><p>线程安全是什么，由于多个进程共享同一块存储空间，但是数据不同步，产生的数据安全问题</p><p>示例：抢票问题，由于多个线程之前数据不同步造成的超卖问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyTicket</span> <span class="variable">buyTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyTicket</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;张三&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;李四&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;王五&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//买票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//延迟</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到&quot;</span> + ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="/2023/02/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230308213153672-8282315.png" alt="image-20230308213153672"></p><h5 id="4-1解决方式一synchronized同步代码块"><a href="#4-1解决方式一synchronized同步代码块" class="headerlink" title="4.1解决方式一synchronized同步代码块"></a>4.1解决方式一synchronized同步代码块</h5><p>synchronized是Java中的关键字，被Java原生支持，是一种最基本的同步锁,Synchronized 方法控制对对象的访问，每个对象对应一把锁，每个 synchronized 方法都必须获取调用方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到方法返回才释放锁，后面被阻塞的线程才能获得锁，继续执行；<br><code>synchronized 修饰的方法只能一个对象调用完之后，另一个对象才能调用。锁的是调用该方法的对象。默认锁的this</code></p><p>它修饰的对象有以下几种： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 　　1. 修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号&#123;&#125;括起来的代码，作用的对象是调用这个代码块的对象。</span><br><span class="line"> 　　2. 修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象。</span><br><span class="line"> 　　3. 修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。</span><br><span class="line"> 　</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (a.class) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (str) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>卖票问题解决</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//买票</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//判断是否有票</span></span><br><span class="line">       <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">           flag = <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//延迟</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">1</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//买票</span></span><br><span class="line">       System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到&quot;</span> + ticketNums--);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="4-2线程不安全的集合"><a href="#4-2线程不安全的集合" class="headerlink" title="4.2线程不安全的集合"></a>4.2线程不安全的集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo26_UnsafeList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次运行输出结果ArrayList是线程不安全的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10000</span><br><span class="line">99996</span><br><span class="line">10002</span><br></pre></td></tr></table></figure><p><strong>CopyOnWriteArrayList线程安全的集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo26_UnsafeList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待三秒让线程跑完</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-死锁"><a href="#5-死锁" class="headerlink" title="5.死锁"></a>5.死锁</h4><h5 id="5-1死锁产生的原因"><a href="#5-1死锁产生的原因" class="headerlink" title="5.1死锁产生的原因"></a>5.1死锁产生的原因</h5><p>死锁是由于两个或以上的线程互相持有对方需要的资源，导致这些线程处于等待状态，无法执行。</p><h5 id="5-2示例"><a href="#5-2示例" class="headerlink" title="5.2示例"></a>5.2示例</h5><p>两个Makeup对象分别先后获取口号或镜子一种资源后，加锁锁定资源，休眠1秒后然后再去获得下一个资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo31</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Makeup</span> <span class="variable">makeup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Makeup</span>(<span class="number">0</span>, <span class="string">&quot;灰姑娘&quot;</span>);</span><br><span class="line">        <span class="type">Makeup</span> <span class="variable">makeup1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Makeup</span>(<span class="number">1</span>, <span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line">        makeup.start();</span><br><span class="line">        makeup1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lipstick</span> &#123; &#125;</span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mirror</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Makeup</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//需要的资源只有一份,用static保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lipstick</span> <span class="variable">lipstick</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lipstick</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Mirror</span> <span class="variable">mirror</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mirror</span>();</span><br><span class="line">    <span class="type">int</span> choice;<span class="comment">//选择</span></span><br><span class="line">    String girlName;<span class="comment">//使用化妆品的人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Makeup</span><span class="params">(<span class="type">int</span> choice, String girlName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.choice = choice;</span><br><span class="line">        <span class="built_in">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;<span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (mirror) &#123;<span class="comment">//一秒钟后想获得镜子</span></span><br><span class="line">                    System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;<span class="comment">//获得口红镜子</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick) &#123;<span class="comment">//二秒钟后想获得的锁</span></span><br><span class="line">                    System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="/2023/02/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230309144934319-8344575.png" alt="image-20230309144934319"></p><p>可以发现项目还是在运行状态的，白雪公主获得镜子并加锁，去获取口红，但是口红被灰姑娘获取后锁定，灰姑娘再去获取镜子，两个对象互不释放，也不停止，这个时候就产生了死锁</p><h5 id="5-3产生死锁的四个必要条件"><a href="#5-3产生死锁的四个必要条件" class="headerlink" title="5.3产生死锁的四个必要条件"></a>5.3产生死锁的四个必要条件</h5><p>死锁产生的四个必要条件，只要能打破一个就能打破死锁</p><p>一、互斥条件：一个资源只能被一个进程使用。</p><p>二、请求与保持条件：一个进程因请求资源阻塞时候，对已获取的资源保持不放。</p><p>三、不可剥夺条件：对已获得的资源，在未使用完之前，不可剥夺。</p><p>四、循环等待条件：发生死锁时，线程进入死循环，永久阻塞。</p><h5 id="6-Lock（锁）"><a href="#6-Lock（锁）" class="headerlink" title="6.Lock（锁）"></a>6.Lock（锁）</h5><p>Lock是一种显示的锁，可以手动开启跟关闭，<code>ReentrantLock</code>事Lock的一个实现类,最常用</p><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试Lock锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo32_ThreadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestLock</span> <span class="variable">testLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestLock</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tickerNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//定义Lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (tickerNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(tickerNums--);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-线程通讯问题"><a href="#7-线程通讯问题" class="headerlink" title="7.线程通讯问题"></a>7.线程通讯问题</h4><h5 id="7-1场景描述"><a href="#7-1场景描述" class="headerlink" title="7.1场景描述"></a><strong>7.1场景描述</strong></h5><p>生产者：Production.class   消费者：Consumer.class   仓库：Container.class</p><p>生产者生产完商品放入仓库</p><p>仓库满10件打包好让消费者取走，怎么在仓库放满以后通知消费者消费呢 </p><h5 id="7-2java提供的api"><a href="#7-2java提供的api" class="headerlink" title="7.2java提供的api"></a>7.2java提供的api</h5><p>线程通讯的api为Object类提供，都只能在同步方法或者是同步类中使用，否则会抛出异常</p><h6 id="wait-wait-long-time"><a href="#wait-wait-long-time" class="headerlink" title="wait()|wait(long time)"></a>wait()|wait(long time)</h6><p>表示线程进入等待，与sleep不同的是，会释放锁  </p><h6 id="notify-notifyAll"><a href="#notify-notifyAll" class="headerlink" title="notify()|notifyAll()"></a>notify()|notifyAll()</h6><p>唤醒一个或者多个正在等待的线程，优先级多的会优先调度</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试:生产者消费者模型--&gt;利用缓冲区解决:管程法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo33_ThreadPC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynContainer</span> <span class="variable">synContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Producer</span>(synContainer).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(synContainer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//容缓冲区</span></span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> <span class="title class_">Product</span>(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span> + i + <span class="string">&quot;件产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//容缓冲区</span></span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了--&gt;&quot;</span> + container.pop().id + <span class="string">&quot;件产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;<span class="comment">//产品编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span> &#123;</span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Product[] products = <span class="keyword">new</span> <span class="title class_">Product</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        <span class="comment">//如果容器满了,需要等待消费者消费</span></span><br><span class="line">        <span class="comment">/*如果是if的话，假如消费者1消费了最后一个，这是index变成0此时释放锁被消费者2拿到而不是生产者拿到，这时消费者的wait是在if里所以它就直接去消费index-1下标越界，如果是while就会再去判断一下index得值是不是变成0了*/</span></span><br><span class="line">        <span class="keyword">while</span> (count == products.length) &#123;</span><br><span class="line">            <span class="comment">//通知消费者消费,等待生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有满,需要丢入产品</span></span><br><span class="line">        products[count] = product;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//通知消费者消费</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Product <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否能消费</span></span><br><span class="line">        <span class="keyword">while</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//等待生产者生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> products[count];</span><br><span class="line">        <span class="comment">//吃完了 通知生产者生产</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-线程池ThreadPoolExecutor"><a href="#8-线程池ThreadPoolExecutor" class="headerlink" title="8.线程池ThreadPoolExecutor"></a>8.线程池<strong>ThreadPoolExecutor</strong></h4><h5 id="8-1为什么要使用线程池"><a href="#8-1为什么要使用线程池" class="headerlink" title="8.1为什么要使用线程池"></a>8.1为什么要使用线程池</h5><p>其实主要作用就是统一管理线程，统一开启关闭,</p><ul><li>降低资源的消耗</li><li>提高响应的速度</li><li>方便管理、</li></ul><h5 id="8-2ThreadPoolExecutor源码"><a href="#8-2ThreadPoolExecutor源码" class="headerlink" title="8.2ThreadPoolExecutor源码"></a>8.2ThreadPoolExecutor源码</h5><p><strong>参数最多的构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                              TimeUnit unit,</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">                <span class="literal">null</span> :</span><br><span class="line">                AccessController.getContext();</span><br><span class="line">        <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="8-3线程池参数"><a href="#8-3线程池参数" class="headerlink" title="8.3线程池参数"></a>8.3线程池参数</h5><p><strong>corePoolSize</strong>(必须)：</p><p>核心线程数。默认情况下，核心线程会一直存活，但是当将 <strong>allowCoreThreadTimeout</strong> 设置为 true 时，核心线程也会超时回收。</p><p><strong>maximumPoolSize</strong>（必需）：</p><p>线程池所能容纳的最大线程数。当活跃线程数达到该数值后，后续的新任务将会阻塞。</p><p><strong>keepAliveTime</strong>（必需）：</p><p>线程闲置超时时长。如果超过该时长，非核心线程就会被回收。如果将 <strong>allowCoreThreadTimeout</strong> 设置为 true 时，核心线程也会超时回收。</p><p><strong>unit</strong>（必需）：</p><p>指定 keepAliveTime 参数的时间单位。常用的有：<strong>TimeUnit.MILLISECONDS</strong>（毫秒）、<strong>TimeUnit.SECONDS</strong>（秒）、<strong>TimeUnit.MINUTES</strong>（分）。</p><p><strong>workQueue</strong>（必需）：</p><p>任务队列。通过线程池的 execute() 方法提交的 Runnable 对象将存储在该参数中。其采用阻塞队列实现。在 Java 中需要实现 <strong>BlockingQueue</strong> 接口。</p><p> Java 提供的 7 种阻塞队列的实现：</p><h6 id="ArrayBlockingQueue："><a href="#ArrayBlockingQueue：" class="headerlink" title="ArrayBlockingQueue："></a>ArrayBlockingQueue：</h6><p>一个由数组结构组成的有界阻塞队列（数组结构可配合指针实现一个环形队列）。</p><h6 id="LinkedBlockingQueue："><a href="#LinkedBlockingQueue：" class="headerlink" title="LinkedBlockingQueue："></a>LinkedBlockingQueue：</h6><p> 一个由链表结构组成的有界阻塞队列，在未指明容量时，容量默认为 Integer.MAX_VALUE。</p><h6 id="PriorityBlockingQueue："><a href="#PriorityBlockingQueue：" class="headerlink" title="PriorityBlockingQueue："></a>PriorityBlockingQueue：</h6><p> 一个支持优先级排序的无界阻塞队列，对元素没有要求，可以实现 Comparable 接口也可以提供 Comparator 来对队列中的元素进行比较。跟时间没有任何关系，仅仅是按照优先级取任务。</p><h6 id="DelayQueue："><a href="#DelayQueue：" class="headerlink" title="DelayQueue："></a>DelayQueue：</h6><p>类似于PriorityBlockingQueue，是二叉堆实现的无界优先级阻塞队列。要求元素都实现 Delayed 接口，通过执行时延从队列中提取任务，时间没到任务取不出来。</p><h6 id="SynchronousQueue："><a href="#SynchronousQueue：" class="headerlink" title="SynchronousQueue："></a>SynchronousQueue：</h6><p> 一个不存储元素的阻塞队列，消费者线程调用 take() 方法的时候就会发生阻塞，直到有一个生产者线程生产了一个元素，消费者线程就可以拿到这个元素并返回；生产者线程调用 put() 方法的时候也会发生阻塞，直到有一个消费者线程消费了一个元素，生产者才会返回。</p><h6 id="LinkedBlockingDeque："><a href="#LinkedBlockingDeque：" class="headerlink" title="LinkedBlockingDeque："></a>LinkedBlockingDeque：</h6><p> 使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样 FIFO（先进先出），也可以像栈一样 FILO（先进后出）。</p><h6 id="LinkedTransferQueue："><a href="#LinkedTransferQueue：" class="headerlink" title="LinkedTransferQueue："></a>LinkedTransferQueue：</h6><p> 它是ConcurrentLinkedQueue、LinkedBlockingQueue 和 SynchronousQueue 的结合体，但是把它用在 ThreadPoolExecutor 中，和 LinkedBlockingQueue 行为一致，但是是无界的阻塞队列。</p><p><strong>threadFactory</strong>（可选）：</p><p>线程工厂。用于指定为线程池创建新线程的方式。在 Java 中需要实现 <strong>BlockingQueue</strong> 接口。但 Java 已经为我们提供了 7 种阻塞队列的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default thread factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">poolNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"> </span><br><span class="line">    DefaultThreadFactory() &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="literal">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                              Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">&quot;pool-&quot;</span> +</span><br><span class="line">                      poolNumber.getAndIncrement() +</span><br><span class="line">                     <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, r,</span><br><span class="line">                              namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                              <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">            t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>handler</strong>（可选）：</p><p>拒绝策略。当达到最大线程数时需要执行的饱和策略。拒绝策略需要实现 RejectedExecutionHandler 接口，并实现 rejectedExecution(Runnable r, ThreadPoolExecutor executor) 方法。不过 Executors 框架已经为我们实现了 4 种拒绝策略：</p><h6 id="AbortPolicy（默认）："><a href="#AbortPolicy（默认）：" class="headerlink" title="AbortPolicy（默认）："></a><strong>AbortPolicy（默认）：</strong></h6><p>丢弃任务并抛出 RejectedExecutionException 异常。</p><h6 id="CallerRunsPolicy："><a href="#CallerRunsPolicy：" class="headerlink" title="CallerRunsPolicy："></a><strong>CallerRunsPolicy：</strong></h6><p>由调用线程处理该任务。</p><h6 id="DiscardPolicy："><a href="#DiscardPolicy：" class="headerlink" title="DiscardPolicy："></a><strong>DiscardPolicy：</strong></h6><p>丢弃任务，但是不抛出异常。可以配合这种模式进行自定义的处理方式。</p><h6 id="DiscardOldestPolicy："><a href="#DiscardOldestPolicy：" class="headerlink" title="DiscardOldestPolicy："></a>DiscardOldestPolicy：</h6><p>丢弃队列最早的未处理任务，然后重新尝试执行任务。</p><hr><p>版权声明：本文为CSDN博主「孙强 Jimmy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u013541140/article/details/95225769">https://blog.csdn.net/u013541140/article/details/95225769</a></p><h5 id="8-4线程池创建示例"><a href="#8-4线程池创建示例" class="headerlink" title="8.4线程池创建示例"></a>8.4线程池创建示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            <span class="number">20</span>,</span><br><span class="line">            <span class="number">1000</span>,</span><br><span class="line">            TimeUnit.MICROSECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">100</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程图</p><p><img src="/2023/02/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230320114310157.png" alt="image-20230320114310157"></p><h4 id="9-java封装好的功能线程池"><a href="#9-java封装好的功能线程池" class="headerlink" title="9.java封装好的功能线程池"></a>9.java封装好的功能线程池</h4><h5 id="定长线程池"><a href="#定长线程池" class="headerlink" title="定长线程池"></a>定长线程池</h5><p><strong>特点</strong>：只有核心线程数，执行完立即回收，任务队列胃链表结构的有界队列。</p><p>应用场景：控制最大并发数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dede</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="type">Dede</span> <span class="variable">dede</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dede</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dede);</span><br><span class="line">        thread.start();</span><br><span class="line">        executorService.submit(thread);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定时线程池"><a href="#定时线程池" class="headerlink" title="定时线程池"></a>定时线程池</h5><p><strong>特点</strong>：核心线程数固定，非核心线程数量无限，执行完闲置任务回收，任务队列胃延时阻塞队列</p><p>应用场景：需要周期性的执行任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dede</span> <span class="variable">dede</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dede</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dede);</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 延迟1s后执行任务</span></span><br><span class="line">        service.schedule(thread, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 延迟10ms后、每隔1000ms执行任务</span></span><br><span class="line">        service.scheduleAtFixedRate(thread,<span class="number">10</span>,<span class="number">1000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="可缓存线程池"><a href="#可缓存线程池" class="headerlink" title="可缓存线程池"></a>可缓存线程池</h5><p>特点：无核心线程，非核心线程数量无限，执行完闲置60s后回收，任务队列为不储存元素的阻塞队列</p><p>应用场景：大量任务，耗时少的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dede</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dede</span> <span class="variable">dede</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dede</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dede);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单线程化线程池"><a href="#单线程化线程池" class="headerlink" title="单线程化线程池"></a>单线程化线程池</h5><p>特点：只有一个核心线程，无非核心线程，执行完立即回收，任务队列为链表的有界队列。</p><p>应用场景：不适合并发但可能引起 IO 阻塞性及影响 UI 线程响应的操作，如数据库操作、文件操作等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Dede dede = new Dede();</span><br><span class="line">        Thread thread = new Thread(dede);</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">        executorService.execute(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="9-2使用java预编线程池劣势"><a href="#9-2使用java预编线程池劣势" class="headerlink" title="9.2使用java预编线程池劣势"></a>9.2使用java预编线程池劣势</h5><p>Executors 的 4 个功能线程池虽然方便，但现在已经不建议使用了，而是建议直接通过使用 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p><strong>FixedThreadPool （定长线程池）和 SingleThreadExecutor（单例线程池）：主要问题是堆积的请求处理队列均采用 LinkedBlockingQueue，可能会耗费非常大的内存，甚至 OOM。</strong><br><strong>CachedThreadPool 和 ScheduledThreadPool：主要问题是线程数最大数是 Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至 OOM。</strong></p><h5 id="线程池相关补充："><a href="#线程池相关补充：" class="headerlink" title="线程池相关补充："></a>线程池相关补充：</h5><p><code>execute()</code> vs <code>submit()</code>的区别</p><p>execute()方法 适合用于不需要返回值的任务</p><p>submit()方法 适用于需要返回值的任务，线程池会返回一个<code>Future</code>类型的对象，通过这个对象可以看返回是否成功</p><h4 id="10-JUC"><a href="#10-JUC" class="headerlink" title="10.JUC"></a>10.JUC</h4><h5 id="10-1JUC是什么"><a href="#10-1JUC是什么" class="headerlink" title="10.1JUC是什么"></a>10.1JUC是什么</h5><p>JUC是java.util.concurrent包的简称，在jdk5添加，是为了更好的支持高并发任务的一些工具</p><h5 id="10-2线程通信"><a href="#10-2线程通信" class="headerlink" title="10.2线程通信"></a>10.2线程通信</h5><p>在原有的基础上支持了精准唤醒</p><p>Condition:信号</p><p>condition.signal()唤醒当前Condition</p><p>condition.await();当前线程挂起</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// A英特尔 C主厂商 B组装厂 A生产一个cpu通知C生产一个主板 当有一个主板一个cpu时候 组装厂完成组装</span></span><br><span class="line">        <span class="type">Data1</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data1</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.addCpu();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    data.addMbd();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    data.d();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">cpuNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">mbdNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">addCpu</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (cpuNumber != <span class="number">0</span>) &#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            cpuNumber++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;生产了一件CPU剩余&quot;</span> + cpuNumber);</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">addMbd</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (mbdNumber != <span class="number">0</span>) &#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            mbdNumber++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;生产了一件主板剩余&quot;</span> + mbdNumber);</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">d</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (cpuNumber == <span class="number">0</span> || mbdNumber == <span class="number">0</span>) &#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            cpuNumber--;</span><br><span class="line">            mbdNumber--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;组装一台主机====剩余cpu 主板&quot;</span> + cpuNumber + mbdNumber);</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程安全集合"><a href="#线程安全集合" class="headerlink" title="线程安全集合"></a>线程安全集合</h5><h6 id="线程安全的List-CopyOnWriteArrayList"><a href="#线程安全的List-CopyOnWriteArrayList" class="headerlink" title="线程安全的List**CopyOnWriteArrayList**"></a>线程安全的List**<code>CopyOnWriteArrayList</code>**</h6><p><code>CopyOnWriteArrayList</code> 和 <code>Vector</code> 是两种线程安全的 List 实现，但它们有一些关键的区别。</p><ol><li><strong>线程安全机制：</strong><ul><li><strong><code>CopyOnWriteArrayList</code>：</strong> 使用写时复制（Copy-On-Write）策略，即在对容器进行修改时，不直接修改原始数据，而是复制一份数据副本进行修改，完成后再将引用指向新的数据副本。这样可以保证读取操作的线程不受写入操作的影响，从而实现读写并发。</li><li><strong><code>Vector</code>：</strong> 使用传统的同步方法，通过在每个方法上使用 <code>synchronized</code> 关键字来保证线程安全。这意味着在进行修改操作时，整个对象被锁住，可能导致并发性能下降。</li></ul></li><li><strong>性能：</strong><ul><li><strong><code>CopyOnWriteArrayList</code>：</strong> 适用于读多写少的场景，因为写操作会导致数据的复制，可能在并发写入较频繁的情况下产生较高的开销。</li><li><strong><code>Vector</code>：</strong> 性能相对较低，因为在进行任何修改操作时都需要获取对象级别的锁，可能导致较高的竞争和等待。</li></ul></li></ol><h6 id="线程安全的setCopyOnWriteArraySet"><a href="#线程安全的setCopyOnWriteArraySet" class="headerlink" title="线程安全的setCopyOnWriteArraySet"></a>线程安全的set<code>CopyOnWriteArraySet</code></h6><p>与list同理</p><h6 id="线程安全的mapConcurrentHashMap"><a href="#线程安全的mapConcurrentHashMap" class="headerlink" title="线程安全的mapConcurrentHashMap"></a>线程安全的map<code>ConcurrentHashMap</code></h6><ol><li><strong>同步策略：</strong><ul><li><strong><code>ConcurrentHashMap</code>：</strong> 使用分段锁（Segment）来实现并发控制。不同的段可以独立进行读写操作，从而提高并发性。多个线程可以同时读取，写入操作也可以并行进行，只有在对同一个段进行读写时才需要进行同步。</li><li><strong><code>Hashtable</code>：</strong> 使用单一锁来对整个数据结构进行同步。这意味着一次只有一个线程可以对 <code>Hashtable</code> 进行读写操作，这可能导致性能瓶颈，尤其是在高并发的情况下。</li></ul></li><li><strong>性能：</strong><ul><li><strong><code>ConcurrentHashMap</code>：</strong> 在读取和写入操作上相对高效，尤其在高并发环境下。每个段的锁可以独立操作，从而提高并发性。</li><li><strong><code>Hashtable</code>：</strong> 在写入操作上需要进行整个数据结构的同步，可能导致性能瓶颈，特别是在高并发环境下。</li></ul></li></ol><h5 id="常用的辅助类"><a href="#常用的辅助类" class="headerlink" title="常用的辅助类"></a>常用的辅助类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//CountDownLatch</span></span><br><span class="line">        System.out.println(<span class="string">&quot;一天只能打豆豆六次&quot;</span>);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;, <span class="string">&quot;打豆豆&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;已经结束了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CyclicBarrier</span></span><br><span class="line">        System.out.println(<span class="string">&quot;一天要吃三顿饭&quot;</span>);</span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃一顿饭&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        cyclicBarrier.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;吃完了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Semaphore</span></span><br><span class="line">        System.out.println(<span class="string">&quot;只能有两个人玩switch马里奥惊奇&quot;</span>);</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>);</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;田七&quot;</span>, <span class="string">&quot;郭八&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name : list) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;玩上了switch&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, name).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="读写锁ReadWriteLock"><a href="#读写锁ReadWriteLock" class="headerlink" title="读写锁ReadWriteLock"></a>读写锁ReadWriteLock</h5><p>读锁可以共享，写锁为普通的互斥锁</p><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SharedResource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readData</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行读取操作</span></span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeData</span><span class="params">(<span class="type">int</span> newData)</span> &#123;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行写入操作</span></span><br><span class="line">            data = newData;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SharedResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SharedResource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多个线程读取数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> resource.readData();</span><br><span class="line">                System.out.println(<span class="string">&quot;Read data: &quot;</span> + value);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一个线程写入数据</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            resource.writeData(<span class="number">42</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Write data: 42&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h5><p>BlockingQueue（阻塞队列）接口继承了Queue接口。</p><p>常用实现类：</p><p>ArrayBlockingQueue LinkedBlockingQueue SynchronousQueue(同步队列！！！只能放一个数据，一放一出)</p><p><img src="/2023/02/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20231215173400759.png" alt="image-20231215173400759"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql视图</title>
      <link href="/2022/12/07/mysql%E8%A7%86%E5%9B%BE/"/>
      <url>/2022/12/07/mysql%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>MySQL视图使用</p><span id="more"></span><h4 id="mysql视图介绍"><a href="#mysql视图介绍" class="headerlink" title="mysql视图介绍"></a>mysql视图介绍</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>1.mysql视图（view）是一种虚拟存在的表。同真实的表一样，可以增删改查,跟普通表连接查询等操作，可以当作普通表来使用</p><p>2.视图中并不存放数据，只记录了定义视图的查询语句</p><p>3.视图中的数据依赖于真实表数据，数据结构发生变化，你需要更改视图的查询语句</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="demo示例表"><a href="#demo示例表" class="headerlink" title="demo示例表"></a>demo示例表</h5><p><strong>user:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `demo`.`user` (`id`, `name`) VALUES (1, &#x27;路遥&#x27;);</span><br><span class="line">INSERT INTO `demo`.`user` (`id`, `name`) VALUES (2, &#x27;刘慈欣&#x27;);</span><br></pre></td></tr></table></figure><p><strong>book:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `book` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `book_name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `user_id` int DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `demo`.`book` (`id`, `book_name`, `user_id`) VALUES (1, &#x27;平凡的世界&#x27;, 1);</span><br><span class="line">INSERT INTO `demo`.`book` (`id`, `book_name`, `user_id`) VALUES (2, &#x27;三体&#x27;, 2);</span><br><span class="line">INSERT INTO `demo`.`book` (`id`, `book_name`, `user_id`) VALUES (3, &#x27;人生&#x27;, 1);</span><br></pre></td></tr></table></figure><h5 id="视图创建"><a href="#视图创建" class="headerlink" title="视图创建"></a>视图创建</h5><p><strong>语法：</strong></p><p>CREATE VIEW &lt;视图名&gt; AS &lt;SELECT语句&gt;</p><p>CREATE VIEW &lt;视图名&gt; （可以规定返回的字段，UNION查询时候） AS &lt;SELECT语句&gt;</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW user_book AS SELECT</span><br><span class="line">t1.id,</span><br><span class="line">t1.`name`,</span><br><span class="line">GROUP_CONCAT( t2.book_name ) AS books </span><br><span class="line">FROM</span><br><span class="line">`user` t1</span><br><span class="line">LEFT JOIN book t2 ON t1.id = t2.user_id </span><br><span class="line">GROUP BY</span><br><span class="line">t1.id,</span><br><span class="line">t1.`name`</span><br></pre></td></tr></table></figure><p><strong>执行效果</strong>：</p><p>类似一张新建的表，表中数据为你创建视图时候查询语句的返回值</p><p><img src="/2022/12/07/mysql%E8%A7%86%E5%9B%BE/image-20221207155802090-0399885.png" alt="image-20221207155802090"></p><h5 id="视图查询"><a href="#视图查询" class="headerlink" title="视图查询"></a>视图查询</h5><h6 id="查询视图数据"><a href="#查询视图数据" class="headerlink" title="查询视图数据"></a>查询视图数据</h6><p><strong>语法</strong></p><p>与普通表查询一致</p><h6 id="查看视图字段信息"><a href="#查看视图字段信息" class="headerlink" title="查看视图字段信息"></a><strong>查看视图字段信息</strong></h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESCRLBE &lt;视图名称&gt;</span><br></pre></td></tr></table></figure><p>或者简写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC &lt;视图名称&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><p><img src="/2022/12/07/mysql%E8%A7%86%E5%9B%BE/image-20221207160428279.png" alt="image-20221207160428279"></p><h6 id="查看视图定义语句"><a href="#查看视图定义语句" class="headerlink" title="查看视图定义语句"></a>查看视图定义语句</h6><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE VIEW 视图名称</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><p><img src="/2022/12/07/mysql%E8%A7%86%E5%9B%BE/image-20221207161335662.png" alt="image-20221207161335662"></p><h6 id="视图修改"><a href="#视图修改" class="headerlink" title="视图修改"></a>视图修改</h6><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW &lt;视图名&gt; AS &lt;SELECT语句&gt;</span><br></pre></td></tr></table></figure><h6 id="视图删除"><a href="#视图删除" class="headerlink" title="视图删除"></a>视图删除</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW &lt;视图名1&gt; [ , &lt;视图名2&gt; …]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript详解学习</title>
      <link href="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>JavaScript全解</p><span id="more"></span><h4 id="第一章-JavaScript简介"><a href="#第一章-JavaScript简介" class="headerlink" title="第一章 JavaScript简介"></a>第一章 JavaScript简介</h4><p>html，css，js算是接触的最早的语言，但是因为后来工作后前后端分离，各种框架，再加上工作内容都是java后端开发，导致最近想用js作为前端语言搭建自己的一个应用时进度缓慢，所以重新捡一遍，也可以 当作字典，以后查阅</p><h5 id="1-1、JavaScript的起源"><a href="#1-1、JavaScript的起源" class="headerlink" title="1.1、JavaScript的起源"></a>1.1、JavaScript的起源</h5><p>JavaScript诞生于1995年，它的出现主要是用于处理网页中的前端验证。所谓的前端验证，就是指检查用户输入的内容是否符合一定的规则。比如：用户名的长度，密码的长度，邮箱的格式等。</p><p>历史事件发展表：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/34ceed720299546a8161deab88fe16aa.png" alt="image-20201012142902870"></p><h5 id="1-2、JavaScript的组成"><a href="#1-2、JavaScript的组成" class="headerlink" title="1.2、JavaScript的组成"></a>1.2、JavaScript的组成</h5><p>ECMAScript是一个标准，而这个标准需要由各个厂商去实现，不同的浏览器厂商对该标准会有不同的实现。</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/584d9295990909d32b3338dbbbe9c037.png" alt="image-20201012144015831"></p><p>我们已经知道ECMAScript是JavaScript标准，所以一般情况下这两个词我们认为是一个意思。但是实际上JavaScript的含义却要更大一些。一个完整的JavaScript实现应该由以下三个部分构成：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/fafb929ac005ed0e9e2dedb433fe8eab.png" alt="image-20201012144120964"></p><h5 id="1-3、JavaScript的特点很"><a href="#1-3、JavaScript的特点很" class="headerlink" title="1.3、JavaScript的特点很"></a>1.3、JavaScript的特点很</h5><h6 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h6><p>JavaScript是一门解释型语言，所谓解释型值语言是指不需要被编译为机器码在执行，而是直接执行。由于少了编译这一步骤，所以解释型语言开发起来尤为轻松，但是解释型语言运行较慢也是它的劣势。不过解释型语言中使用了JIT技术，使得运行速度得以改善。</p><h6 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h6><p>JavaScript是一门动态语言，所谓的动态语言可以暂时理解为在语言中的一切内容都是不确定的。比如一个变量，这一时刻是个整型，下一时刻可能会变成字符串了。当然这个问题我们以后再谈。不过在补充一句动态语言相比静态语言性能上要差一些，不过由于JavaScript中应用的JIT技术，所以JavaScript可能是运行速度最快的动态语言了。</p><h6 id="类似于-C-和-Java-的语法结构"><a href="#类似于-C-和-Java-的语法结构" class="headerlink" title="类似于 C 和 Java 的语法结构"></a>类似于 C 和 Java 的语法结构</h6><p>JavaScript的语法结构与C和Java很像，向for、if、while等语句和Java的基本上是一模一样的。所以有过C和Java基础的同学学习起来会轻松很多。不过JavaScript和与Java的关系也仅仅是看起来像而已。</p><h6 id="基于原型的面向对象"><a href="#基于原型的面向对象" class="headerlink" title="基于原型的面向对象"></a>基于原型的面向对象</h6><p>JavaScript是一门面向对象的语言。啥是对象？下次聊。</p><p>Java也是一门面向对象的语言，但是与Java不同JavaScript是基于原型的面向对象。啥是原型？下次聊。</p><h6 id="严格区分大小写"><a href="#严格区分大小写" class="headerlink" title="严格区分大小写"></a>严格区分大小写</h6><p><strong>JavaScript是严格区分大小写的</strong>，也就是abc和Abc会被解析器认为是两个不同的东西。</p><h5 id="1-4、JavaScript的使用"><a href="#1-4、JavaScript的使用" class="headerlink" title="1.4、JavaScript的使用"></a>1.4、JavaScript的使用</h5><h6 id="1-4-1、标签引用"><a href="#1-4-1、标签引用" class="headerlink" title="1.4.1、标签引用"></a>1.4.1、标签引用</h6><p>在HTML中在script标签中就可以编写JavaScript代码，以下是一个简单演示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;弹窗Hello,World!&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="1-4-2、文件引用"><a href="#1-4-2、文件引用" class="headerlink" title="1.4.2、文件引用"></a>1.4.2、文件引用</h6><p>在一个单独的js文件中也可以编写JavaScript代码，然后在HTML文件中使用script标签进行引用，以下是一个简单演示。</p><p>main.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;main.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;引用弹窗Hello,222222!&quot;);</span><br></pre></td></tr></table></figure><h5 id="1-5、JavaScript的输出"><a href="#1-5、JavaScript的输出" class="headerlink" title="1.5、JavaScript的输出"></a>1.5、JavaScript的输出</h5><h6 id="1-5-1、页面输出"><a href="#1-5-1、页面输出" class="headerlink" title="1.5.1、页面输出"></a>1.5.1、页面输出</h6><p>如何使用JavaScript向页面输出一句话，请参考以下代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;页面Hello,World!&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="1-5-2、控制台输出"><a href="#1-5-2、控制台输出" class="headerlink" title="1.5.2、控制台输出"></a>1.5.2、控制台输出</h6><p>如何使用JavaScript向控制台输出一句话，请参考以下代码。</p><script>    console.log("输出一条日志");//最常用    console.info("输出一条信息");    console.warn("输出一条警告");    console.error("输出一条错误");</script><h5 id="1-6、JavaScript的注释"><a href="#1-6、JavaScript的注释" class="headerlink" title="1.6、JavaScript的注释"></a>1.6、JavaScript的注释</h5><p>注释中的内容不会被解析器解析执行，但是会在源码中显示，我们一般会使用注释对程序中的内容进行解释。</p><p>JS中的注释和Java的的一致，分为两种：</p><ul><li><p>单行注释：<code>// 注释内容</code></p></li><li><p>多行注释：<code>/* 注释内容 */</code></p></li></ul><h6 id="1-6-1、单行注释"><a href="#1-6-1、单行注释" class="headerlink" title="1.6.1、单行注释"></a>1.6.1、单行注释</h6><script>    // 这是注释内容    console.log("Hello,World!");</script><h6 id="1-6-2、多行注释"><a href="#1-6-2、多行注释" class="headerlink" title="1.6.2、多行注释"></a>1.6.2、多行注释</h6><script>    /**     * 这是注释内容     */    console.log("Hello,World!");</script><h4 id="第二章-JavaScript基础语法"><a href="#第二章-JavaScript基础语法" class="headerlink" title="第二章 JavaScript基础语法"></a>第二章 JavaScript基础语法</h4><h5 id="2-1、标识符"><a href="#2-1、标识符" class="headerlink" title="2.1、标识符"></a>2.1、标识符</h5><p>所谓标识符，就是指给变量、函数、属性或函数的参数起名字。</p><p>标识符可以是按照下列格式规则组合起来的一或多个字符：</p><p>第一个字符必须是一个字母、下划线（ _ ）或一个美元符号（ $ ）。<br>其它字符可以是字母、下划线、美元符号或数字。<br>按照惯例，ECMAScript 标识符采用驼峰命名法。<br>标识符不能是关键字和保留字符。</p><p><strong>关键字：</strong></p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/06bab955dce3d478eb0ee1880efdbf13.png" alt="image-20201012215759481"></p><p><strong>保留字符：</strong></p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/321c5fb7e148d7fa99e59440083b0a4b.png" alt="image-20201012215835171"></p><p><strong>其它不建议使用的标识符：</strong></p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/612f0462d3cde3f2fa410ccd8b6da15b.png" alt="image-20201012215902568"></p><p><strong>单个单词的标识符举例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name、age、gender、hobby</span><br></pre></td></tr></table></figure><p><strong>多个单词的标识符举例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">studentName、studentAge、studentGender、studentHobby</span><br></pre></td></tr></table></figure><h5 id="2-2、字面量和变量"><a href="#2-2、字面量和变量" class="headerlink" title="2.2、字面量和变量"></a>2.2、字面量和变量</h5><h6 id="2-2-1、字面量"><a href="#2-2-1、字面量" class="headerlink" title="2.2.1、字面量"></a>2.2.1、字面量</h6><p>字面量实际上就是一些固定的值，比如：1、2 、3、true、false、null、NaN、“hello”，字面量都是不可以改变的，由于字面量不是很方便使用，所以在JavaScript中很少直接使用字面量，使用的而是变量。</p><h6 id="2-2-2、变量"><a href="#2-2-2、变量" class="headerlink" title="2.2.2、变量"></a>2.2.2、变量</h6><p>变量的作用是给某一个值或对象标注名称。比如我们的程序中有一个值123，这个值我们是需要反复使用的，这个时候 我们最好将123这个值赋值给一个变量，然后通过变量去使用123这个值。</p><p>变量的声明： 使用var关键字声明一个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure><p><strong>变量的赋值：</strong> 使用&#x3D;为变量赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 123;</span><br></pre></td></tr></table></figure><h5 id="2-3、数据类型"><a href="#2-3、数据类型" class="headerlink" title="2.3、数据类型"></a>2.3、数据类型</h5><h6 id="2-3-1、类型分类"><a href="#2-3-1、类型分类" class="headerlink" title="2.3.1、类型分类"></a>2.3.1、类型分类</h6><p>数据类型决定了一个数据的特征，比如：123和”123”，直观上看这两个数据都是123，但实际上前者是一个数字，而后者是一个字符串。</p><p>对于不同的数据类型我们在进行操作时会有很大的不同。</p><p>JavaScript中一共有5种基本数据类型：</p><p>字符串型（String）<br>数值型（Number）<br>布尔型（Boolean）<br>undefined型（Undefined）<br>null型（Null）</p><p><font color="red"> 这5种之外的类型都称为Object，所以总的来看JavaScript中共有六种数据类型。</font></p><h6 id="2-3-2、typeof运算符"><a href="#2-3-2、typeof运算符" class="headerlink" title="2.3.2、typeof运算符"></a>2.3.2、typeof运算符</h6><p>使用typeof操作符可以用来检查一个变量的数据类型。</p><p><strong>使用方式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> 数据</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h6 id="2-3-3、String"><a href="#2-3-3、String" class="headerlink" title="2.3.3、String"></a>2.3.3、String</h6><p>String用于表示一个字符序列，即字符串。字符串需要使用 <strong>单引号</strong> 或 <strong>双引号</strong> 括起来。</p><p><strong>转义字符：</strong></p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/8cd27bded82d24387ae42b8444f0d25e.png" alt="image-20201013085608008"></p><h6 id="2-3-4、Number"><a href="#2-3-4、Number" class="headerlink" title="2.3.4、Number"></a>2.3.4、Number</h6><p>Number 类型用来表示整数和浮点数，最常用的功能就是用来表示10进制的整数和浮点数。</p><p>Number表示的数字大小是有限的，如果超过了这个范围，则会返回 ±Infinity。</p><p>最大值：+1.7976931348623157e+308<br>最小值：-1.7976931348623157e+308<br>0以上的最小值：5e-324</p><p><strong>特殊的数字：</strong></p><ul><li>Infinity：正无穷</li><li>-Infinity：负无穷</li><li>NaN：非法数字（Not A Number）</li></ul><p><strong>其它的进制：</strong></p><ul><li>二进制：0b 开头表示二进制，但是，并不是所有的浏览器都支持</li><li>八进制：0 开头表示八进制</li><li>十六进制：0x 开头表示十六进制</li><li></li></ul><h6 id="2-3-5、Boolean"><a href="#2-3-5、Boolean" class="headerlink" title="2.3.5、Boolean"></a>2.3.5、Boolean</h6><p>布尔型也被称为逻辑值类型或者真假值类型。</p><p>布尔型只能够取真（true）和假（false）两种数值。除此以外， 其它的值都不被支持。</p><h6 id="2-3-6、Undefined"><a href="#2-3-6、Undefined" class="headerlink" title="2.3.6、Undefined"></a>2.3.6、Undefined</h6><p>Undefined 类型只有一个值，即特殊的 undefined。</p><p>在使用 var 声明变量但未对其加以初始化时，这个变量的值就是 undefined。</p><h6 id="2-3-7、Null"><a href="#2-3-7、Null" class="headerlink" title="2.3.7、Null"></a>2.3.7、Null</h6><p>Null 类型是第二个只有一个值的数据类型，这个特殊的值是 null。</p><p>undefined值实际上是由null值衍生出来的，所以如果比较undefined和null是否相等，会返回true。</p><h5 id="2-4、强制类型转换"><a href="#2-4、强制类型转换" class="headerlink" title="2.4、强制类型转换"></a>2.4、强制类型转换</h5><p>强制类型转换指将一个数据类型强制转换为其它的数据类型。一般是指，将其它的数据类型转换为String、Number、Boolean。</p><h6 id="2-4-1、转换为String类型"><a href="#2-4-1、转换为String类型" class="headerlink" title="2.4.1、转换为String类型"></a>2.4.1、转换为String类型</h6><p>将其它数值转换为字符串有三种方式：toString()、String()、 拼串。</p><p>方式一：调用被转换数据类型的toString()方法，该方法不会影响到原变量，它会将转换的结果返回，但是注意：null和undefined这两个值没有toString()方法，如果调用它们的方法，会报错。</p><p>方式二：调用String()函数，并将被转换的数据作为参数传递给函数，使用String()函数做强制类型转换时，对于Number和Boolean实际上就是调用的toString()方法，但是对于null和undefined，就不会调用toString()方法，它会将 null 直接转换为 “null”，将 undefined 直接转换为 “undefined”。</p><p>方式三：为任意的数据类型 <code>+&quot;&quot;</code></p><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="number">123</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a2 = <span class="number">456</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a3 = <span class="number">678</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a)</span></span><br><span class="line"><span class="language-javascript">        a = <span class="title class_">String</span>(a);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String()方法&quot;</span>+<span class="keyword">typeof</span> a)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a2 = a2.<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;toString()方法&quot;</span>+<span class="keyword">typeof</span> a2)</span></span><br><span class="line"><span class="language-javascript">        a2 = a2 + <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;字符拼接&quot;</span>+<span class="keyword">typeof</span> a)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20220724150125776-8646087.png" alt="image-20220724150125776"></p><h6 id="2-4-2、转换为Number类型"><a href="#2-4-2、转换为Number类型" class="headerlink" title="2.4.2、转换为Number类型"></a>2.4.2、转换为Number类型</h6><p>有三个函数可以把非数值转换为数值：Number()、parseInt() 和parseFloat()。Number()可以用来转换任意类型的数据，而后两者只能用于转换字符串。parseInt()只会将字符串转换为整数，而parseFloat()可以将字符串转换为浮点数。</p><p>方式一：使用Number()函数</p><p>字符串 –&gt; 数字<br>如果是纯数字的字符串，则直接将其转换为数字<br>如果字符串中有非数字的内容，则转换为NaN<br>如果字符串是一个空串或者是一个全是空格的字符串，则转换为0<br>布尔 –&gt; 数字<br>true 转成 1<br>false 转成 0<br>null –&gt; 数字<br>null 转成 0<br>undefined –&gt; 数字<br>undefined 转成 NaN<br>方式二：这种方式专门用来对付字符串，parseInt() 把一个字符串转换为一个整数</p><h6 id="2-4-3转换为Boolean类型"><a href="#2-4-3转换为Boolean类型" class="headerlink" title="2.4.3转换为Boolean类型"></a>2.4.3转换为Boolean类型</h6><p>数字-&gt;布尔</p><p>除了0和NaN，其余的都是true</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">var</span> a1 = <span class="number">100</span></span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Boolean</span>(a))</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Boolean</span>(a1))</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124102900805-9256942.png" alt="image-20221124102900805"></p><p>字符串-&gt;布尔</p><p>只有空字符串都是true，<font color="red">包括字符串false</font></p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> a1 = <span class="string">&quot;false&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> a2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Boolean</span>(a));</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Boolean</span>(a1));</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Boolean</span>(a2));</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124103434725.png" alt="image-20221124103434725"></p><p><strong>其他</strong></p><p>null和undefined都会转换为false</p><p>对象会转换为true</p><h5 id="2-5代码块"><a href="#2-5代码块" class="headerlink" title="2.5代码块"></a>2.5代码块</h5><h6 id="2-5-1语句"><a href="#2-5-1语句" class="headerlink" title="2.5.1语句"></a>2.5.1语句</h6><p>代码块是在大括号 {} 中所写的语句，以此将多条语句的集合视为一条语句来使用。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="title function_">alert</span>(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-6条件语句"><a href="#2-6条件语句" class="headerlink" title="2.6条件语句"></a>2.6条件语句</h5><h6 id="2-6-1-if…else"><a href="#2-6-1-if…else" class="headerlink" title="2.6.1 if…else"></a>2.6.1 if…else</h6><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;小于18岁了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (age == <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;已经18岁了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;大于18岁了&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-6-2、switch…case"><a href="#2-6-2、switch…case" class="headerlink" title="2.6.2、switch…case"></a>2.6.2、switch…case</h5><p>需要注意的是一旦符合case的条件程序会一直运行到结束，所以我们一般会在case中添加break作为语句的结束。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">        <span class="keyword">switch</span> (age) &#123;</span><br><span class="line">            <span class="keyword">case</span> age &lt; <span class="number">18</span>:</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;小于18岁了&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> age = <span class="number">18</span>:</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;小于18岁了&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> age &gt; <span class="number">18</span>:</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;小于18岁了&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124105148042.png" alt="image-20221124105148042"></p><h5 id="2-7循环"><a href="#2-7循环" class="headerlink" title="2.7循环"></a>2.7循环</h5><h6 id="2-7-1、while"><a href="#2-7-1、while" class="headerlink" title="2.7.1、while"></a>2.7.1、while</h6><p>语法：</p><p>while （循环条件）{</p><p>操作</p><p>}</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">writeln</span>(i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124105720027-9258641.png" alt="image-20221124105720027"></p><h6 id="2-7-2-do…while"><a href="#2-7-2-do…while" class="headerlink" title="2.7.2 do…while"></a>2.7.2 do…while</h6><p>do…while和while非常类似，只不过它会在循环的尾部而不是顶部检查表达式的值，因此，do…while循环会至少执行一次。相比于while，do…while的使用情况并不 是很多。</p><p>语法：</p><p>do{<br>    语句…<br>}while(条件表达式);</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">writeln</span>(i);</span><br><span class="line">        &#125; <span class="keyword">while</span> (i == <span class="number">2</span>); </span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p>i &#x3D; 2 是不成立的  但是依旧只行了一次</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124110141159.png" alt="image-20221124110141159"></p><h6 id="2-7-3、for"><a href="#2-7-3、for" class="headerlink" title="2.7.3、for"></a>2.7.3、for</h6><p>语法：</p><p>for(初始化表达式 ; 条件表达式 ; 更新表达式){<br>    语句…<br>}</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">writeln</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124110625152.png" alt="image-20221124110625152"></p><h5 id="2-7-4、跳转控制"><a href="#2-7-4、跳转控制" class="headerlink" title="2.7.4、跳转控制"></a>2.7.4、跳转控制</h5><ul><li>break：结束最近的一次循环，可以在循环和switch语句中使用。</li><li>continue：结束本次循环，执行下一次循环，只能在循环中使用。</li></ul><h5 id="2-8-JS对象"><a href="#2-8-JS对象" class="headerlink" title="2.8 JS对象"></a>2.8 JS对象</h5><h6 id="2-8-1简介"><a href="#2-8-1简介" class="headerlink" title="2.8.1简介"></a>2.8.1简介</h6><p>Object类型，我们也称为一个对象，是JavaScript中的引用数据类型。</p><h6 id="2-8-2对象创建"><a href="#2-8-2对象创建" class="headerlink" title="2.8.2对象创建"></a>2.8.2对象创建</h6><p>方式一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">       user.<span class="property">name</span> = <span class="string">&quot;李白&quot;</span>;</span><br><span class="line">       user.<span class="property">age</span> = <span class="number">32</span>;</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">write</span>(user.<span class="property">name</span>);</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">write</span>(user.<span class="property">age</span>);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> user = &#123;</span><br><span class="line">        name : <span class="string">&quot;李白&quot;</span>,</span><br><span class="line">        age : <span class="number">32</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">write</span>(user.<span class="property">name</span>);</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">write</span>(user.<span class="property">age</span>);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="2-8-3访问属性"><a href="#2-8-3访问属性" class="headerlink" title="2.8.3访问属性"></a>2.8.3访问属性</h6><p>方式一：对象.属性</p><p>方式二：对象[‘属性’]</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> user = &#123;</span><br><span class="line">        name : <span class="string">&quot;李白&quot;</span>,</span><br><span class="line">        age : <span class="number">32</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(user[<span class="string">&#x27;age&#x27;</span>]);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124114420802.png" alt="image-20221124114420802"></p><h6 id="2-8-4删除对象属性"><a href="#2-8-4删除对象属性" class="headerlink" title="2.8.4删除对象属性"></a>2.8.4删除对象属性</h6><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> user = &#123;</span><br><span class="line">        name : <span class="string">&quot;李白&quot;</span>,</span><br><span class="line">        age : <span class="number">32</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">delete</span> user.<span class="property">age</span>;</span><br><span class="line"></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p>输出对象只剩name字段</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124113938477.png" alt="image-20221124113938477"></p><h6 id="2-8-5-遍历对象"><a href="#2-8-5-遍历对象" class="headerlink" title="2.8.5 遍历对象"></a>2.8.5 遍历对象</h6><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> 变量 <span class="keyword">in</span> 对象) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> user = &#123;</span><br><span class="line">        name : <span class="string">&quot;李白&quot;</span>,</span><br><span class="line">        age : <span class="number">32</span></span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line">        <span class="keyword">var</span> val = user[key];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key+<span class="string">&quot;=&quot;</span>+val)</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124155024190.png" alt="image-20221124155024190"></p><h6 id="2-8-6-工厂模式创建对象"><a href="#2-8-6-工厂模式创建对象" class="headerlink" title="2.8.6 工厂模式创建对象"></a>2.8.6 工厂模式创建对象</h6><p>使用函数的方式创建对象</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">createUser</span> (name, age) &#123;</span><br><span class="line">            <span class="comment">//创建一个object对象</span></span><br><span class="line">            <span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">            <span class="comment">//设置对象属性</span></span><br><span class="line">            user.<span class="property">name</span> = name;</span><br><span class="line">            user.<span class="property">age</span> = age ;</span><br><span class="line">            <span class="comment">//返回对象</span></span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> user1 = <span class="title function_">createUser</span>(<span class="string">&quot;李白&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">var</span> user2 = <span class="title function_">createUser</span>(<span class="string">&quot;花木兰&quot;</span>,<span class="number">32</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(user1);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(user2);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="2-8-7-构造函数创建对象（推荐）"><a href="#2-8-7-构造函数创建对象（推荐）" class="headerlink" title="2.8.7 构造函数创建对象（推荐）"></a>2.8.7 构造函数创建对象（推荐）</h6><p>上面方式方式已经可以复用创建对象，但是发现创建的对象其实实际是为Object的对象，我们想要的其实是User，改进一下</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">User</span> (name, age) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">age</span> = age ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> user1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李白&quot;</span>,<span class="number">12</span>);</span><br><span class="line">      <span class="keyword">var</span> user2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;花木兰&quot;</span>,<span class="number">32</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(user1);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(user2);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-9函数"><a href="#2-9函数" class="headerlink" title="2.9函数"></a>2.9函数</h5><p>函数是由一连串的子程序（语句的集合）所组成的，可以被外部程序调用，向函数传递参数之后，函数可以返回一定的值。通常情况下，JavaScript代码是自上而下执行的，不过函数体内部的代码则不是这样。如果只是对函数进行了声明，其中的代码并不会执行，只有在调用函数时才会执行函数体内部的代码。</p><h6 id="2-9-1函数创建"><a href="#2-9-1函数创建" class="headerlink" title="2.9.1函数创建"></a>2.9.1函数创建</h6><p><strong>语法：</strong></p><p><strong>方式一</strong> <strong>使用函数对象创建函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js <span class="keyword">var</span> 函数名 = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;执行语句&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>方式二</strong> <strong>函数声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名 （参数）&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式三</strong> <strong>函数表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">function</span> (<span class="params">参数</span>) &#123;</span><br><span class="line">  方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> fun1 = <span class="keyword">new</span> <span class="title class_">Function</span> (<span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;函数对象创建函数&quot;</span>));</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun2</span> (name) &#123;</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;函数声明创建的函数:name=&quot;</span>+name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fun3 = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;函数表达式创建函数:name=&quot;</span>+name)</span><br><span class="line">    &#125;</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="2-9-2函数调用"><a href="#2-9-2函数调用" class="headerlink" title="2.9.2函数调用"></a>2.9.2函数调用</h6><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名（参数）;</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：****</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> fun1 = <span class="keyword">new</span> <span class="title class_">Function</span> (<span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;函数对象创建函数&quot;</span>));</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fun2</span> (name) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;函数声明创建的函数:name=&quot;</span>+name)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> fun3 = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;函数表达式创建函数:name=&quot;</span>+name)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fun1</span>();</span><br><span class="line">     <span class="title function_">fun2</span>(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">     <span class="title function_">fun3</span>(<span class="string">&quot;杜甫&quot;</span>);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：****</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124170703109-9280824.png" alt="image-20221124170703109"></p><h6 id="2-9-3-函数参数"><a href="#2-9-3-函数参数" class="headerlink" title="2.9.3 函数参数"></a>2.9.3 函数参数</h6><p><font color="red">注：</font></p><p>js在调用函数时不会检查参数的数量,多余实参不会被赋值，如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</p><h6 id="2-9-4-函数返回值"><a href="#2-9-4-函数返回值" class="headerlink" title="2.9.4 函数返回值"></a>2.9.4 函数返回值</h6><p>可以使用 return 来设置函数的返回值，return后的值将会作为函数的执行结果返回，可以定义一个变量，来接收该结果。</p><blockquote><p>注意：在函数中return后的语句都不会执行，如果return语句后不跟任何值就相当于返回一个undefined，如果函数中不写return，则也会返回undefined，return后可以跟任意类型的值</p></blockquote><p><strong>示例：</strong>****</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">fun</span> (a,b) &#123;</span><br><span class="line">           <span class="keyword">return</span> a+b;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> c = <span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">       <span class="title function_">alert</span>(c);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221124173156771.png" alt="image-20221124173156771"></p><h6 id="2-9-5-函数嵌套"><a href="#2-9-5-函数嵌套" class="headerlink" title="2.9.5 函数嵌套"></a>2.9.5 函数嵌套</h6><p>嵌套的函数只能在函数内部使用示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fu</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">zi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是儿子&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">zi</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fu</span>();</span><br></pre></td></tr></table></figure><h6 id="2-9-6-匿名函数"><a href="#2-9-6-匿名函数" class="headerlink" title="2.9.6 匿名函数"></a>2.9.6 匿名函数</h6><p>匿名函数：没有名字的函数就是匿名函数，它可以让一个变量来接收，也就是用 “函数表达式” 方式创建和接收</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是一个匿名函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-9-7-立即执行函数"><a href="#2-9-7-立即执行函数" class="headerlink" title="2.9.7 立即执行函数"></a>2.9.7 立即执行函数</h6><p>进入页面立即执行不需要手动调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;立即执行函数&quot;</span>)</span><br><span class="line"></span><br><span class="line">       &#125;) ()</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="2-9-8-对象中的函数"><a href="#2-9-8-对象中的函数" class="headerlink" title="2.9.8 对象中的函数"></a>2.9.8 对象中的函数</h6><p>对象中的属性可以是任何数据类型，也可以是个函数</p><p>如果一个函数作为对象的属性保存，那么我们称这个函数是这个对象的方法</p><p>示例：****</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> user = &#123;</span><br><span class="line">        name : <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        age : <span class="number">12</span>,</span><br><span class="line">        thisDate : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;时间：&quot;</span>+date )</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="property">log</span> (user.<span class="property">name</span>);</span><br><span class="line">       user.<span class="title function_">thisDate</span>();      </span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="2-9-10-this对象"><a href="#2-9-10-this对象" class="headerlink" title="2.9.10 this对象"></a>2.9.10 this对象</h6><p><font color="blue">函数式调用，this为当前window对象</font></p><p><font color="blue">方法调用时，就是当前方法</font></p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> name = <span class="string">&quot;全局名称name&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> user = &#123;</span><br><span class="line">       name : <span class="string">&quot;user对象名称&quot;</span>,</span><br><span class="line">       subNmae : fun</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fun</span> () &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">fun</span>();</span><br><span class="line">      user.<span class="title function_">subNmae</span>();</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/2022/11/22/JavaScript%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/image-20221230155119465.png" alt="image-20221230155119465"></p><h6 id="2-10-toString方法"><a href="#2-10-toString方法" class="headerlink" title="2.10 toString方法"></a>2.10 toString方法</h6><p>类似于java的toString方法，将当前对象或者数组等数据类型转换为字符串类型，该方法是Object的方法，几乎所有的对象都继承了Object类，所以几乎所有的示例对象都可以使用该方法</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">15.26540</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bool.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&quot;CodePlayer&quot;</span>, <span class="literal">true</span>, <span class="number">12</span>, -<span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2013</span>, <span class="number">7</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">59</span>, <span class="number">230</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;自定义错误信息&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="title function_">toString</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第三章-JavaScript常用对象"><a href="#第三章-JavaScript常用对象" class="headerlink" title="第三章 JavaScript常用对象"></a>第三章 JavaScript常用对象</h4><h5 id="3-1数组对象"><a href="#3-1数组对象" class="headerlink" title="3.1数组对象"></a>3.1数组对象</h5><p>​                                                   </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23种设计模式</title>
      <link href="/2022/11/18/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/11/18/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>设计模式学习</p><span id="more"></span><h3 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h3><h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h4><h5 id="1-简单工厂模式（Simple-Factory-Pattern）"><a href="#1-简单工厂模式（Simple-Factory-Pattern）" class="headerlink" title="1. 简单工厂模式（Simple Factory Pattern）"></a>1. 简单工厂模式（Simple Factory Pattern）</h5><p>简单工厂模式的核心是定义一个创建对象的接口，将对象的创建和本身的业务逻辑分离，降低系统的耦合度，使得两个修改起来相对容易些，当以后实现改变时，只需要修改工厂类即可。在简单工厂模式中，我们在创建对象时不会向客户端暴露创建逻辑，而是使用一个共同的接口来创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getGoods</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory</span>();</span><br><span class="line">            <span class="type">Mose</span> <span class="variable">mose</span> <span class="operator">=</span> (Mose) factory.createEntity(EntityEnum.MOSE);</span><br><span class="line">            <span class="type">KeyBoard</span> <span class="variable">keyboard</span> <span class="operator">=</span> (KeyBoard) factory.createEntity(EntityEnum.KEYBOARD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EntityEnum</span> &#123;</span><br><span class="line">        MOSE,KEYBOARD</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">createEntity</span> <span class="params">(EntityEnum entityEnum)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (EntityEnum.MOSE == entityEnum) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mose</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EntityEnum.KEYBOARD == entityEnum) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyBoard</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mose</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Mose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoard</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">KeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h6><p>简单工厂模式使用工厂类来统一创建对象，实现了使用和创建的分离。只需知道具体产品类所对应的参数即可，通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</p><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h6><p> 但缺点在于不符合“开闭原则”，每次添加新产品就需要修改工厂类。在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展维护，并且工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</p><h5 id="2-工厂方法模式（Factory-Method-Pattern）"><a href="#2-工厂方法模式（Factory-Method-Pattern）" class="headerlink" title="2. 工厂方法模式（Factory Method Pattern）"></a>2. 工厂方法模式（Factory Method Pattern）</h5><p>工厂方法模式是将工厂类的创建过程抽象出来，每个具体的产品类都有一个对应的工厂类来创建对象。客户端代码只需要调用相应的工厂类来创建对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mose</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Mose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoard</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">KeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">FactoryProduct</span> &#123;</span><br><span class="line">        Product <span class="title function_">creatProduct</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoseFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryProduct</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Mose <span class="title function_">creatProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mose</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoardFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryProduct</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> KeyBoard <span class="title function_">creatProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyBoard</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mian</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MoseFactory</span> <span class="variable">moseFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoseFactory</span>();</span><br><span class="line">        <span class="type">Mose</span> <span class="variable">mose</span> <span class="operator">=</span> moseFactory.creatProduct();</span><br><span class="line">        <span class="type">KeyBoardFactory</span> <span class="variable">keyBoardFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyBoardFactory</span>();</span><br><span class="line">        <span class="type">KeyBoard</span> <span class="variable">keyBoard</span> <span class="operator">=</span> keyBoardFactory.creatProduct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">demo3</span> <span class="variable">demo3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo3</span>();</span><br><span class="line">        demo3.mian();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h6><p>工厂方法模式将工厂抽象化，并定义了一个创建对象的接口。每次增加新的产品只需要增加该产品跟该产品的工厂类由具体工厂类决定要实例化的产品是哪个，将对象的创建与实例化延迟到子类，这样工厂的设计就符合“开闭原则”了，扩展时不必去修改原来的代码。</p><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h6><p>但缺点在于，每增加一个产品都需要增加一个具体产品类和实现工厂类，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p><p>缺点：</p><h5 id="3-抽象工厂模式（Abstract-Factory-Pattern）"><a href="#3-抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="3. 抽象工厂模式（Abstract Factory Pattern）"></a>3. 抽象工厂模式（Abstract Factory Pattern）</h5><p>抽象工厂模式是在工厂方法模式的基础上，将工厂类的抽象化程度再提高一层。抽象工厂模式用于创建一组相关的对象，它提供了一个接口，用于创建一系列的产品。客户端代码不需要关心具体的产品类，只需要知道抽象工厂和抽象产品类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产品抽象类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鼠标抽象实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mose</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Mose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键盘抽象实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoard</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">KeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产出一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 维修抽象类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Maintain</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaintainMose</span> <span class="keyword">extends</span> <span class="title class_">Maintain</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MaintainMose</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;维修一个鼠标&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaintainKeyBoard</span> <span class="keyword">extends</span> <span class="title class_">Maintain</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MaintainKeyBoard</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;维修一个键盘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象工厂类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> Maintain <span class="title function_">createMaintain</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoseFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Mose <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mose</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> MaintainMose <span class="title function_">createMaintain</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MaintainMose</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoardFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> KeyBoard <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyBoard</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> MaintainKeyBoard <span class="title function_">createMaintain</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MaintainKeyBoard</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MoseFactory</span> <span class="variable">moseFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoseFactory</span>();</span><br><span class="line">        moseFactory.createProduct();</span><br><span class="line">        moseFactory.createMaintain();</span><br><span class="line">        <span class="type">KeyBoardFactory</span> <span class="variable">keyBoardFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyBoardFactory</span>();</span><br><span class="line">        keyBoardFactory.createProduct();</span><br><span class="line">        keyBoardFactory.createMaintain();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">demo4</span> <span class="variable">demo3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo4</span>();</span><br><span class="line">        demo3.mian();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a><strong>缺点：</strong></h6><p> 但该模式的缺点在于添加新的行为时比较麻烦，如果需要添加一个新产品族对象时，需要更改接口及其下所有子类，这必然会带来很大的麻烦。</p><h5 id="4-单例模式（Singleton-Pattern）"><a href="#4-单例模式（Singleton-Pattern）" class="headerlink" title="4. 单例模式（Singleton Pattern）"></a>4. 单例模式（Singleton Pattern）</h5><p>单例模式是最简单的设计模式之一。在单例模式中，一个类只能创建一个实例，以确保它所有的实例都访问相同的状态。</p><h5 id="简单懒汉模式"><a href="#简单懒汉模式" class="headerlink" title="简单懒汉模式"></a>简单懒汉模式</h5><p>在第一次创建对象的时候去创建对象，使用static保证只会实例化一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Demo5</span> <span class="variable">demo5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo5</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo5 <span class="title function_">getDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == demo5) &#123;</span><br><span class="line">            demo5 = <span class="keyword">new</span> <span class="title class_">Demo5</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> demo5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo5</span> <span class="variable">demo</span> <span class="operator">=</span> Demo5.getDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a><strong>缺点：</strong></h6><p>懒汉式单例的实现是线程不安全的，在并发环境下可能出现多个 Singleton 实例的问题。要实现线程安全，有以下三种方式</p><h6 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h6><p>在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟99%的情况下是不需要同步的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Demo5 <span class="title function_">getDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == demo5) &#123;</span><br><span class="line">        demo5 = <span class="keyword">new</span> <span class="title class_">Demo5</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> demo5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h6><p>双重检查锁定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">Demo6</span> <span class="variable">demo5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo6</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Demo6 <span class="title function_">getDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == demo5) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Demo6.class)&#123;</span><br><span class="line">                <span class="comment">//判断两次空是避免两个线程都通过了第一个&quot;null == demo5&quot;校验，从而创建多次对象</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == demo5) &#123;</span><br><span class="line">                    demo5 = <span class="keyword">new</span> <span class="title class_">Demo6</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> demo5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方式三：静态内部类"><a href="#方式三：静态内部类" class="headerlink" title="方式三：静态内部类"></a>方式三：静态内部类</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Demo7 &#123;</span><br><span class="line"></span><br><span class="line">    //静态内部类只会加载一次</span><br><span class="line">    public static class Demo7a &#123;</span><br><span class="line">        private static final Demo7 dmo = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Demo7 getDemo() &#123;</span><br><span class="line">        return Demo7a.dmo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="简单饿汉模式"><a href="#简单饿汉模式" class="headerlink" title="简单饿汉模式"></a>简单饿汉模式</h5><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="type">Demo8</span> <span class="variable">demo5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo8</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Demo8</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Demo8 <span class="title function_">getDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> demo5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><p>因为声明的对象是提前创建好，且申明是静态的，会在类初始化时候创建，在类卸载时候才释放，生命周期过长</p><h4 id="5-原型模式（Prototype-Pattern）"><a href="#5-原型模式（Prototype-Pattern）" class="headerlink" title="5. 原型模式（Prototype Pattern）"></a>5. 原型模式（Prototype Pattern）</h4><p>原型模式是指创建重复的对象，同时又能保证性能。它通常需要先创建一个原型对象，然后通过复制该对象来创建新的对象。</p><h6 id="原型模式的优点与适用场景："><a href="#原型模式的优点与适用场景：" class="headerlink" title="原型模式的优点与适用场景："></a>原型模式的优点与适用场景：</h6><p>（1）原型模式比 new 方式创建对象的性能要好的多，因为 Object 类的 clone() 方法是一个本地方法，直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显；</p><p>（2）简化对象的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo9</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Demo9a</span> <span class="variable">demo9a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo9a</span>(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        <span class="type">Demo9a</span> <span class="variable">clone1</span> <span class="operator">=</span> demo9a.clone();</span><br><span class="line">        System.out.println(demo9a);</span><br><span class="line">        System.out.println(clone1);</span><br><span class="line">        System.out.println(demo9a.equals(clone1)+ <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">        clone1.setName(<span class="string">&quot;花木兰&quot;</span>);</span><br><span class="line">        System.out.println(demo9a);</span><br><span class="line">        System.out.println(clone1);</span><br><span class="line">        System.out.println(demo9a.equals(clone1)+ <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo9a</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Demo9a <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (Demo9a) <span class="built_in">super</span>.clone();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo9a</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo9a</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新equals跟hashcode方法用来比较对象的值是否相等</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Demo9a</span> <span class="variable">demo9a</span> <span class="operator">=</span> (Demo9a) o;</span><br><span class="line">        <span class="keyword">return</span> name.equals(demo9a.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Demo9a&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><h4 id="6-适配器模式（Adapter-Pattern）"><a href="#6-适配器模式（Adapter-Pattern）" class="headerlink" title="6. 适配器模式（Adapter Pattern）"></a>6. 适配器模式（Adapter Pattern）</h4><p>适配器模式是一种结构型模式，它允许一个已经存在的类的接口与另一个接口不兼容的类进行合作。适配器模式主要分成三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p><h5 id="类的适配器模式"><a href="#类的适配器模式" class="headerlink" title="类的适配器模式"></a>类的适配器模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//加强版</span></span><br><span class="line">        <span class="type">insa</span> <span class="variable">demo0Plas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo0Plas</span>();</span><br><span class="line">        demo0Plas.a();</span><br><span class="line">        <span class="comment">//普通版</span></span><br><span class="line">        <span class="type">insa</span> <span class="variable">demo0a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo0a</span>();</span><br><span class="line">        demo0a.a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">insa</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo0a</span> <span class="keyword">implements</span> <span class="title class_">insa</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加强版pals类方法a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo0s</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加强版方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器，同时实现两个类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Demo0Plas</span> <span class="keyword">extends</span> <span class="title class_">Demo0s</span> <span class="keyword">implements</span> <span class="title class_">insa</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口的适配器模式"><a href="#接口的适配器模式" class="headerlink" title="接口的适配器模式"></a>接口的适配器模式</h5><p>有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">sub1</span> <span class="variable">sub1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sub1</span>();</span><br><span class="line">        <span class="type">sub2</span> <span class="variable">sub2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sub2</span>();</span><br><span class="line">        sub2.method2();</span><br><span class="line">        sub1.method1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">As</span> <span class="keyword">implements</span> <span class="title class_">a</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sub1</span> <span class="keyword">extends</span> <span class="title class_">As</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sub2</span> <span class="keyword">extends</span> <span class="title class_">As</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-桥接模式（Bridge-Pattern）"><a href="#7-桥接模式（Bridge-Pattern）" class="headerlink" title="7. 桥接模式（Bridge Pattern）"></a>7. 桥接模式（Bridge Pattern）</h4><p>桥接模式是一种结构型模式，它将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>咖啡店，有两种咖啡加糖或者加奶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加糖咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加奶咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MilkSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在准备加两个容量规格的咖啡，大杯和小杯，当然你可以对应加几个实现类不就得了？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加糖咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxCoffeeSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大杯加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加糖咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinCoffeeSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小杯加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加奶咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxMilkSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大杯加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加奶咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinMilkSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小杯加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再过几天，你们要上架超大杯很中杯子。。。。。。这时候你的实现类将是M*N所有维度的乘集，这个你需要使用设计模式，让你代码降低耦合</p><h5 id="重新设计后代码"><a href="#重新设计后代码" class="headerlink" title="重新设计后代码"></a>重新设计后代码</h5><p>M*N 优化后为 M+N</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CoffeeAbstract</span> <span class="variable">coffeeAbstract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Max</span>();</span><br><span class="line">        <span class="comment">//加奶</span></span><br><span class="line">        coffeeAbstract.setCoffeeService(<span class="keyword">new</span> <span class="title class_">MilkSugaring</span>());</span><br><span class="line">        coffeeAbstract.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//购买咖啡接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CoffeeService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MilkSugaring</span> <span class="keyword">implements</span> <span class="title class_">CoffeeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把加材料的抽象出来</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> CoffeeService coffeeService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CoffeeService <span class="title function_">getCoffeeService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffeeService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCoffeeService</span><span class="params">(CoffeeService coffeeService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coffeeService = coffeeService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Max</span> <span class="keyword">extends</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;大杯&quot;</span>);</span><br><span class="line">        coffeeService.buyCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Min</span> <span class="keyword">extends</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;小杯&quot;</span>);</span><br><span class="line">        coffeeService.buyCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你想增加超大杯跟中杯只需要增加两个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Centre</span> <span class="keyword">extends</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;中杯&quot;</span>);</span><br><span class="line">        coffeeService.buyCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Huge</span> <span class="keyword">extends</span> <span class="title class_">CoffeeAbstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;超杯&quot;</span>);</span><br><span class="line">        coffeeService.buyCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><p>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</p><h4 id="8-装饰器模式（Decorator-Pattern）"><a href="#8-装饰器模式（Decorator-Pattern）" class="headerlink" title="8. 装饰器模式（Decorator Pattern）"></a>8. 装饰器模式（Decorator Pattern）</h4><p>装饰器模式是一种结构型模式，它允许你通过将对象包装在一个装饰器类中来扩展其行为，而不需要修改其代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HuaMuLan</span> <span class="variable">huaMuLan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaMuLan</span>();</span><br><span class="line">        <span class="type">Pifu</span> <span class="variable">pifu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pifu</span>(huaMuLan);</span><br><span class="line">        System.out.println(pifu.getIncident());</span><br><span class="line">        System.out.println(pifu.getAttack());</span><br><span class="line">        <span class="type">ZhuangBei</span> <span class="variable">zhuangBei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZhuangBei</span>(huaMuLan);</span><br><span class="line">        System.out.println(zhuangBei.getIncident());</span><br><span class="line">        System.out.println(zhuangBei.getAttack());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">YingXiong</span>&#123;</span><br><span class="line">    <span class="comment">//加成栏</span></span><br><span class="line">    <span class="keyword">private</span> String incident;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> attack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getAttack</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getIncident</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择英雄</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuaMuLan</span> <span class="keyword">extends</span> <span class="title class_">YingXiong</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIncident</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;选择花木兰\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一层装饰者 买了皮肤</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pifu</span> <span class="keyword">extends</span> <span class="title class_">HuaMuLan</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HuaMuLan huaMuLan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pifu</span><span class="params">(HuaMuLan huaMuLan)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.huaMuLan = huaMuLan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> huaMuLan.getAttack() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIncident</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> huaMuLan.getIncident()  + <span class="string">&quot;购买皮肤水晶猎龙者\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二层装饰 买了装备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZhuangBei</span> <span class="keyword">extends</span> <span class="title class_">HuaMuLan</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HuaMuLan huaMuLan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ZhuangBei</span><span class="params">(HuaMuLan huaMuLan)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.huaMuLan = huaMuLan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> huaMuLan.getAttack() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIncident</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> huaMuLan.getIncident()  + <span class="string">&quot;购买铁剑\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-组合模式（Composite-Pattern）"><a href="#9-组合模式（Composite-Pattern）" class="headerlink" title="9. 组合模式（Composite Pattern）"></a>9. 组合模式（Composite Pattern）</h5><p>组合模式是一种结构型模式，它允许你将对象组合成树形结构来表现“整体&#x2F;部分”层次结构。</p><p>示例：文件夹浏览，我们需要把不同类型的文件兼容到一个窗口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Folders</span> <span class="variable">zwjj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folders</span>(<span class="string">&quot;总文件夹&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">TextFile</span> <span class="variable">aText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextFile</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">ImagerFile</span> <span class="variable">bImager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImagerFile</span>(<span class="string">&quot;b.jpg&quot;</span>);</span><br><span class="line">        <span class="type">Folders</span> <span class="variable">cFolders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folders</span>(<span class="string">&quot;C文件夹&quot;</span>);</span><br><span class="line">        zwjj.add(aText);</span><br><span class="line">        zwjj.add(bImager);</span><br><span class="line">        zwjj.add(cFolders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向C文件夹中添加文件：c.txt、c.jpg </span></span><br><span class="line">        <span class="type">TextFile</span> <span class="variable">cText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextFile</span>(<span class="string">&quot;c.txt&quot;</span>);</span><br><span class="line">        <span class="type">ImagerFile</span> <span class="variable">cImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImagerFile</span>(<span class="string">&quot;c.jpg&quot;</span>);</span><br><span class="line">        cFolders.add(cText);</span><br><span class="line">        cFolders.add(cImage);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//遍历一级文件夹</span></span><br><span class="line">        zwjj.getAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历C文件夹</span></span><br><span class="line">        cFolders.getAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">File</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件夹也是一个文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Folders</span> <span class="keyword">extends</span> <span class="title class_">File</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;File&gt; files;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Folders</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.files = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">add</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> files.add(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> files.remove(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterator&lt;File&gt; iterator = files.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextFile</span> <span class="keyword">extends</span> <span class="title class_">File</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextFile</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是文本文件，文件名：&quot;</span> + <span class="built_in">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImagerFile</span> <span class="keyword">extends</span> <span class="title class_">File</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImagerFile</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是图像文件，文件名：&quot;</span> + <span class="built_in">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-外观模式（Facade-Pattern）"><a href="#10-外观模式（Facade-Pattern）" class="headerlink" title="10. 外观模式（Facade Pattern）"></a>10. 外观模式（Facade Pattern）</h5><p>外观模式是一种结构型模式，它提供了一个简单的接口，隐藏了一个复杂的子系统的复杂性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Service1</span> <span class="variable">service1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Service1Impl</span>();</span><br><span class="line">        service1.all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Service1</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">all</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Service1Impl</span> <span class="keyword">implements</span> <span class="title class_">Service1</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">all</span><span class="params">()</span> &#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-享元模式（Flyweight-Pattern）"><a href="#11-享元模式（Flyweight-Pattern）" class="headerlink" title="11. 享元模式（Flyweight Pattern）"></a>11. 享元模式（Flyweight Pattern）</h5><p>Java中的享元模式（Flyweight Pattern）是一种结构型设计模式，它可以在大量的相似对象之间共享尽可能多的数据，从而减少内存的使用量和提高性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassFactory</span> <span class="variable">classFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassFactory</span>();</span><br><span class="line">        <span class="type">a</span> <span class="variable">f1</span> <span class="operator">=</span> classFactory.getFlyweight(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        <span class="type">a</span> <span class="variable">f2</span> <span class="operator">=</span> classFactory.getFlyweight(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        <span class="type">a</span> <span class="variable">f3</span> <span class="operator">=</span> classFactory.getFlyweight(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">getThisclass</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    String className;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">b</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getThisclass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前类是&quot;</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassFactory</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> HashMap&lt;String, a&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    a <span class="title function_">getFlyweight</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">a</span> <span class="variable">a</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == a) &#123;</span><br><span class="line">            a = <span class="keyword">new</span> <span class="title class_">b</span>(key);</span><br><span class="line">            map.put(key, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-代理模式（Proxy-Pattern）"><a href="#12-代理模式（Proxy-Pattern）" class="headerlink" title="12. 代理模式（Proxy Pattern）"></a>12. 代理模式（Proxy Pattern）</h4><p>代理模式是一种结构型模式，它为其他对象提供一种代理以控制对这个对象的访问。</p><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p>静态代理：由程序员创建或特定工具自动生成源代码，也就是<strong>在编译时就已经将接口、被代理类、代理类等确定下来</strong>。在程序运行之前，代理类的.class文件就已经生成。</p><p>示例：学生缴纳班费，但是班长代理学生上交班费，班长就是学生的代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个缴费的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">giveMoney</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生缴费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">giveMoney</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;上交班费50元&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StudentsClassMonitor</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="comment">//被代理的学生</span></span><br><span class="line">        Student stu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StudentsClassMonitor</span><span class="params">(Person stu)</span> &#123;</span><br><span class="line">            <span class="comment">// 只代理学生对象</span></span><br><span class="line">            <span class="keyword">if</span> (stu.getClass() == Student.class) &#123;</span><br><span class="line">                <span class="built_in">this</span>.stu = (Student) stu;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理上交班费，调用被代理学生的上交班费行为</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">giveMoney</span><span class="params">()</span> &#123;</span><br><span class="line">            stu.giveMoney();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//被代理的学生张三，他的班费上交有代理对象monitor（班长）完成</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成代理对象，并将张三传给代理对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">monitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentsClassMonitor</span>(zhangsan);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//班长代理上交班费</span></span><br><span class="line">        monitor.giveMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h4><h5 id="13-责任链模式（Chain-of-Responsibility-Pattern）"><a href="#13-责任链模式（Chain-of-Responsibility-Pattern）" class="headerlink" title="13. 责任链模式（Chain of Responsibility Pattern）"></a>13. 责任链模式（Chain of Responsibility Pattern）</h5><p>责任链模式是一种行为型模式，它允许你将请求沿着处理链进行传递，直到有一个对象处理为止。</p><h5 id="14-命令模式（Command-Pattern）"><a href="#14-命令模式（Command-Pattern）" class="headerlink" title="14. 命令模式（Command Pattern）"></a>14. 命令模式（Command Pattern）</h5><p>命令模式是一种行为型模式，它将请求封装为对象，从而允许你使用不同的请求、队列或日志来参数化客户端请求。</p><h5 id="15-解释器模式（Interpreter-Pattern）"><a href="#15-解释器模式（Interpreter-Pattern）" class="headerlink" title="15. 解释器模式（Interpreter Pattern）"></a>15. 解释器模式（Interpreter Pattern）</h5><p>解释器模式是一种行为型模式，它定义了一种语言，然后通过该语言来解释表达式。</p><h5 id="16-迭代器模式（Iterator-Pattern）"><a href="#16-迭代器模式（Iterator-Pattern）" class="headerlink" title="16. 迭代器模式（Iterator Pattern）"></a>16. 迭代器模式（Iterator Pattern）</h5><p>迭代器模式是一种行为型模式，它允许你在不暴露集合底层表示的情况下遍历集合。</p><h5 id="17-中介者模式（Mediator-Pattern）"><a href="#17-中介者模式（Mediator-Pattern）" class="headerlink" title="17. 中介者模式（Mediator Pattern）"></a>17. 中介者模式（Mediator Pattern）</h5><p>中介者模式是一种行为型模式，它允许你减少对象之间的直接耦合，通过将它们的通信委托给一个中介者对象来实现。</p><h5 id="18-备忘录模式（Memento-Pattern）"><a href="#18-备忘录模式（Memento-Pattern）" class="headerlink" title="18. 备忘录模式（Memento Pattern）"></a>18. 备忘录模式（Memento Pattern）</h5><p>备忘录模式是一种行为型模式，它允许你在不暴露对象实现细节的情况下保存和恢复对象的状态。</p><h5 id="19-观察者模式（Observer-Pattern）"><a href="#19-观察者模式（Observer-Pattern）" class="headerlink" title="19. 观察者模式（Observer Pattern）"></a>19. 观察者模式（Observer Pattern）</h5><p>观察者模式是一种行为型模式，它允许你定义一种订阅机制，以便一个对象的状态发生变化时通知一组对象。</p><h5 id="20-状态模式（State-Pattern）"><a href="#20-状态模式（State-Pattern）" class="headerlink" title="20. 状态模式（State Pattern）"></a>20. 状态模式（State Pattern）</h5><p>状态模式是一种行为型模式，它允许你在一个对象内部状态发生变化时改变其行为。</p><h5 id="21-策略模式（Strategy-Pattern）"><a href="#21-策略模式（Strategy-Pattern）" class="headerlink" title="21. 策略模式（Strategy Pattern）"></a>21. 策略模式（Strategy Pattern）</h5><p>策略模式是一种行为型模式，它允许你定义一系列算法，然后将它们封装在一个对象中，以便在运行时动态地选择算法。</p><h5 id="22-模板方法模式（Template-Method-Pattern）"><a href="#22-模板方法模式（Template-Method-Pattern）" class="headerlink" title="22. 模板方法模式（Template Method Pattern）"></a>22. 模板方法模式（Template Method Pattern）</h5><p>模板方法模式是一种行为型模式，它定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现。</p><h5 id="23-访问者模式（Visitor-Pattern）"><a href="#23-访问者模式（Visitor-Pattern）" class="headerlink" title="23. 访问者模式（Visitor Pattern）"></a>23. 访问者模式（Visitor Pattern）</h5><p>访问者模式是一种行为型模式，它允许你将操作从元素的类中分离出来，将它们封装在一个访问者对象中。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用名令</title>
      <link href="/2022/10/25/docker%E5%B8%B8%E7%94%A8%E5%90%8D%E4%BB%A4/"/>
      <url>/2022/10/25/docker%E5%B8%B8%E7%94%A8%E5%90%8D%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>docker使用</p><span id="more"></span><h4 id="docker-基础命令"><a href="#docker-基础命令" class="headerlink" title="docker 基础命令"></a>docker 基础命令</h4><h5 id="安装cocker"><a href="#安装cocker" class="headerlink" title="安装cocker"></a>安装cocker</h5><p>yum install docker</p><h5 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h5><p>service docker start</p><h5 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h5><p>systemctl start docker</p><h5 id="关闭docker"><a href="#关闭docker" class="headerlink" title="关闭docker"></a>关闭docker</h5><p>systemctl stop docker</p><h5 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h5><p>systemctl restart docker</p><h5 id="docker设置随服务启动而自启动"><a href="#docker设置随服务启动而自启动" class="headerlink" title="docker设置随服务启动而自启动"></a>docker设置随服务启动而自启动</h5><p>systemctl enable docker</p><h5 id="查看docker-运行状态"><a href="#查看docker-运行状态" class="headerlink" title="查看docker 运行状态"></a>查看docker 运行状态</h5><p>systemctl status docker</p><h5 id="查看docker-版本号信息"><a href="#查看docker-版本号信息" class="headerlink" title="查看docker 版本号信息"></a>查看docker 版本号信息</h5><p>docker version<br>docker info</p><h4 id="docker-镜像命令"><a href="#docker-镜像命令" class="headerlink" title="docker 镜像命令"></a>docker 镜像命令</h4><p><strong>查看自己服务器中docker 镜像列表</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><strong>搜索镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名</span><br></pre></td></tr></table></figure><p><strong>拉取镜像</strong> </p><p>不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名 </span><br><span class="line">docker pull 镜像名:tag</span><br></pre></td></tr></table></figure><p><strong>删除镜像</strong> ——当前镜像没有被任何容器使用才可以删除</p><h6 id="删除一个"><a href="#删除一个" class="headerlink" title="删除一个"></a>删除一个</h6><p>docker rmi -f 镜像名&#x2F;镜像ID</p><h6 id="删除多个-其镜像ID或镜像用用空格隔开即可"><a href="#删除多个-其镜像ID或镜像用用空格隔开即可" class="headerlink" title="删除多个 其镜像ID或镜像用用空格隔开即可"></a>删除多个 其镜像ID或镜像用用空格隔开即可</h6><p>docker rmi -f 镜像名&#x2F;镜像ID 镜像名&#x2F;镜像ID 镜像名&#x2F;镜像ID</p><h6 id="删除全部镜像-a-意思为显示全部-q-意思为只显示ID"><a href="#删除全部镜像-a-意思为显示全部-q-意思为只显示ID" class="headerlink" title="删除全部镜像  -a 意思为显示全部, -q 意思为只显示ID"></a>删除全部镜像  -a 意思为显示全部, -q 意思为只显示ID</h6><p>docker rmi -f $(docker images -aq)</p><h6 id="强制删除镜像"><a href="#强制删除镜像" class="headerlink" title="强制删除镜像"></a><strong>强制删除镜像</strong></h6><p>docker image rm 镜像名称&#x2F;镜像ID</p><h4 id="docker-容器命令"><a href="#docker-容器命令" class="headerlink" title="docker 容器命令"></a>docker 容器命令</h4><h5 id="查看正在运行容器列表"><a href="#查看正在运行容器列表" class="headerlink" title="查看正在运行容器列表"></a>查看正在运行容器列表</h5><p>docker ps</p><h5 id="查看所有容器-—–包含正在运行-和已停止的"><a href="#查看所有容器-—–包含正在运行-和已停止的" class="headerlink" title="查看所有容器 —–包含正在运行 和已停止的"></a>查看所有容器 —–包含正在运行 和已停止的</h5><p>docker ps -a</p><h5 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h5><p>docker restart 9299415df7f8</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql查询分组报错</title>
      <link href="/2022/10/12/mysql%E6%9F%A5%E8%AF%A2%E5%88%86%E7%BB%84%E6%8A%A5%E9%94%99/"/>
      <url>/2022/10/12/mysql%E6%9F%A5%E8%AF%A2%E5%88%86%E7%BB%84%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>msyql分组查询报错</p><span id="more"></span><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><h6 id="user表数据"><a href="#user表数据" class="headerlink" title="user表数据"></a>user表数据</h6><p><img src="/2022/10/12/mysql%E6%9F%A5%E8%AF%A2%E5%88%86%E7%BB%84%E6%8A%A5%E9%94%99/image-20221014150307645.png" alt="image-20221014150307645"></p><h6 id="love表数据"><a href="#love表数据" class="headerlink" title="love表数据"></a>love表数据</h6><p><img src="/2022/10/12/mysql%E6%9F%A5%E8%AF%A2%E5%88%86%E7%BB%84%E6%8A%A5%E9%94%99/image-20221014150407158-5731051.png" alt="image-20221014150407158"></p><p>使用分组查询sql语句报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">u.<span class="operator">*</span>, GROUP_CONCAT(l.like) <span class="keyword">as</span> likeList,l.id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">`<span class="keyword">user</span>` u</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> love l <span class="keyword">ON</span> u.id <span class="operator">=</span> l.user_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">u.id</span><br></pre></td></tr></table></figure><h5 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h5><p>1055 - Expression #4 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘group_demo.l.id’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode&#x3D;only_full_group_by</p><p>存在未分组中的数据</p><p><strong>一直是这样写的，之前也没遇到这个问题</strong></p><h5 id="探索原因"><a href="#探索原因" class="headerlink" title="探索原因"></a>探索原因</h5><p>在网上一顿搜索后发现这个错误信息和sql_mode中的”only_full_group_by”有关，是Mysql5.7 group by新特性，在5.7版本以后中only_full_group_by这个模式是默认开启的</p><h6 id="查看mysql版本"><a href="#查看mysql版本" class="headerlink" title="查看mysql版本"></a>查看mysql版本</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version() from dual;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/mysql%E6%9F%A5%E8%AF%A2%E5%88%86%E7%BB%84%E6%8A%A5%E9%94%99/image-20221014151321416.png" alt="image-20221014151321416"></p><h6 id="查看sql-mode配置"><a href="#查看sql-mode配置" class="headerlink" title="查看sql_mode配置"></a><strong>查看<code>sql_mode</code>配置</strong></h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@global.sql_mode;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/10/12/mysql%E6%9F%A5%E8%AF%A2%E5%88%86%E7%BB%84%E6%8A%A5%E9%94%99/image-20221014151747981.png" alt="image-20221014151747981"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONLY<span class="built_in">_</span>FULL<span class="built_in">_</span>GROUP<span class="built_in">_</span>BY,STRICT<span class="built_in">_</span>TRANS<span class="built_in">_</span>TABLES,NO<span class="built_in">_</span>ZERO<span class="built_in">_</span>IN<span class="built_in">_</span>DATE,NO<span class="built_in">_</span>ZERO<span class="built_in">_</span>DATE,ERROR<span class="built_in">_</span>FOR<span class="built_in">_</span>DIVISION<span class="built_in">_</span>BY<span class="built_in">_</span>ZERO,NO<span class="built_in">_</span>ENGINE<span class="built_in">_</span>SUBSTITUTION</span><br></pre></td></tr></table></figure><p><font color="red">ONLY_FULL_GROUP_BY</font>是开启的，所以原因是这个</p><h6 id="其他值"><a href="#其他值" class="headerlink" title="其他值"></a>其他值</h6><p>sql_mode常用值如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ONLY_FULL_GROUP_BY:</span><br><span class="line"></span><br><span class="line">对于GROUP BY聚合操作,如果在SELECT中的列,没有在GROUP BY中出现,那么这个SQL是不合法的,因为列不在GROUP BY从句中</span><br><span class="line">NO_AUTO_VALUE_ON_ZERO:</span><br><span class="line">该值影响自增长列的插入。默认设置下,插入0或NULL代表生成下一个自增长值。如果用户 希望插入的值为0,而该列又是自增长的,那么这个选项就有用了。</span><br><span class="line">STRICT_TRANS_TABLES:</span><br><span class="line">在该模式下,如果一个值不能插入到一个事务表中,则中断当前的操作,对非事务表不做限制</span><br><span class="line">NO_ZERO_IN_DATE:</span><br><span class="line">在严格模式下,不允许日期和月份为零</span><br><span class="line">NO_ZERO_DATE:</span><br><span class="line">设置该值,mysql数据库不允许插入零日期,插入零日期会抛出错误而不是警告。</span><br><span class="line">ERROR_FOR_DIVISION_BY_ZERO:</span><br><span class="line">在INSERT或UPDATE过程中,如果数据被零除,则产生错误而非警告。如 果未给出该模式,那么数据被零除时MySQL返回NULL</span><br><span class="line">NO_AUTO_CREATE_USER:</span><br><span class="line">禁止GRANT创建密码为空的用户</span><br><span class="line">NO_ENGINE_SUBSTITUTION:</span><br><span class="line">如果需要的存储引擎被禁用或未编译,那么抛出错误。不设置此值时,用默认的存储引擎替代,并抛出一个异常</span><br><span class="line">PIPES_AS_CONCAT:</span><br><span class="line">将&quot;||&quot;视为字符串的连接操作符而非或运算符,这和Oracle数据库是一样的,也和字符串的拼接函数Concat相类似</span><br><span class="line">ANSI_QUOTES:</span><br><span class="line">启用ANSI_QUOTES后,不能用双引号来引用字符串,因为它被解释为识别符</span><br></pre></td></tr></table></figure><h5 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h5><p>其实报错原因实际是分组语句不规范</p><p><strong>Group By正确的用法</strong><br><strong>myql的group by语法为：</strong><br><strong>select 选取分组中的列 + 聚合函数 from 表名称 group by 分组的列</strong><br><strong>从语法格式来看，是现有分组，在确定检索的列，检索的列只能是参加分组了的列。</strong><br><strong>所以问题中，group by 后的a,b,c是先确定的，而select 后面的字段是可变的</strong></p><p>其他方式一：</p><p>删除sql_mode中的值！！！修改mysql配置my.cnf(windows下面是my.ini)</p><p>方式二：</p><p>通过mysql的any_value()函数，<strong>any_value()会选择被分到同一组的数据里第一条数据的指定列值作为返回数据</strong></p><p>修改sql重新执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">u.*,GROUP_CONCAT(l.like) as likeList,any_value(l.id)</span><br><span class="line">FROM</span><br><span class="line">`user` u</span><br><span class="line">INNER JOIN love l ON u.id = l.user_id </span><br><span class="line">GROUP BY</span><br><span class="line">u.id</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/mysql%E6%9F%A5%E8%AF%A2%E5%88%86%E7%BB%84%E6%8A%A5%E9%94%99/image-20221025164536698.png" alt="image-20221025164536698"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac配置host</title>
      <link href="/2022/08/22/mac%E9%85%8D%E7%BD%AEhost/"/>
      <url>/2022/08/22/mac%E9%85%8D%E7%BD%AEhost/</url>
      
        <content type="html"><![CDATA[<p>mac配置host</p><span id="more"></span><h5 id="修改-hosts"><a href="#修改-hosts" class="headerlink" title="修改 hosts"></a>修改 hosts</h5><p>sudo vi &#x2F;etc&#x2F;hosts</p><h5 id="刷新DNS"><a href="#刷新DNS" class="headerlink" title="刷新DNS"></a>刷新DNS</h5><p>sudo killall -HUP mDNSResponder</p><h5 id="其他版本"><a href="#其他版本" class="headerlink" title="其他版本"></a>其他版本</h5><p>我的mac 系统版本 12.2.1</p><p>各版本命令仅供参考<br>Mac OS X 10.7 – 10.8：sudo killall -HUP mDNSResponder</p><p>Mac OS X 10.5 – 10.6：dscacheutil -flushcache</p><p>Mac OS X 10.4：lookupd -flushcache</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> host </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wireguard使用记录</title>
      <link href="/2022/08/19/wireguard%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/19/wireguard%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>mac wireguard使用记录详解</p><span id="more"></span><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><p>sudo brew install wireguard-tools</p><h5 id="基本配置："><a href="#基本配置：" class="headerlink" title="基本配置："></a>基本配置：</h5><h6 id="创建文件夹-以管理员身份"><a href="#创建文件夹-以管理员身份" class="headerlink" title="创建文件夹 (以管理员身份)"></a>创建文件夹 (以管理员身份)</h6><p>sudo mkdir &#x2F;etc&#x2F;wireguard</p><h6 id="设置文件夹权限-以管理员身份"><a href="#设置文件夹权限-以管理员身份" class="headerlink" title="设置文件夹权限 (以管理员身份)"></a>设置文件夹权限 (以管理员身份)</h6><p>sudo chmod 777  &#x2F;etc&#x2F;wireguard</p><h6 id="切入到创建的目录下"><a href="#切入到创建的目录下" class="headerlink" title="切入到创建的目录下"></a>切入到创建的目录下</h6><p>cd &#x2F;etc&#x2F;wireguard</p><h6 id="生成公钥与私钥"><a href="#生成公钥与私钥" class="headerlink" title="生成公钥与私钥"></a>生成公钥与私钥</h6><p>wg genkey | tee privatekey | wg pubkey &gt; publickey</p><h5 id="vpn配置"><a href="#vpn配置" class="headerlink" title="vpn配置"></a>vpn配置</h5><h6 id="创建虚拟网卡配置文件"><a href="#创建虚拟网卡配置文件" class="headerlink" title="创建虚拟网卡配置文件"></a>创建虚拟网卡配置文件</h6><p>touch wg0.conf  (名字自定义,最好跟其他文件放到一起)</p><h6 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h6><p>wg-quick strip wg0 </p><h6 id="编辑虚拟网卡配置文件内容"><a href="#编辑虚拟网卡配置文件内容" class="headerlink" title="编辑虚拟网卡配置文件内容"></a>编辑虚拟网卡配置文件内容</h6><p>vi wg0.conf（进如你配置文件路径，或者绝对路径）</p><p>示例：</p><p>在wg0.conf文件中写入如下内容，需要注意的是，需要自己修改文件内容，保持可用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address = 10.130.222.3/32</span><br><span class="line">PrivateKey = 客户端的私钥（刚刚生成的privatekey文件的内容）</span><br><span class="line">DNS = 10.130.222.1</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = 服务器的公钥(需要去服务器查看服务器的公钥)</span><br><span class="line">Endpoint = 服务器的物理ip地址:41821</span><br><span class="line">AllowedIPs = 0.0.0.0/0</span><br><span class="line">PersistentKeepalive = 21</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="启动客户端的网卡"><a href="#启动客户端的网卡" class="headerlink" title="启动客户端的网卡"></a>启动客户端的网卡</h5><p>wg-quick up wg0（wg0为你配置的网卡文件名）</p><h5 id="停止网卡cwg-quick-down-wg0"><a href="#停止网卡cwg-quick-down-wg0" class="headerlink" title="停止网卡cwg-quick down wg0"></a>停止网卡cwg-quick down wg0</h5><p>wg-quick down wg0 </p><h5 id="查看所有支持的命令"><a href="#查看所有支持的命令" class="headerlink" title="查看所有支持的命令"></a>查看所有支持的命令</h5><p> wg-quick </p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wireguard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java异常处理</title>
      <link href="/2022/08/10/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/08/10/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>java异常处理详解</p><span id="more"></span><h4 id="一、异常介绍"><a href="#一、异常介绍" class="headerlink" title="一、异常介绍"></a>一、异常介绍</h4><h5 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h5><p>异常是指程序在运行过程中发生的，由于外部问题导致的程序运行异常事件，异常的发生往往会中断程序的运行。在 Java 面向对象的编程语言中，万物都是对象，异常本身也是一个对象，程序发生异常就会产生一个异常对象。</p><h5 id="异常常见原因"><a href="#异常常见原因" class="headerlink" title="异常常见原因"></a>异常常见原因</h5><p>1.java内部异常，也就是java虚拟机自身产生了异常</p><p>2.代码中抛出的异常，例如常见的<font color="red">空指针，数组越界</font></p><p>3.throw我们捕获的异常，可以针对捕获的异常，做一些自定义的处理，比如封装一个有好的提示，或者例如捕获类似超时的异常以后去重新尝试调用</p><h5 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h5><p><img src="/2022/08/10/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20220810113511439-0102516.png" alt="image-20220810113511439"></p><h6 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h6><p><strong>概念：</strong></p><p>1.Throwable是java中所有错误跟异常的顶层类，其他异常类也都是继承自该类。也就是只有当对象是此类或其子类的实例时，才能通过 Java 虚拟机或者 Java throw 语句抛出</p><p>2.Throwable 对象中包含了其线程创建时线程执行堆栈的快照，它还包含了给出有关错误更多信息的消息字符串</p><h6 id="Error"><a href="#Error" class="headerlink" title="Error"></a><strong>Error</strong></h6><p><strong>概念：</strong></p><p>Error 是 Throwable 的子类，Error 是程序运行时无法处理的严重错误。</p><p>按照规范来说，不应该去捕获该异常，你捕获了也什么都做不了。你当前的系统已经有了致命错误，一般指的是 JVM 错误，如堆栈溢出。</p><h6 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h6><p><strong>非运行时异常：</strong></p><p>是在你项目启动或者编译时候，抛出。语法错误，或者是某些配置有问题，一般是比较明确的，你不处理，你项目也跑不起来</p><p><strong>运行时异常：</strong></p><p>最常见的异常，代码运行时异常，如 NullPointerException、IndexOutOfBoundsException 等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般由程序逻辑错误引起，程序应该从逻辑角度尽可能避免这类异常的发生。</p><p>我们一般说的异常处理、捕获，一般就是指就是处理这一块的异常</p><h5 id="一个简单的异常示例"><a href="#一个简单的异常示例" class="headerlink" title="一个简单的异常示例"></a>一个简单的异常示例</h5><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(t1.a);</span><br><span class="line">        System.out.println(t2.a);</span><br><span class="line">        System.out.println(t1.c());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">c</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h6><p>输出t1.a以后t2.a因为t2是一个null实际，所以空指针报错，行数12行，程序也就终止了</p><p><img src="/2022/08/10/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20220810140143928.png" alt="image-20220810140143928"></p><h4 id="三、异常处理机制"><a href="#三、异常处理机制" class="headerlink" title="三、异常处理机制"></a>三、异常处理机制</h4><h5 id="1-常用方式"><a href="#1-常用方式" class="headerlink" title="1.常用方式"></a>1.常用方式</h5><ul><li>使用<strong>try…catch…finally…」</strong> 语句块处理</li><li>在方法中使用 <strong>「throws&#x2F;throw」</strong> 关键词将异常交给方法调用者去处理（尽量不要在最外层抛出）</li></ul><h5 id="2-try…catch…finally…-关键字"><a href="#2-try…catch…finally…-关键字" class="headerlink" title="2.try…catch…finally… 关键字"></a>2.<strong>try…catch…finally… 关键字</strong></h5><h6 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="try"><a href="#try" class="headerlink" title="try"></a>try</h6><ul><li><p>放你要执行的代码</p></li><li><p>如果try顺利执行完没有异常，他会执行你<code>try</code>后面<code>finally</code>中的and<code>finally</code>后面的代码。</p></li><li><p>如果执行抛出异常，他会去匹配<code>catch</code>，执行完<code>catch</code>程序执行<code>finally</code>块</p></li></ul><h6 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h6><ul><li>跟在<code>try</code>块的后面，可以有多个<code>catch</code>块且单个<code>catch</code>可以指定捕获多种类异常</li><li>你应该在这里截止程序，避免程序出现更多问题</li><li>如果<code>try</code>运行没有异常，所有的<code>catch</code>块都会被跳过</li><li>各个<code>catch</code>块是相互独立的，里面变量都是局部变量，不可共享</li><li>匹配方式是顺序的，自上而下</li><li>发生的异常<code>catch</code>匹配不到的话，则会直接执行<code>finally</code>,异常会抛给外层调用方</li><li>注意：一般外层例如Controller层，catch最后一层建议直接多捕获一层，直接捕获超类<code>Exception</code>或者<code>RuntimeException</code>(运行时异常)用来兜底。</li></ul><h6 id="finally"><a href="#finally" class="headerlink" title="**finally **"></a>**finally **</h6><ul><li>finally块不是必须的，通常是可选的</li><li>无论异常是否发生，异常是否匹配被处理，finally中的代码都会执行。</li><li>inally块不管异常是否发生，只要对应的try执行了，则它一定也执行。只有一种方法让finally块不执行：<strong>「System.exit()」</strong></li></ul><h5 id="3-try…catch示例"><a href="#3-try…catch示例" class="headerlink" title="3.try…catch示例"></a>3.try…catch示例</h5><h6 id="示例1代码正常执行无异常"><a href="#示例1代码正常执行无异常" class="headerlink" title="示例1代码正常执行无异常"></a>示例1代码正常执行无异常</h6><p>执行顺序：</p><p>try&gt;finally&gt;外层代码</p><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try中代码&quot;</span>);</span><br><span class="line">            <span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">            <span class="type">Test</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            System.out.println(t1.a);</span><br><span class="line"><span class="comment">//            System.out.println(t2.a);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch空指针异常捕获&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获所有运行时Exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功执行&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2022/08/10/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20220810144809934.png" alt="image-20220810144809934"></p><h6 id="示例2代码正常执行被捕获"><a href="#示例2代码正常执行被捕获" class="headerlink" title="示例2代码正常执行被捕获"></a>示例2代码正常执行被捕获</h6><p>执行顺序：</p><p>try&gt;catch&gt;finally</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try中代码&quot;</span>);</span><br><span class="line">            <span class="type">Test</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            System.out.println(t2.a);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch空指针异常捕获&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获所有运行时Exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2022/08/10/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20220810145525658.png" alt="image-20220810145525658"></p><h6 id="示例3代码调用外层捕获"><a href="#示例3代码调用外层捕获" class="headerlink" title="示例3代码调用外层捕获"></a>示例3<strong>代码调用外层捕获</strong></h6><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch空指针异常捕获&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch数组越界异常捕获&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获所有运行时Exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;入口类finally执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">c</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(<span class="string">&quot;一&quot;</span>);</span><br><span class="line">            System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch空指针异常捕获&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法c（）finally执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;c&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/08/10/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20220810151043622.png" alt="image-20220810151043622"></p><p>分析：</p><p>main入口调用的<code>c()</code>这个方法，很明显会抛出数据越界异常。但是方法<code>c（）</code>中的<code>catch</code>块匹配不到报错的异常，所以只执行了<code>finally</code>块，抛出的异常由调用入口匹配</p><h5 id="4-throws-throw-关键字"><a href="#4-throws-throw-关键字" class="headerlink" title="4.throws&#x2F;throw 关键字"></a>4.<strong>throws&#x2F;throw 关键字</strong></h5><h6 id="throws"><a href="#throws" class="headerlink" title="throws"></a><strong>throws</strong></h6><ul><li>向外抛出异常，抛向调用方</li><li>写在接口类参数的后面，后面需要指定抛出的异常可以是多个</li><li>throws 也是一种处理异常的方式，它不同于try…catch…finally…，throws 关键字仅仅是将方法中可能出现的异常向调用者抛出，而自己则不具体处理。</li><li>你抛出的异常，你的调用方必须要处理你抛出的异常，当然他也可以抛出去，给他的调用方。你不处理编译是不通过的，直到最外层。没其他接口调用，前端调用的话，抛给前端，再到用户。</li></ul><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">c</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException, IOException &#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="throw"><a href="#throw" class="headerlink" title="throw"></a><strong>throw</strong></h6><ul><li>我们也可以通过 throw 语句手动显式的抛出一个异常，throw语句的后面必须是一个异常对象</li></ul><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;抛出异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、自定义异常"><a href="#四、自定义异常" class="headerlink" title="四、自定义异常"></a>四、自定义异常</h4><p>Java 的异常机制中所定义的所有异常不可能预见所有可能出现的错误，某些特定的情境下，则需要我们自定义异常类型来向上报告某些错误信息。</p><h5 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h5><p>异常本身就是一个类，你可以选择继承 Throwable，Exception 或它们的子类。</p><p><strong>按照规范，自定义的异常应该总是包含如下的构造函数：</strong></p><ul><li>一个无参构造函数</li><li>一个带有String参数的构造函数，并传递给父类的构造函数。</li><li>一个带有String参数和Throwable参数，并都传递给父类构造函数</li><li>一个带有Throwable 参数的构造函数，并传递给父类的构造函数。</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyError</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyError</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyError</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyError</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyError</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MyError &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyError</span>(<span class="string">&quot;长得太丑了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/2022/08/10/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20220810160136986.png" alt="image-20220810160136986"></p><h4 id="五、异常的注意事项"><a href="#五、异常的注意事项" class="headerlink" title="五、异常的注意事项"></a>五、<strong>异常的注意事项</strong></h4><p>1.当子类重写父类带有<code>throws</code>声明的函数的时候，不可大于父类可处理的异常</p><p>2.Java程序可以是多线程的。每一个线程都是一个独立的执行流，独立的函数调用栈。如果程序只有一个线程，那么没有被任何代码处理的异常 会导致程序终止。如果是多线程的，那么没有被任何代码处理的异常仅仅会导致异常所在的线程结束。</p><p>3.不应该把异常吐给用户，这是无意义的。兜底捕获异常返回一个友好提示才是最好的选择。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring事务@Transactional详解</title>
      <link href="/2022/08/09/spring%E4%BA%8B%E5%8A%A1-Transactional-%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/08/09/spring%E4%BA%8B%E5%8A%A1-Transactional-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>本地事务之Transactional详解</p><span id="more"></span><h5 id="前言"><a href="#前言" class="headerlink" title="&#x3D;&#x3D;前言&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;前言&#x3D;&#x3D;</strong></h5><p><font color="blue">1.spring本地事务是作用于本地的，不支持跨库跨系统</font></p><p><font color="red">2.开始之前，建议先学习mysql事务</font><br>点击跳转-&gt;<a href="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/" title="mysql事务">mysql事务</a></p><h5 id="Transactional事务"><a href="#Transactional事务" class="headerlink" title="Transactional事务"></a>Transactional事务</h5><p>1.@Transactional是声明式事务管理 编程中使用的注解</p><p>2.@Transactional 实质是使用了 JDBC 的事务来进行事务控制的</p><p>3.@Transactional 基于 Spring 的动态代理的机制</p><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><p>Transactional实现是通过<code>AOP</code>实现的</p><h6 id="事务开始时："><a href="#事务开始时：" class="headerlink" title="事务开始时："></a>事务开始时：</h6><p>事务开始时，生成一个代理的connection对象，并将其放入一个容器中，客户代码都应该使用该 connection 连接数据库</p><h5 id="添加位置"><a href="#添加位置" class="headerlink" title="添加位置"></a>添加位置</h5><p>1.接口实现类</p><p>2.public修饰的方法上</p><h5 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a><strong>事务的隔离级别</strong></h5><p>解释：是指若干个并发的事务之间的隔离程度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. @Transactional(isolation = Isolation.READ_UNCOMMITTED)：读取未提交数据(会出现脏读,</span><br><span class="line"> 不可重复读) 基本不使用</span><br><span class="line"> </span><br><span class="line">2. @Transactional(isolation = Isolation.READ_COMMITTED)：读取已提交数据(会出现不可重复读和幻读)</span><br><span class="line"> </span><br><span class="line">3. @Transactional(isolation = Isolation.REPEATABLE_READ)：可重复读(会出现幻读)</span><br><span class="line"> </span><br><span class="line">4. @Transactional(isolation = Isolation.SERIALIZABLE)：串行化</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excal导出字体问题大坑</title>
      <link href="/2022/08/05/excal%E5%AF%BC%E5%87%BA%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98%E5%A4%A7%E5%9D%91/"/>
      <url>/2022/08/05/excal%E5%AF%BC%E5%87%BA%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98%E5%A4%A7%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>easyExcal导出无字体大坑</p><span id="more"></span><p>使用easyExcal做了一个导出，返回流的方式下载</p><p>在本地测试返回是ok的发布了线上就挂了，没有任何返回 也没有报错</p><p>试了很多种方案，没法解决 以为是服务器问题，所以尝试写到远程oss里，但是也不行</p><p>所以问题在代码执行时   写了78个导出的demo最后定位到 是<font color="red">jdk缺少了所需要的字体导致</font></p><p>本地：</p><p><img src="/2022/08/05/excal%E5%AF%BC%E5%87%BA%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98%E5%A4%A7%E5%9D%91/843A55E6-648C-4545-80D1-ABC02BE14C50.png" alt="843A55E6-648C-4545-80D1-ABC02BE14C50"></p><p>线上</p><p><img src="/2022/08/05/excal%E5%AF%BC%E5%87%BA%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98%E5%A4%A7%E5%9D%91/image-20220805112930051.png" alt="image-20220805112930051"></p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><p>安装字体</p><ul><li><p>安装字体（推荐）</p><ul><li>看下服务器是否安装了字体，jdk8字体需要自己安装请安装字体：dejavu-sans-fonts 和 fontconfig 在dockerfile中增加字体安装命令： <code>RUN yum install dejavu-sans-fonts fontconfig -y</code></li><li>普通的线上环境直接运行： <code>yum install dejavu-sans-fonts fontconfig -y</code></li></ul></li><li><p>开启内存处理模式（不推荐，1W数据以内可以考虑，大了很容易OOM）</p></li></ul><pre><code class="java">          EasyExcel          .write(fileName, DemoData.class)          // 核心这个配置 开始内存处理模式          .inMemory(Boolean.TRUE)          .sheet(&quot;模板&quot;)          .doWrite(data());</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务</title>
      <link href="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>MySQL事务and使用方式总结</p><span id="more"></span><h4 id="一、Mysql-事务的概念"><a href="#一、Mysql-事务的概念" class="headerlink" title="一、Mysql 事务的概念"></a>一、Mysql 事务的概念</h4><p>  Mysql 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中， 要删除一个人员，既需要删除人员的基本资料，又需要删除和该人员相关的信息，如信箱， 文章等等。这样，这些数据库操作语句就构成一个事务！</p><p>事务是一种机制、一个操作序列，包含了一组数据库操作命令，并且把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行。<br>事务是一个不可分割的工作逻辑单元，在数据库系统上执行并发操作时，事务是最小的控制单元。<br>事务适用于多用户同时操作的数据库系统的场景，如银行、保险公司及证券交易系统等等。<br>事务是通过事务的整体性以保证数据的一致性。<br>  简单来说，所谓事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</p><h4 id="二、事务的特性（ACID）"><a href="#二、事务的特性（ACID）" class="headerlink" title="二、事务的特性（ACID）"></a>二、事务的特性（ACID）</h4><h5 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1.原子性"></a>1.原子性</h5><h6 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h6><p>每个事务都是单独的不可再分的工作单位，要么整个事务都操作成功，要么全部失败</p><h6 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h6><p>  A给B转帐100元钱的时候只执行了扣款语句，就提交了，此时如果突然断电，A账号已经发生了扣款，B账号却没收到加款，在生活中就会引起纠纷。这种情况就需要事务的原子性来保证事务要么都执行，要么就都不执行。</p><h5 id="2-一致性"><a href="#2-一致性" class="headerlink" title="2.一致性"></a>2.一致性</h5><h6 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h6><p>事务在执行前后，数据库的数据完整性没有被破坏，即事务执行前后数据保持一致</p><p>即：</p><p>事务执行前数据保持一致</p><p>事务执行中数据可能不一致</p><p>事务执行后数据保持一致</p><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><p>  对银行转帐事务，不管事务成功还是失败，应该保证事务结束后表中A和B的存款总额跟事务执行前一致。</p><h5 id="3-隔离性"><a href="#3-隔离性" class="headerlink" title="3.隔离性"></a>3.隔离性</h5><p>概念：</p><p>事务之前互不影响，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。</p><h5 id="4-持久性"><a href="#4-持久性" class="headerlink" title="4.持久性"></a>4.持久性</h5><h6 id="概念：-2"><a href="#概念：-2" class="headerlink" title="概念："></a>概念：</h6><p>在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中</p><h4 id="三、事务之间的相互影响"><a href="#三、事务之间的相互影响" class="headerlink" title="三、事务之间的相互影响"></a>三、事务之间的相互影响</h4><h5 id="1-脏读"><a href="#1-脏读" class="headerlink" title="1.脏读"></a>1.脏读</h5><h6 id="概念：-3"><a href="#概念：-3" class="headerlink" title="概念："></a>概念：</h6><p>脏读是指读到了其他事物未提交的数据，未提交的事物可能会回滚。然后你读到的数据会跟数据库实际数据不一致，产生脏读。</p><h6 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h6><p>比如事务B执行过程中修改了数据X,在未提交前,事务A读取了X,而事务B却回滚了,这样事务A就形成了脏读。 也就是说,当前事务读到的数据是别的事务想要修改成为的但是没有修改成功的数据。</p><h5 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2.不可重复读"></a>2.不可重复读</h5><h6 id="概念：-4"><a href="#概念：-4" class="headerlink" title="概念："></a>概念：</h6><p>一个事物内多次查询出来的数据不一致。原因：查询前后间隔有其他事物提交，更改了数据</p><h6 id="案例：-2"><a href="#案例：-2" class="headerlink" title="案例："></a>案例：</h6><p>  事务A第一次查询得到一行记录row1，事务B提交修改后，事务A第二次查询得到row1，但列内容发生了变化。</p><h5 id="3-幻读"><a href="#3-幻读" class="headerlink" title="3.幻读"></a>3.幻读</h5><h6 id="概念：-5"><a href="#概念：-5" class="headerlink" title="概念："></a>概念：</h6><p>前后多次读取数据不一致，一个事物对表中的数据修改涉及所有的行。在事物提交前，有另一个事物在表中插入数据，作前一个事务的用户会发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p><h6 id="案列："><a href="#案列：" class="headerlink" title="案列："></a>案列：</h6><p>  假设事务A对某些行的内容作了更改，但是还未提交，此时事务B插入了与事务A更改前的记录相同的记录行，并且在事务A提交之前先提交了，而这时，在事务A中查询，会发现好像刚刚的更改对于某些数据未起作用，但其实是事务B刚插入进来的，让用户感觉很魔幻，感觉出现了幻觉，这就叫幻读。</p><h5 id="4-丢失更新"><a href="#4-丢失更新" class="headerlink" title="4.丢失更新"></a>4.丢失更新</h5><h6 id="概念：-6"><a href="#概念：-6" class="headerlink" title="概念："></a>概念：</h6><p>两个事务同时读取同一条记录，A 先修改记录，B 也修改记录（B 不知道 A 修改过），B 提交数据后 B 的修改结果覆盖了 A 的修改结果。</p><h6 id="案例：-3"><a href="#案例：-3" class="headerlink" title="案例："></a>案例：</h6><p>案列<br>A 30 -&gt;40 事务先完成<br>B 30 -&gt;50 事务后完成<br>B的事务结果会覆盖A的事务结果，最终值为50</p><h4 id="四、事务的隔离级别"><a href="#四、事务的隔离级别" class="headerlink" title="四、事务的隔离级别"></a>四、事务的隔离级别</h4><h5 id="1-事物隔离级别分类"><a href="#1-事物隔离级别分类" class="headerlink" title="1.事物隔离级别分类"></a>1.事物隔离级别分类</h5><ul><li>&#x3D;&#x3D;read uncommitted&#x3D;&#x3D;（<code>==**未提交读**==</code>）：读取尚未提交的数据 — 会产生脏读</li></ul><p>​       注：可以读到事务未提交的变更，会产生脏读问题</p><ul><li><p>&#x3D;&#x3D;read committed&#x3D;&#x3D;（<code>==提交读==</code>）：读取已经提交的数据 — 可以解决脏读</p>   <!--只能读取到已经提交的数据。Oracle 等多数数据库默认都是该级别。--></li><li><p>&#x3D;&#x3D;repeatable read&#x3D;&#x3D;（<code>==可重复度==</code>）：重读读取 — 可以解决脏读和不可重复读（mysql 默认）</p></li></ul><p>​       注：可重复读。无论其他事务是否修改并提交了数据，在这个事务中看到的数据值始终不受其他事务影响。</p><ul><li><p>&#x3D;&#x3D;serializable&#x3D;&#x3D;（<code>串行化</code>）可以解决脏读，不可重复读，幻读-相当于锁表的表锁</p><p>注：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。</p></li></ul><h5 id="2-事务隔离级别作用范围"><a href="#2-事务隔离级别作用范围" class="headerlink" title="2.事务隔离级别作用范围"></a>2.事务隔离级别作用范围</h5><ul><li>全局级：对所有的会话有效</li><li>会话级：只对当前的会话有效</li></ul><h5 id="3-1设置全局隔离级别"><a href="#3-1设置全局隔离级别" class="headerlink" title="3.1设置全局隔离级别"></a>3.1设置全局隔离级别</h5><h5 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h5><h6 id="1-读未提交"><a href="#1-读未提交" class="headerlink" title="1.读未提交"></a>1.读未提交</h6><p>set global transaction isolation level read uncommitted;</p><h6 id="2-读提交"><a href="#2-读提交" class="headerlink" title="2.读提交"></a>2.读提交</h6><p>set global transaction isolation level read committed;</p><h6 id="3-重复读"><a href="#3-重复读" class="headerlink" title="3.重复读"></a>3.重复读</h6><p>set global transaction isolation level repeatable read;</p><h6 id="4-串行化"><a href="#4-串行化" class="headerlink" title="4.串行化"></a>4.串行化</h6><p>set global transaction isolation level serializable;</p><h5 id="当前会话"><a href="#当前会话" class="headerlink" title="当前会话"></a>当前会话</h5><p>设置当前会话隔离级别</p><p>global   替换为  session</p><h5 id="3-2查看当前隔离级别"><a href="#3-2查看当前隔离级别" class="headerlink" title="3.2查看当前隔离级别"></a>3.2查看当前隔离级别</h5><h5 id="当前会话隔离级别"><a href="#当前会话隔离级别" class="headerlink" title="当前会话隔离级别"></a>当前会话隔离级别</h5><p>select @@tx_isolation;<!--8.0之前版本--></p><p>select @@transaction_isolation;<!--8.0以后版本--></p><h4 id="五、事务控制语句"><a href="#五、事务控制语句" class="headerlink" title="五、事务控制语句"></a>五、事务控制语句</h4><h5 id="事务开启"><a href="#事务开启" class="headerlink" title="事务开启"></a>事务开启</h5><p> <code>BEGIN ｜ START TRANSACTION</code></p><p>显式地开启一个事务。</p><h5 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h5><p><code>COMMIT ｜ COMMIT WORK：</code></p><p>提交事务，并使已对数据库进行的所有修改变为永久性的。</p><h5 id="回滚事务"><a href="#回滚事务" class="headerlink" title="回滚事务"></a>回滚事务</h5><p><code>ROLLBACK ｜ ROLLBACK WORK</code></p><p>回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。</p><h5 id="标记回滚点"><a href="#标记回滚点" class="headerlink" title="标记回滚点"></a>标记回滚点</h5><p><code>SAVEPOINT S1</code></p><p>使用 SAVEPOINT 允许在事务中创建一个回滚点，一个事务中可以有多个 SAVEPOINT。”S1” 代表回滚点名称。</p><h5 id="回滚到回滚点"><a href="#回滚到回滚点" class="headerlink" title="回滚到回滚点"></a>回滚到回滚点</h5><p><code>ROLLBACK TO [SAVEPOINT] S1</code></p><p>把事务回滚到标记点。</p><h4 id="六、事务操作示例"><a href="#六、事务操作示例" class="headerlink" title="六、事务操作示例"></a>六、事务操作示例</h4><h5 id="1-创建测试数据库"><a href="#1-创建测试数据库" class="headerlink" title="1.创建测试数据库"></a>1.创建测试数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE info ( id INT ( 10 ) PRIMARY KEY NOT NULL, NAME VARCHAR ( 40 ), money DOUBLE );</span><br><span class="line"></span><br><span class="line">INSERT INTO info</span><br><span class="line">VALUES</span><br><span class="line">( 1, &#x27;A&#x27;, 1000 );</span><br><span class="line">INSERT INTO info</span><br><span class="line">VALUES</span><br><span class="line">( 2, &#x27;B&#x27;, 1000 );</span><br></pre></td></tr></table></figure><h5 id="2-测试创建提交事务"><a href="#2-测试创建提交事务" class="headerlink" title="2.测试创建提交事务"></a>2.测试创建提交事务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin;</span><br><span class="line">update info set money= money - 100 where name=&#x27;A&#x27;;</span><br><span class="line">select * from info;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>因为是在一个事务里 ，查询到的结果就是update后的结果</p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809152501444.png" alt="image-20220809152501444"></p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809152841859.png" alt="image-20220809152841859"></p><h5 id="3-测试回滚事务"><a href="#3-测试回滚事务" class="headerlink" title="3.测试回滚事务"></a>3.测试回滚事务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">update info set money= money + 100 where name=&#x27;A&#x27;;</span><br><span class="line"> select * from info;</span><br><span class="line">rollback;</span><br><span class="line">select * from info</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>结果1因为是在事务里面，查到了update的数据。<code>rollback</code>回滚会结束事务，所以结果2查到的是回滚后，操作前原本的数据</p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809153259333.png" alt="image-20220809153259333"></p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809153823426.png" alt="image-20220809153823426"></p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809153835281.png" alt="image-20220809153835281"></p><h5 id="4-测试多点回滚"><a href="#4-测试多点回滚" class="headerlink" title="4.测试多点回滚"></a>4.测试多点回滚</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">SELECT * from info;</span><br><span class="line">update info set money= money + 100 where name=&#x27;A&#x27;;</span><br><span class="line">select * from info;</span><br><span class="line">savepoint gs1;</span><br><span class="line">update info set money= money + 100 where name=&#x27;B&#x27;;</span><br><span class="line"> select * from info;</span><br><span class="line">savepoint gs2;</span><br><span class="line">insert into info values(3,&#x27;C&#x27;,1000);</span><br><span class="line">select * from info;</span><br><span class="line">rollback to gs1;</span><br><span class="line">select * from info;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809155555306.png" alt="image-20220809155555306"></p><p>结果1:原数据</p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809155618386.png" alt="image-20220809155618386"></p><p>结果2:数据update name&#x3D;A 加100的结果</p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809155651167.png" alt="image-20220809155651167"></p><p>结果3:数据update name&#x3D;B 加100的结果</p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809155716177.png" alt="image-20220809155716177"></p><p>结果4:insert语句后的结果</p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809155726646.png" alt="image-20220809155726646"></p><p>结果5:回滚到节点gs1的结果</p><p><img src="/2022/07/26/mysql%E4%BA%8B%E5%8A%A1/image-20220809155735490.png" alt="image-20220809155735490"></p><h4 id="七、事务提交方式"><a href="#七、事务提交方式" class="headerlink" title="七、事务提交方式"></a>七、事务提交方式</h4><h5 id="查看当前提交方式"><a href="#查看当前提交方式" class="headerlink" title="查看当前提交方式"></a>查看当前提交方式</h5><p>SHOW VARIABLES LIKE ‘AUTOCOMMIT’;</p><h5 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h5><p>SET AUTOCOMMIT&#x3D;1;</p><h5 id="手动提交"><a href="#手动提交" class="headerlink" title="手动提交"></a>手动提交</h5><p>SET AUTOCOMMIT&#x3D;1;</p><p>注：如果没有开启自动提交，当前会话连接的 mysql 的所有操作都会当成一个事务直到你输入 rollback|commit；当前事务才算结束。当前事务结束前新的 mysql 连接时无法读取到任何当前会话的操作结果。<br>如果开起了自动提交，mysql 会把每个 sql 语句当成一个事务，然后自动的 commit。<br>当然无论开启与否，begin; commit|rollback; 都是独立的事务。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库索引</title>
      <link href="/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>MySQL索引总结</p><span id="more"></span><h4 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h4><p>官方介绍索引是帮助MySQL高效获取数据的数据结构。更通俗的说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度。</p><p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往是存储在磁盘上的文件中的（可能存储在单独的索引文件中，也可能和数据一起存储在数据文件中）。</p><p>我们通常所说的索引，包括聚集索引、覆盖索引、组合索引、前缀索引、唯一索引等，没有特别说明，默认都是使用B+树结构组织（多路搜索树，并不一定是二叉的）的索引</p><h4 id="索引的优势和劣势"><a href="#索引的优势和劣势" class="headerlink" title="索引的优势和劣势"></a>索引的优势和劣势</h4><h6 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h6><p>可以提高数据检索的效率，降低数据库的IO成本，类似于书的目录。</p><p>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</p><p>被索引的列会自动进行排序，包括【单列索引】和【组合索引】，只是组合索引的排序要复杂一些。<br>如果按照索引列的顺序进行排序，对应order by语句来说，效率就会提高很多。</p><h6 id="劣势："><a href="#劣势：" class="headerlink" title="劣势："></a>劣势：</h6><p>索引会占据磁盘空间</p><p>索引虽然会提高查询效率，但是会降低更新表的效率。比如每次对表进行增删改操作，MySQL不仅要保存数据，还有保存或者更新对应的索引文件。</p><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><h5 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h5><p>索引中的列值必须是唯一的，且不允许有空值</p><h5 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h5><p>允许定义索引的列存在重复的值或者是空值</p><h6 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h6><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure><p>唯一索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX indexName <span class="keyword">ON</span> mytable(username(length)) </span><br></pre></td></tr></table></figure><h6 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX [indexName] <span class="keyword">ON</span> mytable; </span><br></pre></td></tr></table></figure><h5 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h5><h5 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h5><p>在文本类型char,varchar，text类型上创建索引时，可以指定索引列的长度，但是数值类型索引不能指定</p><h5 id="其他（索引作用数量分类）"><a href="#其他（索引作用数量分类）" class="headerlink" title="其他（索引作用数量分类）"></a>其他（索引作用数量分类）</h5><p>1.单列索引</p><p>2.组合索引<!-- 组合索引使用要遵循最左匹配原则 --></p><h4 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h4><p><strong>hash表</strong></p><p>hash表，heshMap，TreeMap就是Hash表结构，以键值对的方式存储数据。我们使用hash表存储数据Key可以存储索引列，Value可以存储记录或者磁盘地址。Hash表在查询等值的效率很高，但是不支持范围快速查找。</p><p><strong>二叉树</strong></p><p><img src="/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/image-20220726104909153-8803751.png" alt="image-20220726104909153"></p><p><strong>二叉树的特点</strong>：每个节点最多有两个分叉，左分叉的数小于右分叉</p><h5 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h5><p>平衡二叉树是采用二分法思维，平衡二叉查找树除了具备二叉树的特点，最主要的特征是树的左右两个子树的层级最多相差1。在插入删除数据时通过左旋&#x2F;右旋操作保持二叉树的平衡，不会出现左子树很高、右子树很矮的情况。</p><p><img src="/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/image-20220726105438358-8804082.png" alt="image-20220726105438358"></p><h5 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h5><p>MySQL的数据是存储在磁盘文件中的，查询处理数据时，需要先把磁盘中的数据加载到内存中，磁盘IO 操作非常耗时，所以我们优化的重点就是尽量减少磁盘 IO 操作。访问二叉树的每个节点就会发生一次IO，如果想要减少磁盘IO操作，就需要尽量降低树的高度。那如何降低树的高度呢？</p><p><img src="/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/image-20220726110538703-8804740.png" alt="image-20220726110538703"></p><p><strong>可以看到B+树可以保证等值和范围查询的快速查找，MySQL的索引就采用了B+树的数据结构。</strong></p><p>B<strong>树待优化点待</strong></p><p>B树不支持范围查询的快速查找，你想想这么一个情况如果我们想要查找10和35之间的数据，查找到15之后，需要回到根节点重新遍历查找，需要从根节点进行多次遍历，查询效率有待提高。</p><p>如果data存储的是行记录，行的大小随着列数的增多，所占空间会变大。这时，一个页中可存储的数据量就会变少，树相应就会变高，磁盘IO次数就会变大。</p><h5 id="B-树：改造B树"><a href="#B-树：改造B树" class="headerlink" title="B+树：改造B树"></a>B+树：改造B树</h5><p>B+树，作为B树的升级版，在B树基础上，MySQL在B树的基础上继续改造，使用B+树构建索引。B+树和B树最主要的区别在于<strong>非叶子节点是否存储数据</strong>的问题</p><p>跟B<strong>树的区别</strong></p><p>B树：非叶子节点和叶子节点都会存储数据。</p><p>B+树：只有叶子节点才会存储数据，非叶子节点至存储键值。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。</p><p><img src="/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/image-20220726111117603-8805079.png" alt="image-20220726111117603"></p><h4 id="Mysql索引实现"><a href="#Mysql索引实现" class="headerlink" title="Mysql索引实现"></a>Mysql索引实现</h4><h5 id="Mylsam索引"><a href="#Mylsam索引" class="headerlink" title="Mylsam索引"></a>Mylsam索引</h5><h6 id="主键索引-1"><a href="#主键索引-1" class="headerlink" title="主键索引"></a>主键索引</h6><p><img src="/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/image-20220726113319631.png" alt="image-20220726113319631"></p><h6 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h6><p>在 MyISAM 中,辅助索引和主键索引的结构是一样的，没有任何区别，叶子节点的数据存储的都是行记录的磁盘地址。只是主键索引的键值是唯一的，而辅助索引的键值可以重复。</p><p>查询数据时，由于辅助索引的键值不唯一，可能存在多个拥有相同的记录，所以即使是等值查询，也需要按照范围查询的方式在辅助索引树中检索数据。</p><h5 id="InnoDB索引"><a href="#InnoDB索引" class="headerlink" title="InnoDB索引"></a>InnoDB索引</h5><h6 id="主键索引（聚簇索引）"><a href="#主键索引（聚簇索引）" class="headerlink" title="主键索引（聚簇索引）"></a>主键索引（聚簇索引）</h6><p>每个InnoDB表都有一个聚簇索引 ，聚簇索引使用B+树构建，叶子节点存储的数据是整行记录。一般情况下，聚簇索引等同于主键索引，当一个表没有创建主键索引时，InnoDB会自动创建一个ROWID字段来构建聚簇索引。InnoDB创建索引的具体规则如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在表上定义主键PRIMARY KEY，InnoDB将主键索引用作聚簇索引。</span><br><span class="line">如果表没有定义主键，InnoDB会选择第一个不为NULL的唯一索引列用作聚簇索引。</span><br><span class="line">如果以上两个都没有，InnoDB 会使用一个6 字节长整型的隐式字段 ROWID字段构建聚簇索引。该ROWID字段会在插入新行时自动递增。</span><br></pre></td></tr></table></figure><h6 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h6><p><img src="/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/image-20220726113816915.png" alt="image-20220726113816915"></p><p><strong>最左匹配原则：</strong></p><p>最左前缀匹配原则和联合索引的索引存储结构和检索方式是有关系的。</p><p>在组合索引树中，最底层的叶子节点按照第一列a列从左到右递增排列，但是b列和c列是无序的，b列只有在a列值相等的情况下小范围内递增有序，而c列只能在a，b两列相等的情况下小范围内递增有序。</p><p>就像上面的查询，B+树会先比较a列来确定下一步应该搜索的方向，往左还是往右。如果a列相同再比较b列。但是如果查询条件没有a列，B+树就不知道第一步应该从哪个节点查起。</p><p>可以说创建的idx_abc(a,b,c)索引，相当于创建了(a)、（a,b）（a,b,c）三个索引。</p><h4 id="避免回表"><a href="#避免回表" class="headerlink" title="避免回表"></a>避免回表</h4><p>在InnoDB的存储引擎中，使用辅助索引查询的时候，因为辅助索引叶子节点保存的数据不是当前记录的数据而是当前记录的主键索引，索引如果需要获取当前记录完整数据就必然需要根据主键值从主键索引继续查询。这个过程我们成位回表。想想回表必然是会消耗性能影响性能。那如何避免呢？</p><p>使用索引覆盖，举个例子：现有User表（id(PK),name(key),sex,address,hobby…）</p><p>如果在一个场景下，select id,name,sex from user where name &#x3D;’zhangsan’;这个语句在业务上频繁使用到，而user表的其他字段使用频率远低于它，在这种情况下，如果我们在建立 name 字段的索引的时候，不是使用单一索引，而是使用联合索引（name，sex）这样的话再执行这个查询语句是不是根据辅助索引查询到的结果就可以获取当前语句的完整数据。这样就可以有效地避免了回表再获取sex的数据。</p><p>这里就是一个典型的使用覆盖索引的优化策略减少回表的情况。</p><p><strong>联合索引的使用</strong><br>联合索引，在建立索引的时候，尽量在多个单列索引上判断下是否可以使用联合索引。联合索引的使用不仅可以节省空间，还可以更容易的使用到索引覆盖。试想一下，索引的字段越多，是不是更容易满足查询需要返回的数据呢。比如联合索引（a_b_c），是不是等于有了索引：a，a_b，a_b_c三个索引，这样是不是节省了空间，当然节省的空间并不是三倍于（a，a_b，a_b_c）三个索引，因为索引树的数据没变，但是索引data字段的数据确实真实的节省了。</p><p>联合索引的创建原则，在创建联合索引的时候因该把频繁使用的列、区分度高的列放在前面，频繁使用代表索引利用率高，区分度高代表筛选粒度大，这些都是在索引创建的需要考虑到的优化场景，也可以在常需要作为查询返回的字段上增加到联合索引中，如果在联合索引上增加一个字段而使用到了覆盖索引，那我建议这种情况下使用联合索引。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库锁</title>
      <link href="/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81/"/>
      <url>/2022/07/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p><strong>mysql锁详解（死锁，表锁，行锁，页锁，共享锁，排他锁等）</strong>****</p><span id="more"></span><h4 id="MySQL锁概述"><a href="#MySQL锁概述" class="headerlink" title="MySQL锁概述"></a>MySQL锁概述</h4><p>锁是计算机协调多个进程或线程并发访问某一个资源的机制，在数据库中，除传统的计算资源（CPU、RAM、I&#x2F;O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所在有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h4 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h4><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><h6 id="1-什么是死锁"><a href="#1-什么是死锁" class="headerlink" title="1.什么是死锁"></a>1.什么是死锁</h6><p>所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进</p><h6 id="2-产生死锁的必要条件"><a href="#2-产生死锁的必要条件" class="headerlink" title="2.产生死锁的必要条件"></a>2.产生死锁的必要条件</h6><p>（1）互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源<br>（2）请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放<br>（3）不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放</p><p>（4）环路等待条件：是指进程发生死锁后，必然存在一个进程–资源之间的环形链</p><h6 id="3-处理死锁的基本方法"><a href="#3-处理死锁的基本方法" class="headerlink" title="3.处理死锁的基本方法"></a>3.<strong>处理死锁的基本方法</strong></h6><p>(1)预防死锁：通过设置一些限制条件，去破坏产生死锁的必要条件<br>(2)避免死锁：在资源分配过程中，使用某种方法避免系统进入不安全的状态，从而避免发生死锁<br>(3)检测死锁：允许死锁的发生，但是通过系统的检测之后，采取一些措施，将死锁清除掉<br>(4)解除死锁：该方法与检测死锁配合使用</p><p>3.1死锁检测<br>Jstack命令</p><p>jstack是java虚拟机自带的一种堆栈跟踪工具。jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息。 Jstack工具可以用于生成java虚拟机当前时刻的线程快照。线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。 线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。</p><h6 id="4-死锁示例"><a href="#4-死锁示例" class="headerlink" title="4.死锁示例"></a>4.<strong>死锁示例</strong></h6><p>（1）创建表<code>test</code>,插入id为1跟2的两条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span> (<span class="number">1</span>,&quot;tsst1&quot;)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span> (<span class="number">2</span>,&quot;tsst2&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）开启事务</p><p><code>for update</code>  加锁</p><p>InnoDB引擎默认加的是行锁，但是当查询的条件没有携带主键，或者是这条数据不存在的时候就会改为表锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- session1 </span></span><br><span class="line"><span class="keyword">begin</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">for</span> <span class="keyword">update</span>;     </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test(id, name) <span class="keyword">values</span>(<span class="number">3</span>, &quot;test3&quot;);    </span><br><span class="line"></span><br><span class="line"><span class="comment">-- session2</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test(id, name) <span class="keyword">values</span>(<span class="number">4</span>, &quot;test4&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>条件id&#x3D;3是不存在的,上面两个并发事务一定会发生死锁</p><h5 id="锁的区间划分"><a href="#锁的区间划分" class="headerlink" title="锁的区间划分"></a>锁的区间划分</h5><p>1、间隙锁（Gap Locks）<br>2、临键锁（Next-key Locks）</p><h5 id="锁的粒度划分"><a href="#锁的粒度划分" class="headerlink" title="锁的粒度划分"></a>锁的粒度划分</h5><p>1、表级锁（Table-level lock）<br>2、行级锁（Record Locks）<br>3、页级锁</p><h5 id="锁级别划分"><a href="#锁级别划分" class="headerlink" title="锁级别划分"></a>锁级别划分</h5><p>1、共享锁（share lock，即S锁）</p><p>2、排它锁 &#x2F; 独占锁（exclusive lock，即X锁）<br>3、意向锁</p><h5 id="加锁方式分类"><a href="#加锁方式分类" class="headerlink" title="加锁方式分类"></a>加锁方式分类</h5><p>自动锁（ Automatic Locks）<br>显示锁（LOCK TABLES ）</p><h5 id="六、锁的使用方式分类"><a href="#六、锁的使用方式分类" class="headerlink" title="六、锁的使用方式分类"></a>六、锁的使用方式分类</h5><p>乐观锁（Optimistic Lock）<br>悲观锁（Pessimistic Lock）</p><h5 id="补充锁的使用"><a href="#补充锁的使用" class="headerlink" title="补充锁的使用"></a>补充锁的使用</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 开启s锁<span class="operator">/</span>读锁<span class="operator">/</span>共享锁</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> book lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"># 开启x锁<span class="operator">/</span>写锁<span class="operator">/</span>排他锁</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> book <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"># mysq8 nawait有锁不等待</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> book <span class="keyword">for</span> <span class="keyword">update</span> nawait;</span><br><span class="line"></span><br><span class="line"># mysq8 有锁返回没有锁的数据行</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> book <span class="keyword">for</span> <span class="keyword">update</span> <span class="keyword">skip</span> locked;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git多环境配置</title>
      <link href="/2022/07/19/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/19/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>配置多git环境</p><span id="more"></span><h4 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h4><p>因为需要将giteePasges转到github，再加上工作用的gitlab，需要配置多个git环境</p><h5 id="1-打开终端cd-ssh进入ssh配置文件夹"><a href="#1-打开终端cd-ssh进入ssh配置文件夹" class="headerlink" title="1.打开终端cd ~/.ssh进入ssh配置文件夹"></a>1.打开终端<code>cd ~/.ssh</code>进入ssh配置文件夹</h5><p>可以看到我现在已经有两个密钥了</p><p><img src="/2022/07/19/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220719104006871-8198409.png" alt="image-20220719104006871"></p><h5 id="2-打开cat-config-配置文件，这里有之前配置的gitee跟gitlab环境"><a href="#2-打开cat-config-配置文件，这里有之前配置的gitee跟gitlab环境" class="headerlink" title="2.打开cat config 配置文件，这里有之前配置的gitee跟gitlab环境"></a>2.打开<code>cat config </code>配置文件，这里有之前配置的gitee跟gitlab环境</h5><p><img src="/2022/07/19/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220719104233243-8198555.png" alt="image-20220719104233243"></p><h5 id="3-生成github配置文件"><a href="#3-生成github配置文件" class="headerlink" title="3.生成github配置文件"></a>3.生成github配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C &quot;邮箱地址&quot;~~~</span><br></pre></td></tr></table></figure><p>再次查看目录就能看到生成的github配置文件</p><p><img src="/2022/07/19/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220719105231763.png" alt="image-20220719105231763"></p><h5 id="4-配置host"><a href="#4-配置host" class="headerlink" title="4.配置host"></a>4.配置host</h5><p><code>vim config</code>编辑config文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Host gitlab</span><br><span class="line"></span><br><span class="line">  Hostname 30.207.88.65</span><br><span class="line"></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">  User xxx</span><br><span class="line"></span><br><span class="line">\#Gitee</span><br><span class="line"></span><br><span class="line">Host gitee</span><br><span class="line"></span><br><span class="line">  HostName gitee.com</span><br><span class="line"></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line">  IdentityFile ~/.ssh/id_rsa2</span><br><span class="line"></span><br><span class="line">  User xx</span><br><span class="line"></span><br><span class="line">\#GitHub</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line"></span><br><span class="line">  HostName github.com</span><br><span class="line"></span><br><span class="line">  IdentityFile ~/.ssh/id_rsa.github</span><br><span class="line"></span><br><span class="line">  User x</span><br></pre></td></tr></table></figure><p>到这里就好了</p><h5 id="5-配置github公钥"><a href="#5-配置github公钥" class="headerlink" title="5.配置github公钥"></a>5.配置github公钥</h5><p>其实公钥就在<code>id_rsa.github.pub</code>文件里面  使用cat命令把里面的内容复制出来</p><p><img src="/2022/07/19/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220719110445331-8199886.png" alt="image-20220719110445331"></p><p>登录github把key粘进去就好了</p><p><img src="/2022/07/19/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220719110734607-8200055.png" alt="image-20220719110734607"></p><h5 id="6-ssh-T-git-github-com尝试访问一下"><a href="#6-ssh-T-git-github-com尝试访问一下" class="headerlink" title="6.ssh -T git@github.com尝试访问一下"></a>6.<code>ssh -T git@github.com</code>尝试访问一下</h5><p><img src="/2022/07/19/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220719111158473.png" alt="image-20220719111158473"></p><p>看到这个，就算成功了</p><h4 id="win"><a href="#win" class="headerlink" title="win"></a>win</h4><h5 id="1-打开-SHH文件夹"><a href="#1-打开-SHH文件夹" class="headerlink" title="1.打开.SHH文件夹"></a>1.打开<code>.SHH</code>文件夹</h5><p>C:{Users}\Administrator.ssh</p><h5 id="2-新建git配置文件"><a href="#2-新建git配置文件" class="headerlink" title="2.新建git配置文件"></a>2.新建git配置文件</h5><p>新建config文件<font color="red">!注意没有任何后缀</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line"></span><br><span class="line"># gitLab</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitlab_id_rsa</span><br><span class="line"></span><br><span class="line"># github_B</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Host配置是服务器地址,如果不是公网或者是公司私服的话,你应该配置的是公司的域名</p><h5 id="3-指定邮箱跟生成ssh文件，系统会根据配置文件自己去路由"><a href="#3-指定邮箱跟生成ssh文件，系统会根据配置文件自己去路由" class="headerlink" title="3.指定邮箱跟生成ssh文件，系统会根据配置文件自己去路由"></a>3.指定邮箱跟生成ssh文件，系统会根据配置文件自己去路由</h5><p>ssh-keygen -t rsa -C “<a href="mailto:&#121;&#x6f;&#117;&#x72;&#x5f;&#x65;&#x6d;&#x61;&#x69;&#108;&#x40;&#121;&#111;&#x75;&#114;&#101;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#121;&#x6f;&#117;&#x72;&#x5f;&#x65;&#x6d;&#x61;&#x69;&#108;&#x40;&#121;&#111;&#x75;&#114;&#101;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a>”</p><p>ssh-keygen -t rsa -C ‘<a href="mailto:&#x67;&#x75;&#x6f;&#x73;&#104;&#117;&#97;&#105;&#x73;&#x68;&#117;&#x61;&#105;&#x40;&#x69;&#x75;&#99;&#x74;&#x72;&#x69;&#x70;&#x2e;&#99;&#x6f;&#109;">&#x67;&#x75;&#x6f;&#x73;&#104;&#117;&#97;&#105;&#x73;&#x68;&#117;&#x61;&#105;&#x40;&#x69;&#x75;&#99;&#x74;&#x72;&#x69;&#x70;&#x2e;&#99;&#x6f;&#109;</a>‘ -f ~&#x2F;.ssh&#x2F;gitlab_id_rsa</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postMan｜SSL错误</title>
      <link href="/2022/07/19/postMan%EF%BD%9CSSL%E9%94%99%E8%AF%AF/"/>
      <url>/2022/07/19/postMan%EF%BD%9CSSL%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>Postman 报错SSL Error: Self signed certificate Disable SSL Verification</p><span id="more"></span><p>Postman 报错SSL Error: Self signed certificate Disable SSL Verification</p><p><img src="/2022/07/19/postMan%EF%BD%9CSSL%E9%94%99%E8%AF%AF/image-20220719094656814-8195220.png" alt="image-20220719094656814"></p><p>一开始以为可能是mac地址白名单问题，其实不是。而是postman设置问题</p><p>settings | ssl certificate verification ，点击off，关闭即可</p><p><img src="/2022/07/19/postMan%EF%BD%9CSSL%E9%94%99%E8%AF%AF/image-20220719094922817.png" alt="image-20220719094922817"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postMan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用详细</title>
      <link href="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/"/>
      <url>/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/</url>
      
        <content type="html"><![CDATA[<p>Typora使用详细</p><span id="more"></span><h3 id="Typora介绍与下载"><a href="#Typora介绍与下载" class="headerlink" title="Typora介绍与下载"></a>Typora介绍与下载</h3><p>Typora编辑器让人们能更简单地用Markdown语言书写文字，解决了使用传统的Markdown编辑器写文的痛点，并且界面简洁优美，实现了实时预览等功能。</p><p>Typora官网： <a href="https://typora.io/">https://typora.io/</a></p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>使用 # 可以表示标题，一级标题对应一个 # ，二级标题对应两个 # 号，最多至六级标题。在Typora中，# 后要紧接着一个空格才能表示标题，否则就是普通字符。</p><p>在Typora中，也可以使用快捷键command+1（2，3，4，5，6）表示相对应的标题。command+0表示段落。标题快捷键信息可在菜单栏中的段落选项下查看。</p><h5 id="例"><a href="#例" class="headerlink" title="例"></a>例</h5><p><img src="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/image-20220715155550280.png" alt="image-20220715155550280"></p><h5 id="后面加入空格效果"><a href="#后面加入空格效果" class="headerlink" title="#后面加入空格效果"></a>#后面加入空格效果</h5><p><img src="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/image-20220715155657206.png" alt="image-20220715155657206"></p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>用一对星号<em>括住的文本表示斜体文本，如：</em>要变斜体的文本*，斜体文本 ；<br>也可以用一对下划线_括住文本来表示斜体文本，如：_要变斜体的文本_，斜体文本 ；<br>也可以使用Typora的快捷键Ctrl+I来表示斜体文本。</p><p>用一对<strong>括住的文本表示粗体文本，如：</strong>要变粗体的文本**，粗体文本；<br>也可以用一对__括住的文本来表示粗体文本，如：__要变粗体的文本__，粗体文本；<br>也可以使用Typora的快捷键Ctrl+B来表示粗体文本。</p><p>用一对<em><strong>括住的文本表示粗斜体文本，如：</strong></em>要变粗斜体的文本***，粗斜体文本；<br>也可以用一对___括住的文本来表示粗斜体文本，如：___要变粗斜体的文本___，粗斜体文本；</p><h5 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h5><p><img src="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/image-20220715160404892.png" alt="image-20220715160404892"></p><h4 id="各种线"><a href="#各种线" class="headerlink" title="各种线"></a>各种线</h4><p>分割线，可以使用三个及以上的 + 号或 * 号或 - 来表示一条分割线；<br>由三个*号表示的分割线：</p><p>由三个+号表示的分割线：</p><p>+++(在CSDN中不代表分割线）</p><p>由三个-号表示的分割线：</p><p>删除线，可以使用一对<del>括住的文本来表示删除文本，如：</del>要加删除线的文本~~，删除文本；在Typora中，也可以使用快捷键Alt+Shift+5来加删除线，语法相同，删除线。<br>下划线，可以使用HTML的标签<u>和</u>表示增加下划线的文本，如：<u>要增加下划线的文本</u>，下划线；在Typora中，也可以使用快捷键Ctrl+U来增加下划线，语法也是相同的，下划线。</p><h5 id="例-2"><a href="#例-2" class="headerlink" title="例"></a>例</h5><p><img src="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/image-20220715160832180.png" alt="image-20220715160832180"></p><p>command+&#x2F;关闭源码模式效果</p><p><img src="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/image-20220715162754057.png" alt="image-20220715162754057"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>无序列表</strong></p><p>可以使用<code>*</code>，<code>+</code>或<code>-</code>标记符号来表示无序列表项，记住要在标记符号后<strong>添加一个空格</strong></p><p><strong>有序列表</strong></p><p>可以使用<strong>数字加上<code>.</code>再加上空格</strong>来表示有序列表，<strong>数字无实际意义只是一个符号，不影响输出</strong></p><h5 id="例-3"><a href="#例-3" class="headerlink" title="例"></a>例</h5><p><img src="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/image-20220715163141893.png" alt="image-20220715163141893"></p><h5 id="退出源码效果"><a href="#退出源码效果" class="headerlink" title="退出源码效果"></a>退出源码效果</h5><p><img src="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/image-20220715163215263.png" alt="image-20220715163215263"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如果是一行代码，可以使用段内代码块来表示，用一对 &#96;（数字1旁边的符号）括住代码。</p><p>比如printf(“Hello World!”)</p><p>如果是代码段，那么可以使用三个 &#96; 加Enter&#x2F;空格+编程语言来表示。如：<br>可以在代码块的右下角选择编程语言。</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>链接的使用方式有两种语法，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接文字](链接地址)</span><br><span class="line">或</span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>我们可以使用链接打开网页，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度](https://www.baidu.com/)</span><br><span class="line">&lt;https://www.baidu.com/&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><a href="https://www.baidu.com/">百度</a><br><a href="https://www.baidu.com/">https://www.baidu.com/</a></p><p>当鼠标移到相应的链接文字时，按住Ctrl+鼠标左键点击访问。</p><p>链接除了可以打开相应的网页外，还可以打开本地文件，使用方式类似，不过链接地址需要使用本地文件的地址，相对地址、绝对地址均可：</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[打开LinkTest.md文档](./LinkTest.md)</span><br><span class="line">[打开LinkTest.png照片](./img/LinkTest.png)</span><br></pre></td></tr></table></figure><p><a href="./LinkTest.md">打开LinkTest.md文档</a><br><a href="./img/LinkTest.png">打开LinkTest.png照片</a></p><p>经测试可以打开相应的文件。但是不能使用&lt;要打开的文件地址&gt;来打开相应的文件，比如&lt;.&#x2F;LinkTest.md&gt;并没有表现为可链接状态。</p><p>补充知识：</p><p>一个小圆点.表示当前目录，故.&#x2F;LinkTest.md表示当前目录下的LinkTest.md文件，.&#x2F;img&#x2F;LinkTest.png表示当前目录下的img文件下的LinkTest.png文件。</p><p>两个小圆点..表示上一级目录。</p><p>我们也可以使用链接来实现页内跳转，语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接文字](#标题文字)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[跳转到第一章第一节](#Typora介绍与下载)</span><br></pre></td></tr></table></figure><p>结果如下：<br><a href="#Typora%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%B8%8B%E8%BD%BD">跳转到第一章第一节</a></p><p>经测试，可以成功跳转。<br>在CSDN中不支持这种页内跳转方式。</p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>我们也可以在Markdown文档中插入图片，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><p>首先一个感叹号<br>然后中括号里面写属性文本<br>小括号里面写图片地址，后可接标题<br>示例语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![本地png图片PictureTest.png](./img/PictureTest.png)</span><br><span class="line"></span><br><span class="line">![本地jpg图片](./img/PictureTest.jpg)</span><br></pre></td></tr></table></figure><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="网络图片" title="菜鸟教程"></p><p>在Typora中，也可以直接使用Ctrl+C，Ctrl+V来直接进行复制粘贴图片，但是，由于Markdown是需要图片的地址的，所以需要简单设置一下Typora。</p><p>点击文件 –&gt; 偏好设置 –&gt; 图像，如下：</p><p><img src="/2022/07/15/Typora%E4%BD%BF%E7%94%A8%E8%AF%A6/image-20220715165118458.png" alt="image-20220715165118458"></p><p>可以自行设置选择将图片复制到哪个文件夹。</p><p>这里选择复制到指定路径，然后在下面一栏中填写.&#x2F;img，表示将图片复制到你正在编辑的文档同一级的img文件夹下。在下面的选项中，勾选第一、二、三项。正因为勾选了第二项，所以当我们在插入网络图片时，Typora会自动帮我们将网络图片下载到指定的路径下，前面的”菜鸟教程”图片便是如此。</p><p>由于Markdown的特殊语法，故经常会出现图片加载失败的情况，很大的可能就是因为在指定的路径上找不到相应的图片，当然，有时候也是由于Typora的原因，重启Typora即可。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。</p><p>语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|表头|表头|表头|</span><br><span class="line">|---|---|----|</span><br><span class="line">|单元格|单元格|单元格|</span><br><span class="line">|单元格|单元格|单元格|</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr></tbody></table><p>我们可以设置对齐方式：</p><ul><li><code>:-</code>表示左对齐</li><li><code>-:</code>表示右对齐</li><li><code>:-:</code>表示中间对齐</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|左对齐|右对齐|中间对齐|</span><br><span class="line">|:---|---:|:----:|</span><br><span class="line">|单元格|单元格|单元格|</span><br><span class="line">|单元格|单元格|单元格|</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">中间对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h4 id="Typora与数学公式"><a href="#Typora与数学公式" class="headerlink" title="Typora与数学公式"></a>Typora与数学公式</h4><p>在Typora中，有两种方法插入数学公式，语法为：</p><p>第一种方法：$数学公式$<br>第二种方法：<br>第一种方法表示插入行内公式（内联公式），即可以将公式插入到一行中，比如1 + 2 &#x3D; 3 1+2&#x3D;31+2&#x3D;3这样的公式。</p><p>第二种方法表示插入行间公式（外联公式），即可以将公式插入到行与行之间，单独占据一行或者数行的空间，并且居中放置。<br>1 + 2 &#x3D; 3 1+2&#x3D;3<br>1+2&#x3D;3</p><p>如果要在行间公式内换行，在换行的位置使用<code>\\</code>。</p><h4 id="改变字体颜色及大小"><a href="#改变字体颜色及大小" class="headerlink" title="改变字体颜色及大小"></a>改变字体颜色及大小</h4><p>我们可以使用<font> </font>标签来改变字体的颜色及大小，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span>字体颜色为红色，大小为3<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">4</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>字体颜色为蓝色，大小为4<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">6</span> <span class="attr">color</span>=<span class="string">&quot;violet&quot;</span>&gt;</span>字体颜色为紫罗兰，大小为6<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果为：</p><p><font>字体颜色为红色，大小为3</font></p><p><font size="4" color="blue">字体颜色为蓝色，大小为4</font></p><p><font size="6" color="violet">字体颜色为紫罗兰，大小为6</font></p><h4 id="改变对齐方式"><a href="#改变对齐方式" class="headerlink" title="改变对齐方式"></a>改变对齐方式</h4><p>我们可以改变字体的对齐方式，用标签<code>&lt;p&gt; &lt;/p&gt;</code>加上属性<code>align</code>，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>中间对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span>```</span><br></pre></td></tr></table></figure><p>结果为：</p><p align="center">中间对齐</p><p align="right">右对齐</p><h4 id="插入emoji表情"><a href="#插入emoji表情" class="headerlink" title="插入emoji表情"></a>插入emoji表情</h4><p>我们可以使用<code>:emoji:</code>的语法来插入表情，比如：</p><p>:happy:的语法为<code>:happy:</code></p><p>🦀的语法为<code>:crab:</code></p><p>🐴的语法为<code>:horse:</code></p><h4 id="文本高亮"><a href="#文本高亮" class="headerlink" title="文本高亮"></a>文本高亮</h4><p>在Typora中，可以用一对<code>==</code>将要高亮的文本括起来，如：</p><p>&lt;br</p><p>&#x3D;&#x3D;要高亮的文本&#x3D;&#x3D;</p><p>&#x3D;&#x3D;背景会用黄色填充&#x3D;&#x3D;</p><p><strong>hexo不支持</strong></p><p>但是发现支持<code>html</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red&quot;</span>&gt;</span></span><br><span class="line">通过 rbg 值设置背景颜色</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p style="background-color:red">通过 rbg 值设置背景颜色</p><p></p><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p><code>&lt;!-- --&gt;</code></p><p>效果</p><!-- 注释掉的内容 --><h5 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h5><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号</p><h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt; 学的不仅是技术更是梦想</span><br></pre></td></tr></table></figure><h6 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h6><blockquote><p>区块引用<br>学的不仅是技术更是梦想</p></blockquote><h6 id="嵌套使用："><a href="#嵌套使用：" class="headerlink" title="嵌套使用："></a>嵌套使用：</h6><p>一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推。</p><h6 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure><h6 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h6><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌浏览器打不开网页问题</title>
      <link href="/2022/07/15/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E4%B8%8D%E5%BC%80%E7%BD%91%E9%A1%B5%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/15/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E4%B8%8D%E5%BC%80%E7%BD%91%E9%A1%B5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>将您访问的部分网页的网址、有限的系统信息以及部分网页内容发送给 Google，以帮助我们提升 Chrome 的安全性。隐私权政策</p><span id="more"></span><h4 id="问题：运行项目在Chrome中打开出现以下问题"><a href="#问题：运行项目在Chrome中打开出现以下问题" class="headerlink" title="问题：运行项目在Chrome中打开出现以下问题"></a>问题：运行项目在Chrome中打开出现以下问题</h4><p><img src="/2022/07/15/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E4%B8%8D%E5%BC%80%E7%BD%91%E9%A1%B5%E9%97%AE%E9%A2%98/image-20220715150621093-7868785.png" alt="image-20220715150621093"></p><p>这个问题大量出现在我访问公司网络，github之类的，头疼得很</p><p>您的连接不是私密连接<br>攻击者可能会试图从 x.x.x.x 窃取您的信息（例如：密码、通讯内容或信用卡信息）。了解详情<br>NET::ERR_CERT_INVALID</p><p>将您访问的部分网页的网址、有限的系统信息以及部分网页内容发送给 Google，以帮助我们提升 Chrome 的安全性。隐私权政策<br>x.x.x.x 通常会使用加密技术来保护您的信息。Google Chrome 此次尝试连接到 x.x.x.x 时，此网站发回了异常的错误凭据。这可能是因为有攻击者在试图冒充 x.x.x.x，或 Wi-Fi 登录屏幕中断了此次连接。请放心，您的信息仍然是安全的，因为 Google Chrome 尚未进行任何数据交换便停止了连接。</p><p>您目前无法访问 x.x.x.x，因为此网站发送了 Google Chrome 无法处理的杂乱凭据。网络错误和攻击通常是暂时的，因此，此网页稍后可能会恢复正常。</p><p><strong>解决：就是在当前页面用键盘输入  thisisunsafe  ，不是在地址栏输入，就直接敲键盘就行了，页面即会自动刷新进入网页。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客自定义域名使用</title>
      <link href="/2022/07/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>博客使用自定义网址</p><span id="more"></span><p>1.查看一下自己想要的域名，看是否被占用，还有域名价格</p><p><a href="https://wanwang.aliyun.com/">https://wanwang.aliyun.com/</a></p><p><img src="/2022/07/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8/image-20220704101813529.png" alt="image-20220704101813529"></p><p>2.选择购买域名后，先要去阿里云实名and报案，然后在云解析dns可以找到自己的域名</p><p><img src="/2022/07/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8/image-20220704102000799.png" alt="image-20220704102000799"></p><p>3.设置域名解析和SSL证书；</p><p>这里要注意的是域名解析是将自己申请的域名解析到gitee.gitee.io，具体看下面图片：</p><p> 设置域名解析：</p><p><img src="/2022/07/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8/8346f0240b3efe386d2cd512bca86d7d.jpeg" alt="img"></p><p>……研究了之后，发现gitee自定义域名是要开通企业版付费使用的，</p><p><strong>搁浅了一周</strong>，所以决定项目部署在github，github自定义域名不需要付费</p><h5 id="进去阿里云域名解析页"><a href="#进去阿里云域名解析页" class="headerlink" title="进去阿里云域名解析页"></a>进去阿里云域名解析页</h5><p><img src="/2022/07/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8/image-20220719153742775-8216264.png" alt="image-20220719153742775"></p><h5 id="解析设置"><a href="#解析设置" class="headerlink" title="解析设置"></a>解析设置</h5><p>需要注意记录的类型要跟下面保持一致</p><p><img src="/2022/07/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8/image-20220719153852546-8216334.png" alt="image-20220719153852546"></p><p><strong>1and2</strong>：192.30.252.154 192.30.252.153  是github服务器的地址</p><p><strong>3</strong>：自己的域名</p><p>最后需要在你博客的根路径下添加CNAME文件用来配置博客域名</p><p><img src="/2022/07/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8/image-20220719154226441-8216548.png" alt="image-20220719154226441"></p><p><code>hexo clear &amp; hexo g &amp; hexo d</code>稍等10分钟域名就生效了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring日志级别</title>
      <link href="/2022/06/22/spring%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/"/>
      <url>/2022/06/22/spring%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>spring日志级别</p><span id="more"></span><p>1.启动项目的时候发现成功启动后，后台没有打印端口号这些日志</p><p><img src="/2022/06/22/spring%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/image-20220623140825715-5964511-5964513-5964515.png" alt="image-20220623140825715"></p><p>检查配置发现 日志级别配置为WARN（警告）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 日志配<span class="number">432</span></span><br><span class="line"><span class="attr">logging</span>:</span><br><span class="line">  <span class="attr">level</span>:</span><br><span class="line">    com.<span class="property">guo</span>: debug</span><br><span class="line">    org.<span class="property">springframework</span>: <span class="variable constant_">WARN</span></span><br></pre></td></tr></table></figure><p>2.日志级别</p><ul><li>OFF   | 关闭：最高级别，不打印日志。 </li><li>FATAL | 致命：指明非常严重的可能会导致应用终止执行错误事件。</li><li>ERROR | 错误：指明错误事件，但应用可能还能继续运行。 </li><li>WARN | 警告：指明可能潜在的危险状况。 </li><li>INFO | 信息：指明描述信息，从粗粒度上描述了应用运行过程。 </li><li>DEBUG | 调试：指明细致的事件信息，对调试应用最有用。</li><li>TRACE | 跟踪：指明程序运行轨迹，比DEBUG级别的粒度更细。 </li><li>ALL | 所有：所有日志级别，包括定制级别。</li></ul><p>&gt; 日志级别由低到高:  &#96;日志级别越高输出的日志信息越多</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsoup爬虫</title>
      <link href="/2022/06/20/jsoup%E7%88%AC%E8%99%AB/"/>
      <url>/2022/06/20/jsoup%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>爬取京东商品数据为例，保存数据库展示</p><span id="more"></span><h3 id="一、Jsoup概述"><a href="#一、Jsoup概述" class="headerlink" title="一、Jsoup概述"></a>一、Jsoup概述</h3><h4 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h4><p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，</p><p>可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><h4 id="1-2、主要功能"><a href="#1-2、主要功能" class="headerlink" title="1.2、主要功能"></a>1.2、主要功能</h4><p>1、从一个URL，文件或字符串中解析HTML</p><p>2、使用DOM或CSS选择器来查找、取出数据</p><p>3、可操作HTML元素、属性、文本</p><p>注意：jsoup是基于MIT协议发布的，可放心使用于商业项目。</p><h3 id="二-网页分析"><a href="#二-网页分析" class="headerlink" title="二.网页分析"></a>二.网页分析</h3><h4 id="2-1搜索参数"><a href="#2-1搜索参数" class="headerlink" title="2.1搜索参数"></a>2.1搜索参数</h4><p>1.首先我们打开京东搜索的网页，通过开发者工具可以发现，输入框的id是keyword。</p><p><img src="/2022/06/20/jsoup%E7%88%AC%E8%99%AB/image-20220621093710111.png" alt="image-20220621093710111"></p><p>2.随后我们找到整个商品的div，如下图所示，它的id为“J_goodsList”</p><p><img src="/2022/06/20/jsoup%E7%88%AC%E8%99%AB/image-20220621093843214.png" alt="image-20220621093843214"></p><p>3.分析这个div，就能找到li下面每个手机参数（图片，名称，价格等）</p><p><img src="/2022/06/20/jsoup%E7%88%AC%E8%99%AB/image-20220621094041245.png" alt="image-20220621094041245"></p><h3 id="三-数据爬取"><a href="#三-数据爬取" class="headerlink" title="三.数据爬取"></a>三.数据爬取</h3><p>1.新建项目，编写数据爬取的utils</p><p><img src="/2022/06/20/jsoup%E7%88%AC%E8%99%AB/image-20220621151519034.png" alt="image-20220621151519034"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.jsopdemo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.jsopdemo.dto.Goods;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//搜索词可以更换，此处以java为例</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">goodList</span> <span class="operator">=</span> ParseJD(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : goodList) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">            System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Goods&gt; <span class="title function_">ParseJD</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取url请求</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://search.jd.com/Search?keyword=&quot;</span> + keywords;</span><br><span class="line">        <span class="comment">//解析网页,Jsoup返回的是Document对象（浏览器Document对象）</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//所有在js中使用的方法，这里都能使用</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">        <span class="comment">//在获得网页内容后，获取所有的li标签</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> element.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        ArrayList&lt;Goods&gt; goodList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Goods&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取元素的标签后，再获取标签中的内容</span></span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">skuCode</span> <span class="operator">=</span> el.attr(<span class="string">&quot;data-sku&quot;</span>);</span><br><span class="line">            <span class="comment">//关于图片特别多的网站，所拥有的图片都是延迟加载的(懒加载)</span></span><br><span class="line">            <span class="comment">// source-data-lazy-img</span></span><br><span class="line"><span class="comment">//            String img = el.getElementsByTag(&quot;img&quot;).eq(0).attr(&quot;source-data-lazy-img&quot;);</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> el.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> el.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> el.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Goods</span>();</span><br><span class="line">            goods.setSkuCode(skuCode);</span><br><span class="line">            goods.setType(keywords);</span><br><span class="line">            goods.setTitle(name);</span><br><span class="line">            goods.setImg(img);</span><br><span class="line">            goods.setPrice(price);</span><br><span class="line">            goodList.add(goods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> goodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.发现只能处理一页面的数据，尝试点击下一页，分析填充分页面参数</p><p>一页为30条，页面分页参数为page</p><p><img src="/2022/06/20/jsoup%E7%88%AC%E8%99%AB/image-20220621174713313.png" alt="image-20220621174713313"></p><p>增加分页参数and休眠（图片懒加载，太快图片刷不出来）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.jsop.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.jsop.dto.Goods;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//搜索词可以更换，此处以java为例</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">goodList</span> <span class="operator">=</span> parseJD(<span class="string">&quot;苹果&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object o : goodList) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;条：&quot;</span> + o.toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Goods&gt; <span class="title function_">parseJD</span><span class="params">(String keywords, Integer num)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//计算分页</span></span><br><span class="line">        <span class="comment">//最大取整</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(num / <span class="number">30</span>) + <span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;Goods&gt; goodList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Goods&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= page; j++) &#123;</span><br><span class="line">            <span class="comment">//获取url请求</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://search.jd.com/Search?keyword=&quot;</span> + keywords + <span class="string">&quot;&amp;page=&quot;</span> + page;</span><br><span class="line">            <span class="comment">//睡眠1s 给懒加载的图片一点时间</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">//解析网页,Jsoup返回的是Document对象（浏览器Document对象）</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">10000</span>);</span><br><span class="line">            <span class="comment">//所有在js中使用的方法，这里都能使用</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">            <span class="comment">//在获得网页内容后，获取所有的li标签</span></span><br><span class="line">            <span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> element.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取元素的标签后，再获取标签中的内容</span></span><br><span class="line">            <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">skuCode</span> <span class="operator">=</span> el.attr(<span class="string">&quot;data-sku&quot;</span>);</span><br><span class="line">                <span class="comment">//关于图片特别多的网站，所拥有的图片都是延迟加载的(懒加载)</span></span><br><span class="line">                <span class="comment">// source-data-lazy-img</span></span><br><span class="line"><span class="comment">//            String img = el.getElementsByTag(&quot;img&quot;).eq(0).attr(&quot;source-data-lazy-img&quot;);</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> el.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> el.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> el.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">                <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Goods</span>();</span><br><span class="line">                goods.setSkuCode(skuCode);</span><br><span class="line">                goods.setType(keywords);</span><br><span class="line">                goods.setTitle(name);</span><br><span class="line">                goods.setImg(img);</span><br><span class="line">                goods.setPrice(price);</span><br><span class="line">                goodList.add(goods);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="/2022/06/20/jsoup%E7%88%AC%E8%99%AB/image-20220622102545670.png" alt="image-20220622102545670"></p><h3 id="四-数据存储"><a href="#四-数据存储" class="headerlink" title="四.数据存储"></a>四.数据存储</h3><p>1.配置yml文件连接数据库</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8123</span></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.watone:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://数据库地址:3306/jsoup_goods?allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.guo.jsop.dto</span></span><br></pre></td></tr></table></figure><p>2.数据库表 type是为了区分爬下来的不同类型数据</p><p>CREATE TABLE <code>goods</code> (<br>  <code>id</code> int NOT NULL AUTO_INCREMENT,<br>  <code>type</code> varchar(255) DEFAULT NULL,<br>  <code>title</code> varchar(255) DEFAULT NULL,<br>  <code>img</code> varchar(255) DEFAULT NULL,<br>  <code>price</code> varchar(255) DEFAULT NULL,<br>  <code>sku_code</code> varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;31 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</p><p>3.实体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.guo.jsop.dto;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">public class Goods &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 搜索关键字的类型</span><br><span class="line">     */</span><br><span class="line">    private String type;</span><br><span class="line"></span><br><span class="line">    private String title;</span><br><span class="line"></span><br><span class="line">    private String img;</span><br><span class="line"></span><br><span class="line">    private String price;</span><br><span class="line"></span><br><span class="line">    private String skuCode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.service and mapper.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private GoodsMapper goodsMapper;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Boolean grabGoods(String type, Integer num) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        List&lt;Goods&gt; goods = HtmlUtils.parseJD(type, num);</span><br><span class="line">        //删除老的type商品</span><br><span class="line">        goodsMapper.delete(type);</span><br><span class="line">        goodsMapper.insert(goods);</span><br><span class="line">        return true;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insert&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class="line">   insert into goods (type,title,img,price,sku_code) values</span><br><span class="line">   &lt;foreach collection =&quot;goods&quot; item=&quot;t&quot; separator =&quot;,&quot;&gt;</span><br><span class="line">      (#&#123;t.type&#125;, #&#123;t.title&#125;, #&#123;t.img&#125;,#&#123;t.price&#125;,#&#123;t.skuCode&#125;)</span><br><span class="line">   &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;delete id=&quot;delete&quot; parameterType=&quot;java.lang.String&quot;&gt;</span><br><span class="line">   delete from goods where type = #&#123;type&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>5.调用方式</p><p><a href="http://localhost:8123/grabGoods?type=java&num=3">http://localhost:8123/grabGoods?type=java&amp;num=3</a></p><p>git地址</p><p><a href="https://gitee.com/guo0817/jsop_demo.git">https://gitee.com/guo0817/jsop_demo.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> jsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boot项目相互引入大坑</title>
      <link href="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/"/>
      <url>/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>boot项目引入大坑</p><span id="more"></span><p>接手的一个老项目，因为这个问题，兜兜转转花费了一晚上的时间。复盘一次，这个问题我不会遇到了！</p><p>事发场景：<code>boot-b</code>引入<code>boot-a</code>,<code>boot-a</code>中有服务WelcomeService</p><p>1.新建两个boot项目，boot-a中创建一个接口</p><p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620143935692-5707184.png" alt="image-20220620143935692"></p><p>2.boot-b引入项目boot-a的gav</p><p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620144836836.png" alt="image-20220620144836836"></p><p>3.boot-b写个接口实现类实现boot-a中写好的接口</p><p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620145124953.png" alt="image-20220620145124953"></p><p>4.看起来一切正常，boot-b成功引入了boot-a中的接口，但是你尝试启动一下项目项目是启动不了的，编译一下尝试comlile</p><p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620145317956.png" alt="20220620145317956"></p><p>编译结果：</p><p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620145406660.png" alt="image-20220620145406660"></p><p>因为这个问题，百思不得其解。成功引入的表象，误导我  尝试了好多种方式，解决     最后把错误归结到我本地电脑环境问题，心态爆炸      休息一会后尝试重新解决</p><p>5.尝试打包boot-a 看看打包的目录 package</p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620150532011.png" alt="image-20220620150532011" style="zoom:50%;"><p>打包后找到目录解压   我们的包变成了<code>BOOT-INF</code>   他确实打包打入了你boot-b需要的接口，但是你的maven是引入不到的，</p><p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620150628669.png" alt="image-20220620150628669"></p><p>6.原因分析</p><p>如下，就是在boot-a中springboot的maven插件，用这个插件打包的Jar包可以直接运行，但是不可依赖！（创建boot项目默认会加）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>7.解决方案</p><p>在boot-a<code>configuration</code>下设置<code>skip</code>为<code>true</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;skip&gt;true&lt;/skip&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>尝试重新打包boot-a</p><p>mvn install</p><p>解压后新的包，是我们想要的目录</p><p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620152556517.png" alt="image-20220620152556517"></p><p>尝试重新编译启动，如果报错的话   还是，尝试清理一下缓存，重新生成一下mvn目录</p><p>执行命令：mvn : -U idea:idea</p><p>成功编译启动</p><p><img src="/2022/06/20/boot%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%A7%E5%9D%91/image-20220620153316105.png" alt="image-20220620153316105"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地项目集成git</title>
      <link href="/2022/06/15/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90git/"/>
      <url>/2022/06/15/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90git/</url>
      
        <content type="html"><![CDATA[<p>本地项目集成到远程仓库（以gitee为例）</p><span id="more"></span><p>1.登录gitee<a href="https://gitee.com/%E5%85%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93(%E8%A6%81%E8%B7%9F%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%90%8D%E5%AD%97%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%EF%BC%8C%E4%B8%8D%E7%84%B6%E6%8E%A8%E9%80%81%E4%B8%8D%E4%B8%8A%E5%8E%BB)">https://gitee.com/先创建一个远程仓库(要跟本地项目名字保持一致，不然推送不上去)</a></p><p><img src="/2022/06/15/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90git/image-20220615164835051.png" alt="image-20220615164835051"></p><p>2.进去要上传项目位置的终端使用 git init  初始化git管理项目</p><p><img src="/2022/06/15/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90git/image-20220615171516788.png" alt="image-20220615171516788"></p><p>3.给本地仓库关联远程仓库</p><p>git remote add origin 你的远程git地址</p><p><img src="/2022/06/15/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90git/image-20220615171449504.png" alt="image-20220615171449504"></p><p>4.先更新本地仓库</p><p>git pull origin master</p><p><img src="/2022/06/15/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90git/image-20220615171726850.png" alt="image-20220615171726850"></p><p>5.推送本地仓库代码到远程仓库</p><p>$ git add .（添加所有文件，由git管理）<br>$ git commit -m “第一次提交”(提交到暂存区）<br>$ git push origin master（推送远程仓库）</p><p><img src="/2022/06/15/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90git/image-20220615171852102.png" alt="image-20220615171852102"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqLite本地化数据库</title>
      <link href="/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>sqLite数据库SpringBoot整合&amp;二进制文件存储读取</p><span id="more"></span><h2 id="一-什么是sqLite？"><a href="#一-什么是sqLite？" class="headerlink" title="一.什么是sqLite？"></a>一.什么是sqLite？</h2><p>1.SQLite是一个进展中的库，它实现了一个自给自足，无服务器，零配置，事务SQL数据库引擎。</p><p>2.占用空间少，可直接嵌入到应用中,大致13万行C代码, 4.43M</p><p>3.支持多个系统，多种常用计算机语言交互</p><p>4.支持数据库大小至2TB</p><p>5.比一些流行的数据库在大部分普通数据库操作要快</p><p><u>6.！写入修改时候会锁定整个数据库！！！</u></p><h3 id="二-sqLite适用场景"><a href="#二-sqLite适用场景" class="headerlink" title="二.sqLite适用场景"></a>二.sqLite适用场景</h3><p>1.嵌入式设备和物联网</p><p>2.申请文件格式</p><p>3.小型网站</p><p>4.资料传输格式</p><p>5.文件档案和&#x2F;或数据容器</p><h3 id="三-sqLite下载"><a href="#三-sqLite下载" class="headerlink" title="三.sqLite下载"></a>三.sqLite下载</h3><p>官网：<a href="https://www.sqlite.org/index.html">https://www.sqlite.org/index.html</a></p><p><img src="/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220531101801314.png" alt="image-20220531101801314"></p><p>解压即可使用，打开当前位置的控制台，嫌麻烦可以配一个环境变量</p><p><img src="/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220531102657917.png"></p><h3 id="四-sqLite的使用"><a href="#四-sqLite的使用" class="headerlink" title="四.sqLite的使用"></a>四.sqLite的使用</h3><p>打开安装sqlite的文件夹，新建一个此位置的控制台窗口</p><h5 id="1-sqlite提示符"><a href="#1-sqlite提示符" class="headerlink" title="1.sqlite提示符"></a>1.sqlite提示符</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入sqlite3 进入sqlite提示符模式，在 SQLite 命令提示符下，可以使用各种 SQLite 命令。</span><br></pre></td></tr></table></figure><p>可以使用 SQLite <strong>.quit</strong> 命令退出 sqlite 提示符</p><p><img src="/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220531112538357.png" alt="image-20220531112538357"></p><h5 id="2-数据库创建"><a href="#2-数据库创建" class="headerlink" title="2.数据库创建"></a>2.数据库创建</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 &quot;数据库名字&quot;</span><br></pre></td></tr></table></figure><p><img src="/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220531113042477.png" alt="image-20220531113042477"></p><p>另外我们也可以使用 <strong>.open</strong> 来建立新的数据库文件：打开已存在数据库也是用 <strong>.open</strong> 命令，以上命令如果 <strong>test.db</strong> 存在则直接会打开，不存在就创建它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt;.open test.db</span><br></pre></td></tr></table></figure><h6 id="查看创建的数据库-databases"><a href="#查看创建的数据库-databases" class="headerlink" title="查看创建的数据库 .databases"></a>查看创建的数据库 <strong>.databases</strong></h6><p>在<strong>sqlite&gt;</strong> 提示符下使用 .databases</p><p><img src="/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220531113607077.png" alt="image-20220531113607077"></p><h6 id="dump-命令-数据库导出"><a href="#dump-命令-数据库导出" class="headerlink" title=".dump 命令 数据库导出"></a>.dump 命令 数据库导出</h6><p>你可以在命令提示符中使用 SQLite <strong>.dump</strong> 点命令来导出完整的数据库在一个文本文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sqlite3 testDB.db .dump &gt; testDB.sql</span><br></pre></td></tr></table></figure><p>上面的命令将转换整个 <strong>testDB.db</strong> 数据库的内容到 SQLite 的语句中，并将其转储到 ASCII 文本文件 <strong>testDB.sql</strong> 中。可以通过简单的方式从生成的 testDB.sql 恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sqlite3 testDB.db &lt; testDB.sql</span><br></pre></td></tr></table></figure><h5 id="3-sqlite的数据类型"><a href="#3-sqlite的数据类型" class="headerlink" title="3.sqlite的数据类型"></a>3.sqlite的数据类型</h5><table><thead><tr><th>NULL</th><th>值是一个 NULL 值。</th></tr></thead><tbody><tr><td>INTEGER</td><td>值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td>REAL</td><td>值是一个浮点值，存储为 8 字节的 IEEE 浮点数字。</td></tr><tr><td>TEXT</td><td>值是一个文本字符串，使用数据库编码（UTF-8、UTF-16BE 或 UTF-16LE）存储。</td></tr><tr><td>BLOB</td><td>值是一个 blob 数据，完全根据它的输入存储。</td></tr></tbody></table><h6 id="SQLite-亲和-Affinity-类型"><a href="#SQLite-亲和-Affinity-类型" class="headerlink" title="SQLite 亲和(Affinity)类型"></a>SQLite 亲和(Affinity)类型</h6><p>SQLite支持列的亲和类型概念。任何列仍然可以存储任何类型的数据，当数据插入时，该字段的数据将会优先采用亲缘类型作为该值的存储方式。SQLite目前的版本支持以下五种亲缘类型：</p><h6 id="SQLite-亲和类型-Affinity-及类型名称"><a href="#SQLite-亲和类型-Affinity-及类型名称" class="headerlink" title="SQLite 亲和类型(Affinity)及类型名称"></a>SQLite 亲和类型(Affinity)及类型名称</h6><p>下表列出了当创建 SQLite3 表时可使用的各种数据类型名称，同时也显示了相应的亲和类型：</p><table><thead><tr><th align="left">数据类型</th><th align="left">亲和类型</th></tr></thead><tbody><tr><td align="left">INTINTEGERTINYINTSMALLINTMEDIUMINTBIGINTUNSIGNED BIG INTINT2INT8</td><td align="left">INTEGER</td></tr><tr><td align="left">CHARACTER(20)VARCHAR(255)VARYING CHARACTER(255)NCHAR(55)NATIVE CHARACTER(70)NVARCHAR(100)TEXTCLOB</td><td align="left">TEXT</td></tr><tr><td align="left">BLOBno datatype specified</td><td align="left">NONE</td></tr><tr><td align="left">REALDOUBLEDOUBLE PRECISIONFLOAT</td><td align="left">REAL</td></tr><tr><td align="left">NUMERICDECIMAL(10,5)BOOLEANDATEDATETIME</td><td align="left">NUMERIC</td></tr></tbody></table><h6 id="Boolean-数据类型"><a href="#Boolean-数据类型" class="headerlink" title="Boolean 数据类型"></a>Boolean 数据类型</h6><p>SQLite 没有单独的 Boolean 存储类。相反，布尔值被存储为整数 0（false）和 1（true）。</p><h6 id="Date-与-Time-数据类型"><a href="#Date-与-Time-数据类型" class="headerlink" title="Date 与 Time 数据类型"></a>Date 与 Time 数据类型</h6><p>SQLite 没有一个单独的用于存储日期和&#x2F;或时间的存储类，但 SQLite 能够把日期和时间存储为 TEXT、REAL 或 INTEGER 值。</p><table><thead><tr><th align="left">存储类</th><th align="left">日期格式</th></tr></thead><tbody><tr><td align="left">TEXT</td><td align="left">格式为 “YYYY-MM-DD HH:MM:SS.SSS” 的日期。</td></tr><tr><td align="left">REAL</td><td align="left">从公元前 4714 年 11 月 24 日格林尼治时间的正午开始算起的天数。</td></tr><tr><td align="left">INTEGER</td><td align="left">从 1970-01-01 00:00:00 UTC 算起的秒数。</td></tr></tbody></table><p>可以以任何上述格式来存储日期和时间，并且可以使用内置的日期和时间函数来自由转换不同格式。</p><h3 id="五-数据库创建连接"><a href="#五-数据库创建连接" class="headerlink" title="五.数据库创建连接"></a>五.数据库创建连接</h3><p>建表使用Navicat客户端工具了，更直观点，选择sqlite方式，然后选择安装目录下的db文件即可</p><p><img src="/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.png" alt="image-20220613175536741"></p><h5 id="5-1数据库创建"><a href="#5-1数据库创建" class="headerlink" title="5.1数据库创建"></a>5.1数据库创建</h5><p>CREATE TABLE “user” (<br>  “user_id” INTEGER NOT NULL,<br>  “user_name” text,<br>  “usre_image” text,<br>  “create_time” DATE,<br>  “balance” real,<br>  PRIMARY KEY (“user_id”)<br>);</p><p><img src="/2022/05/30/sqLite%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220613181253881.png" alt="image-20220613181253881"></p><h5 id="5-2增删改查"><a href="#5-2增删改查" class="headerlink" title="5.2增删改查"></a>5.2增删改查</h5><h6 id="5-2-1add"><a href="#5-2-1add" class="headerlink" title="5.2.1add"></a>5.2.1add</h6><p>INSERT INTO user (user_id, user_name,user_image,create_time_,balance)<br>VALUES (2,’张三’,’假装图片1’,’2022-03-02 12:13:43’,3232.34);</p><h6 id="5-2-12select"><a href="#5-2-12select" class="headerlink" title="5.2.12select"></a>5.2.12select</h6><p>select * FROM user where user_id !&#x3D; 3 GROUP BY user_name ORDER BY user_id </p><h6 id="5-2-3update"><a href="#5-2-3update" class="headerlink" title="5.2.3update"></a>5.2.3update</h6><p>UPDATE user SET user_name &#x3D; ‘李四’ where user_id &#x3D;1</p><h6 id="5-2-4del"><a href="#5-2-4del" class="headerlink" title="5.2.4del"></a>5.2.4del</h6><p>DELETE from user where user_id &#x3D; 1</p><h3 id="6-springBoot整合"><a href="#6-springBoot整合" class="headerlink" title="6.springBoot整合"></a>6.springBoot整合</h3><p>yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: org.sqlite.JDBC</span><br><span class="line">    url: jdbc:sqlite:/你的数据库地址</span><br><span class="line">    #    url: jdbc:sqlite:/home/frfile/db/aaa.db</span><br><span class="line">    username:</span><br><span class="line">    password:</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*Mapper.xml</span><br><span class="line">  type-aliases-package: com.guo.sqlite_demo.entity</span><br></pre></td></tr></table></figure><p>xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.guo.sqlite_demo.mapper.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.guo.sqlite_demo.entity.User&quot;&gt;</span><br><span class="line">        &lt;result column=&quot;user_id&quot;  property=&quot;userId&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;user_name&quot;  property=&quot;userName&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;user_image&quot;  property=&quot;userImage&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;create_time&quot;  property=&quot;createTime&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;balance&quot;  property=&quot;balance&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;findList&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">        select * from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;insert&quot; parameterType=&quot;com.guo.sqlite_demo.entity.User&quot;&gt;</span><br><span class="line">        insert into user(user_name,user_image,create_time,balance)</span><br><span class="line">        values (#&#123;userName&#125;,#&#123;userImage&#125;,#&#123;createTime&#125;,#&#123;balance&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;update id=&quot;update&quot; parameterType=&quot;com.guo.sqlite_demo.entity.User&quot;&gt;</span><br><span class="line">        update user</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test=&quot;userName != null&quot;&gt;</span><br><span class="line">                user_name = #&#123;userName&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;userImage != null&quot;&gt;</span><br><span class="line">                user_image = #&#123;userImage&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;createTime != null&quot;&gt;</span><br><span class="line">                create_time = #&#123;createTime&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;balance != null&quot;&gt;</span><br><span class="line">                balance = #&#123;balance&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        where user_id = #&#123;userId&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;delete id=&quot;delete&quot;&gt;</span><br><span class="line">        delete from user where user_id = #&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/list&quot;)</span><br><span class="line">    public List&lt;User&gt; listBy()&#123;</span><br><span class="line">        return userService.findList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/add&quot;)</span><br><span class="line">    public Integer add(@RequestBody User user)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        return userService.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/modify&quot;)</span><br><span class="line">    public Integer modify(@RequestBody  User user)&#123;</span><br><span class="line">        return userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br><span class="line">    public Integer delete(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class="line">        return userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>entity</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private int userId;</span><br><span class="line"></span><br><span class="line">    private String userName;</span><br><span class="line"></span><br><span class="line">    private String userImage;</span><br><span class="line"></span><br><span class="line">    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">    private Date createTime;</span><br><span class="line"></span><br><span class="line">    private Double balance;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; findList();</span><br><span class="line"></span><br><span class="line">    Integer insert(User user);</span><br><span class="line"></span><br><span class="line">    Integer update(User user);</span><br><span class="line"></span><br><span class="line">    Integer delete(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-项目地址"><a href="#7-项目地址" class="headerlink" title="7.项目地址"></a>7.项目地址</h3><p><a href="https://gitee.com/guo0817/sqllte_demo.git">https://gitee.com/guo0817/sqllte_demo.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ShardingSphere的分库分表</title>
      <link href="/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
      <url>/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>基于ShardingSphere水平分表的两种方式实践</p><span id="more"></span><h2 id="分库分表-水平拆分"><a href="#分库分表-水平拆分" class="headerlink" title="分库分表(水平拆分)"></a>分库分表(水平拆分)</h2><h2 id="1-分库分表方案"><a href="#1-分库分表方案" class="headerlink" title="1.分库分表方案"></a>1.分库分表方案</h2><p>之前工作的时候其实有做过分库分表，但是因为上家公司工具化比较好，只需简单配置即可。当时候项目也比较赶，后来也就没有深究思考，最近刚想起来。如果你想要复现一遍的话，建议一定要看看官网。apache也为我们提供了多种方式，此文是基于apache—ShardingSphereJDBC的实操demo。</p><h5 id="Sharding-JDBC"><a href="#Sharding-JDBC" class="headerlink" title="Sharding-JDBC"></a>Sharding-JDBC</h5><p>定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><ul><li>适用于任何基于 Java 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC。</li><li>基于任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP 等。</li><li>支持任意实现 JDBC 规范的数据库。目前支持 MySQL，Oracle，SQLServer 和 PostgreSQL。</li></ul><h5 id="Sharding-Proxy"><a href="#Sharding-Proxy" class="headerlink" title="Sharding-Proxy"></a>Sharding-Proxy</h5><p>定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前先提供 MySQL&#x2F;PostgreSQL 版本，它可以使用任何兼容 MySQL&#x2F;PostgreSQL 协议的访问客户端(如：MySQL Command Client, MySQL Workbench, Navicat 等)操作数据，对 DBA 更加友好。</p><ul><li>向应用程序完全透明，可直接当做 MySQL&#x2F;PostgreSQL 使用。</li><li>适用于任何兼容 MySQL&#x2F;PostgreSQL 协议的的客户端。</li></ul><h5 id="ShardingSphere官网-https-shardingsphere-apache-org"><a href="#ShardingSphere官网-https-shardingsphere-apache-org" class="headerlink" title="ShardingSphere官网:https://shardingsphere.apache.org/"></a>ShardingSphere官网:<a href="https://shardingsphere.apache.org/">https://shardingsphere.apache.org/</a></h5><h2 id="2-什么时候分表？"><a href="#2-什么时候分表？" class="headerlink" title="2.什么时候分表？"></a>2.什么时候分表？</h2><p>如果你的系统处于快速发展时期，表的查询效率明变慢时，就需要规划分库分表了。一般B+树索引高度是2~3层最佳，如果<strong>数据量千万级别</strong>，可能高度就变4层了，数据量就会明显变慢了。参照阿里规范一般500万数据就要<strong>考虑分表</strong>了。</p><h2 id="3-什么时候分库"><a href="#3-什么时候分库" class="headerlink" title="3.什么时候分库"></a>3.什么时候分库</h2><p>业务发展很快，还是多个服务共享一个单体数据库，数据库成为了性能瓶颈，就需要考虑分库了。比如订单、用户等，都可以抽取出来，新搞个应用（其实就是微服务思想），并且拆分数据库（订单库、用户库）。</p><h2 id="4-水平分库"><a href="#4-水平分库" class="headerlink" title="4.水平分库"></a>4.水平分库</h2><p>水平分库是指，将表的数据量切分到不同的数据库服务器上，每个服务器具有相同的库和表，只是表中的数据集合不一样。它可以有效的缓解单机单库的性能瓶颈和压力。</p><p>用户库的水平拆分架构如下：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/down/179793cc1f6b884834e1bb92271f4881.png@wm_2,t_55m+5a625Y+3L+eoi+W6j+mCo+eCueS6iw==,fc_ffffff,ff_U2ltSGVp,sz_23,x_15,y_15" alt="img"></p><h3 id="4-1range方案（分库同理）"><a href="#4-1range方案（分库同理）" class="headerlink" title="4.1range方案（分库同理）"></a>4.1range方案（分库同理）</h3><p>如果一个表的数据量太大，可以按照某种规则（如<code>hash取模、range</code>），把数据切分到多张表去。</p><p>一张订单表，按<code>时间range</code>拆分如下：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/down/21e9f4e78f9137780f06592bc1fb9295.png@wm_2,t_55m+5a625Y+3L+eoi+W6j+mCo+eCueS6iw==,fc_ffffff,ff_U2ltSGVp,sz_23,x_15,y_15" alt="img"></p><h3 id="4-2hash取模方案（分库同理）"><a href="#4-2hash取模方案（分库同理）" class="headerlink" title="4.2hash取模方案（分库同理）"></a>4.2hash取模方案（分库同理）</h3><p>hash取模策略：指定的路由key（一般是user_id、订单id作为key）对分表总数进行取模，把数据分散到各个表中。</p><p>比如原始订单表信息，我们把它分成4张分表：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/down/3238372b91d4f36756c95bf921883c21.png@wm_2,t_55m+5a625Y+3L+eoi+W6j+mCo+eCueS6iw==,fc_ffffff,ff_U2ltSGVp,sz_27,x_17,y_17" alt="img"></p><h2 id="5-hash取模方案实战"><a href="#5-hash取模方案实战" class="headerlink" title="5.hash取模方案实战"></a>5.hash取模方案实战</h2><h3 id="5-1新建一个springBoot项目"><a href="#5-1新建一个springBoot项目" class="headerlink" title="5.1新建一个springBoot项目"></a>5.1新建一个springBoot项目</h3><p><img src="/images/img/image-20220527164557119.png" alt="image-20220527164557119"></p><h3 id="5-2引入mysql，shardingsphere，lombok等所需要的依赖包"><a href="#5-2引入mysql，shardingsphere，lombok等所需要的依赖包" class="headerlink" title="5.2引入mysql，shardingsphere，lombok等所需要的依赖包"></a>5.2引入mysql，shardingsphere，lombok等所需要的依赖包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--mysql--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--Mybatis-Plus--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--shardingsphere start--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;io.shardingsphere&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- for spring namespace --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;io.shardingsphere&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;sharding-jdbc-spring-namespace&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--shardingsphere end--&gt;</span><br><span class="line">    &lt;!--lombok--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.18.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3创建数据库and表需要用到的，只为了实践一个demo数据库结构比较简单"><a href="#5-3创建数据库and表需要用到的，只为了实践一个demo数据库结构比较简单" class="headerlink" title="5.3创建数据库and表需要用到的，只为了实践一个demo数据库结构比较简单"></a>5.3创建数据库and表需要用到的，只为了实践一个demo数据库结构比较简单</h3><p>新建数据库 ds0，ds1</p><p>每个库各包含两个表（user_0,user_1）</p><h6 id="5-3-1数据库a"><a href="#5-3-1数据库a" class="headerlink" title="5.3.1数据库a"></a>5.3.1数据库a</h6><p>CREATE DATABASE IF NOT EXISTS <code>ds0</code> <em>&#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci *&#x2F;</em>; USE <code>ds0</code>; SET NAMES utf8mb4;</p><h6 id="5-3-2数据库a的表"><a href="#5-3-2数据库a的表" class="headerlink" title="5.3.2数据库a的表"></a>5.3.2数据库a的表</h6><p>CREATE TABLE <code>user_0</code> (<br>  <code>id</code> int NOT NULL,<br>  <code>name</code> varchar(255) DEFAULT NULL,<br>  <code>age</code> int DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</p><p>CREATE TABLE <code>user_1</code> (<br>  <code>id</code> int NOT NULL,<br>  <code>name</code> varchar(255) DEFAULT NULL,<br>  <code>age</code> int DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</p><h6 id="5-3-3数据库b"><a href="#5-3-3数据库b" class="headerlink" title="5.3.3数据库b"></a>5.3.3数据库b</h6><p>CREATE DATABASE IF NOT EXISTS <code>ds1</code> <em>&#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci *&#x2F;</em>; USE <code>ds0</code>; SET NAMES utf8mb4;</p><h6 id="5-3-4数据库b的表"><a href="#5-3-4数据库b的表" class="headerlink" title="5.3.4数据库b的表"></a>5.3.4数据库b的表</h6><p>CREATE TABLE <code>user_0</code> (<br>  <code>id</code> int NOT NULL,<br>  <code>name</code> varchar(255) DEFAULT NULL,<br>  <code>age</code> int DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</p><p>CREATE TABLE <code>user_1</code> (<br>  <code>id</code> int NOT NULL,<br>  <code>name</code> varchar(255) DEFAULT NULL,<br>  <code>age</code> int DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</p><h3 id="5-4-application-properties配置文件（核心）"><a href="#5-4-application-properties配置文件（核心）" class="headerlink" title="5.4.application.properties配置文件（核心）"></a>5.4.application.properties配置文件（核心）</h3><p>a.配置了两个数据源库</p><p>b.配置了以id为准的分库标准（ds$-&gt;{id % 2}），这个算法个人理解类似于除法，比如id是100，分8个库（ds$-&gt;{100% 8}）余数为4 那就在ds4这个库里，除尽的话在ds0库</p><p>c.要注意，我们分表后主键自增id就不可用了，因为表不同，所以主键会有重复。这里使用的是uuid，但是因为uuid是一个长位字符串，这样的话如果使用它作为分表依据的话查询效率会有影响。如果数据量不大的话其实可以开一个表专门用于生产id主键。还有一种分案是可以通过设表的<strong>自增字段步长</strong>来进行水平伸缩。</p><p>比如说，现在有 8 个服务节点，每个服务节点使用一个 sequence 功能来产生 ID，每个 sequence 的起始 ID 不同，并且依次递增，步长都是8</p><p><img src="https://img.jbzj.com/file_images/article/202202/2022021510162820.png" alt="img"></p><p><strong>适合的场景</strong>：在用户防止产生的 ID 重复时，这种方案实现起来比较简单，也能达到性能目标。但是服务节点固定，步长也固定，将来如果还要增加服务节点，就不好搞了。</p><p>e.分库规则，id单数在ds1库，双数在ds0</p><p>f.分表规则，age单数在user1，双数在dso</p><h6 id="提供application-properties文件（记得替换数据库配置）"><a href="#提供application-properties文件（记得替换数据库配置）" class="headerlink" title="提供application.properties文件（记得替换数据库配置）"></a>提供application.properties文件（记得替换数据库配置）</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888</span><br><span class="line"></span><br><span class="line"># 数据源 ds0,ds1</span><br><span class="line">sharding.jdbc.datasource.names=ds0,ds1</span><br><span class="line"># 第一个数据库</span><br><span class="line">sharding.jdbc.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource</span><br><span class="line">sharding.jdbc.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">sharding.jdbc.datasource.ds0.jdbc-url=jdbc:mysql://你的主机:3306/ds0?characterEncoding=utf-8&amp;&amp;serverTimezone=GMT%2B8</span><br><span class="line">sharding.jdbc.datasource.ds0.username=root</span><br><span class="line">sharding.jdbc.datasource.ds0.password=990522</span><br><span class="line"></span><br><span class="line"># 第二个数据库</span><br><span class="line">sharding.jdbc.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource</span><br><span class="line">sharding.jdbc.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">sharding.jdbc.datasource.ds1.jdbc-url=jdbc:mysql://你的主机:3306/ds1?characterEncoding=utf-8&amp;&amp;serverTimezone=GMT%2B8</span><br><span class="line">sharding.jdbc.datasource.ds1.username=root</span><br><span class="line">sharding.jdbc.datasource.ds1.password=990522</span><br><span class="line"></span><br><span class="line"># 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略</span><br><span class="line"># 分库策略</span><br><span class="line">sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=id</span><br><span class="line">sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds$-&gt;&#123;id % 2&#125;</span><br><span class="line"></span><br><span class="line"># 分表策略 其中user为逻辑表 分表主要取决于age行</span><br><span class="line">sharding.jdbc.config.sharding.tables.user.actual-data-nodes=ds$-&gt;&#123;0..1&#125;.user_$-&gt;&#123;0..1&#125;</span><br><span class="line">sharding.jdbc.config.sharding.tables.user.table-strategy.inline.sharding-column=age</span><br><span class="line"># 分片算法表达式</span><br><span class="line">sharding.jdbc.config.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$-&gt;&#123;age % 2&#125;</span><br><span class="line"></span><br><span class="line"># 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复</span><br><span class="line">#sharding.jdbc.config.sharding.tables.user.key-generator-column-name=id</span><br><span class="line"></span><br><span class="line"># 打印执行的数据库以及语句</span><br><span class="line">sharding.jdbc.config.props..sql.show=true</span><br><span class="line">spring.main.allow-bean-definition-overriding=true</span><br></pre></td></tr></table></figure><h3 id="5-5代码比较简单直接贴出来了"><a href="#5-5代码比较简单直接贴出来了" class="headerlink" title="5.5代码比较简单直接贴出来了"></a>5.5代码比较简单直接贴出来了</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package org.example.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.example.entity.User;</span><br><span class="line">import org.example.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/select&quot;)</span><br><span class="line">    public List&lt;User&gt; select(User user) &#123;</span><br><span class="line">        return userService.getUserList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/insert&quot;)</span><br><span class="line">    public Boolean insert(User user) &#123;</span><br><span class="line">        return userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="server"><a href="#server" class="headerlink" title="server"></a>server</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package org.example.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import org.example.entity.User;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public interface UserService extends IService&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存用户信息</span><br><span class="line">     *</span><br><span class="line">     * @param entity</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    boolean save(User entity);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询全部用户信息</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List&lt;User&gt; getUserList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="server实现"><a href="#server实现" class="headerlink" title="server实现"></a>server实现</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package org.example.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.toolkit.Wrappers;</span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import org.example.dao.UserMapper;</span><br><span class="line">import org.example.entity.User;</span><br><span class="line">import org.example.service.UserService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean save(User entity) &#123;</span><br><span class="line">        return super.save(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;User&gt; getUserList() &#123;</span><br><span class="line">        return baseMapper.selectList(Wrappers.&lt;User&gt;lambdaQuery());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package org.example.dao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.example.entity.User;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * user dao层</span><br><span class="line"> * @author lihaodong</span><br><span class="line"> */</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package org.example.entity;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line">import com.baomidou.mybatisplus.extension.activerecord.Model;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.EqualsAndHashCode;</span><br><span class="line">import lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@EqualsAndHashCode(callSuper = true)</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">@TableName(&quot;user&quot;)</span><br><span class="line">public class User extends Model&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 主键Id</span><br><span class="line">     */</span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 名称</span><br><span class="line">     */</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 年龄</span><br><span class="line">     */</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6验证hash分库分表"><a href="#5-6验证hash分库分表" class="headerlink" title="5.6验证hash分库分表"></a>5.6验证hash分库分表</h3><p>插入数据测试一下，写一个测试方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/add&quot;)</span><br><span class="line">public Boolean add(User user) &#123;</span><br><span class="line">    ArrayList&lt;User&gt; users = new ArrayList&lt;&gt;();</span><br><span class="line">     for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">         users.add(new User(1,&quot;张一&quot;,20));</span><br><span class="line">         users.add(new User(2,&quot;张二&quot;,21));</span><br><span class="line">         users.add(new User(3,&quot;张三&quot;,22));</span><br><span class="line">         users.add(new User(4,&quot;张四&quot;,24));</span><br><span class="line">         users.add(new User(5,&quot;张五&quot;,25));</span><br><span class="line">         users.add(new User(6,&quot;张六&quot;,26));</span><br><span class="line">         users.add(new User(7,&quot;张七&quot;,27));</span><br><span class="line">         users.add(new User(8,&quot;张八&quot;,28));</span><br><span class="line">         users.add(new User(9,&quot;张九&quot;,29));</span><br><span class="line">         users.add(new User(10,&quot;张百万&quot;,99));</span><br><span class="line">    &#125;</span><br><span class="line">    for (User user1 : users) &#123;</span><br><span class="line">        userService.save(user1);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照我们定义好的id分库规则</p><p>id为 1，3 ，5， 7，9的数据应该在ds1库</p><p>id为 2，4，6，8，10 应该在ds0库</p><p>ds1库中</p><p>use_0表中，应该有数据</p><p> <code>users.add(new User(1,&quot;张一&quot;,20));</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(9,&quot;张九&quot;,32));</span><br></pre></td></tr></table></figure><p>user_1中应该有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(3,&quot;张三&quot;,31));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(5,&quot;张五&quot;,25));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(7,&quot;张七&quot;,27));</span><br></pre></td></tr></table></figure><p>ds0库中</p><p>user_0表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(4,&quot;张四&quot;,24));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(6,&quot;张六&quot;,26));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(8,&quot;张八&quot;,28));</span><br></pre></td></tr></table></figure><p>user_1表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(2,&quot;张二&quot;,21));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.add(new User(10,&quot;张百万&quot;,99));</span><br></pre></td></tr></table></figure><p>直接http方式调用<a href="http://localhost:8888/add">http://localhost:8888/add</a></p><p>看结果</p><p>Ds1</p><p><img src="/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/image-20220527185409203.png" alt="image-20220527185409203"></p><p><img src="/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/image-20220527185444131.png" alt="image-20220527185444131"></p><p>ds0</p><p><img src="/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/image-20220527185620441.png" alt="image-20220527185620441"></p><p><img src="/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/image-20220527185648616.png" alt="image-20220527185648616"></p><h3 id="7-查询分析"><a href="#7-查询分析" class="headerlink" title="7.查询分析"></a>7.查询分析</h3><h4 id="7-1带分库分表参数"><a href="#7-1带分库分表参数" class="headerlink" title="7.1带分库分表参数"></a>7.1带分库分表参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/select&quot;)</span><br><span class="line">public List&lt;User&gt; select(User user) &#123;</span><br><span class="line">    return userService.getUserList(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;User&gt; getUserList(User user) &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">    userLambdaQueryWrapper.eq(null != user.getId(),User::getId,user.getId());</span><br><span class="line">    userLambdaQueryWrapper.eq(null != user.getAge(),User::getAge,user.getAge());</span><br><span class="line">    userLambdaQueryWrapper.eq(!StringUtils.isEmpty(user.getName()),User::getName,user.getName());</span><br><span class="line">    return baseMapper.selectList(userLambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2不携带分库分表参数"><a href="#7-2不携带分库分表参数" class="headerlink" title="7.2不携带分库分表参数"></a>7.2不携带分库分表参数</h4><p>直接http调用<a href="http://localhost:8888/select?name=ceshi">http://localhost:8888/select?name=ceshi</a></p><p><img src="/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/image-20220530153015914.png" alt="image-20220530153015914"></p><p>查询了我们的2个数据库and每个数据库下面的两张表</p><h4 id="7-3带分库的参数"><a href="#7-3带分库的参数" class="headerlink" title="7.3带分库的参数"></a>7.3带分库的参数</h4><p>查询链接and参数<a href="http://localhost:8888/select?id=2">http://localhost:8888/select?id=2</a></p><p><img src="/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/image-20220530153428164.png" alt="image-20220530153428164"></p><p>查询了当前id所在库的两个表</p><h4 id="7-4携带分库分表参数"><a href="#7-4携带分库分表参数" class="headerlink" title="7.4携带分库分表参数"></a>7.4携带分库分表参数</h4><p>链接参数<a href="http://localhost:8888/select?id=2&age=27">http://localhost:8888/select?id=2&amp;age=27</a></p><p><img src="/2022/05/26/%E5%9F%BA%E4%BA%8EShardingSphere%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/image-20220530154057941.png" alt="image-20220530154057941"></p><p>准确查询到了这条数据所在的库跟表</p><h4 id="7-5分表分库查询原理"><a href="#7-5分表分库查询原理" class="headerlink" title="7.5分表分库查询原理"></a>7.5分表分库查询原理</h4><p>查询参数携带分库分表的索引时候，查询时候会计算精准命中我们要查的库表，没有携带则全表全库扫描，当数据量比较大的时候，效率会很差。数据库压力很大 。所以选取分库分表的索引应该要选择热点数据（字段）</p><h2 id="8-分库分表带来的问题"><a href="#8-分库分表带来的问题" class="headerlink" title="8.分库分表带来的问题"></a>8.分库分表带来的问题</h2><h3 id="8-1-跨库关联查询"><a href="#8-1-跨库关联查询" class="headerlink" title="8.1 跨库关联查询"></a>8.1 跨库关联查询</h3><p>比如查询在合同信息的时候要关联客户数据，由于是合同数据和客户数据是在不同的数据库，那么我们肯定不能直接使用 join 的这种方式去做关联查询。</p><p>我们有几种主要的解决方案:</p><p>字段冗余<br>比如我们查询合同库的合同表的时候需要关联客户库的客户表，我们可以直接把一些经常关联查询的客户字段放到合同表，通过这种方式避免跨库关联查询的问题。</p><p>数据同步<br>比如商户系统要查询产品系统的产品表，我们干脆在商户系统创建一张产品表，通过 ETL 或者其他方式定时同步产品数据。</p><h3 id="8-2-分布式事务"><a href="#8-2-分布式事务" class="headerlink" title="8.2 分布式事务"></a>8.2 分布式事务</h3><p>比如在一个贷款的流程里面，合同系统登记了数据，放款系统也必须生成放款记录，如果两个动作不是同时成功或者同时失败，就会出现数据一致性的问题。如果在一个数据库里面，我们可以用本地事务来控制，但是在不同的数据库里面就不行了。所以分布式环境里面的事务，我们也需要通过一些方案来解决。</p><p>复习一下。分布式系统的基础是 CAP 理论。</p><p>C (一致性) Consistency:对某个指定的客户端来说，读操作能返回最新的写操作。对于数据分布在不同节点上的数据来说，如果在某个节点更新了数据，那么在其他节点如果都能读取到这个最新的数据，那么就称为强一致，如果有某个节点没有读取到，那就是分布式不一致。</p><p>A (可用性) Availability:非故障的节点在合理的时间内返回合理的响应(不是错误和超时的响应)。可用性的两个关键一个是合理的时间，一个是合理的响应。<br>合理的时间指的是请求不能无限被阻塞，应该在合理的时间给出返回。合理的响应，指的是系统应该明确返回结果并且结果是正确的。</p><p>P (分区容错性) Partition tolerance:当出现网络分区后，系统能够继续工作。打个比方，这里集群有多台机器，有台机器网络出现了问题，但是这个集群仍然可以正工作。</p><p>CAP 三者是不能共有的，只能同时满足其中两点。基于 AP，我们又有了 BASE 理论。</p><p>基本可用(Basically Available)：分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。</p><p>软状态(Soft state):允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是 CAP 中的不一致。</p><p>最终一致(Eventually consistent)：最终一致是指经过一段时间后，所有节点数据都将会达到一致。</p><p>分布式事务有几种常见的解决方案:</p><p>1、全局事务(比如 XA 两阶段提交;应用、事务管理器™、资源管理器(DB))， 例如Atomikos。<br>2、基于可靠消息服务的分布式事务。</p><p>3、柔性事务 TCC(Try-Confirm-Cancel)tcc-transaction</p><p>4、最大努力通知，通过消息中间件向其他系统发送消息(重复投递+定期校对)</p><h3 id="9-项目地址"><a href="#9-项目地址" class="headerlink" title="9.项目地址"></a>9.项目地址</h3><p><a href="https://gitee.com/guo0817/split-db.git">https://gitee.com/guo0817/split-db.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal使用详解</title>
      <link href="/2022/03/24/BigDecimal%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/03/24/BigDecimal%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>BigDecimal使用详解</p><span id="more"></span><h5 id="为什么要使用BigDecimal"><a href="#为什么要使用BigDecimal" class="headerlink" title="为什么要使用BigDecimal"></a>为什么要使用BigDecimal</h5><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);</span><br><span class="line">        System.out.println(<span class="number">0.3</span> - <span class="number">0.1</span>);</span><br><span class="line">        System.out.println(<span class="number">0.2</span> * <span class="number">0.1</span>);</span><br><span class="line">        System.out.println(<span class="number">0.3</span> / <span class="number">0.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                 </span><br></pre></td></tr></table></figure><p><img src="/2022/03/24/BigDecimal%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/image-20230324171824759-9649506.png" alt="image-20230324171824759"></p><p>在计算机中，浮点数(float和double)都是采用二进制表示的。但是二进制无法精确地表示所有的十进制小数，这就导致了浮点数在某些情况下会出现精度丢失的问题。 例如，十进制的0.1并不能精确地表示为二进制数。用float或double类型表示0.1时，实际上是一个近似值，而不是精确值。当进行一系列复杂的浮点数运算时，这种近似值的误差会逐渐累积，导致最终结果的精度下降，出现精度丢失的问题。 此外，float和double类型在内存中的存储方式也会导致精度丢失。float类型占4个字节，double类型占8个字节，这意味着它们能够表示的数值范围和精度都是有限的。当需要表示的数值超出了其范围时，也会出现精度丢失的问题。 因此，在进行浮点数运算时，应该注意精度丢失的问题，尽可能地减小误差的累积，避免影响到最终结果的准确性。</p><h5 id="BigDecimal是什么"><a href="#BigDecimal是什么" class="headerlink" title="BigDecimal是什么"></a>BigDecimal是什么</h5><p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数。在实际应用中，需要对更大或者更小的数进行运算和处理。float和double只能用来做科学计算或者是工程计算，在商业计算中要用java.math.BigDecimal。BigDecimal所创建的是对象，我们不能使用传统的+、-、*、&#x2F;等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。</p><h5 id="BigDecimal构造器"><a href="#BigDecimal构造器" class="headerlink" title="BigDecimal构造器"></a>BigDecimal构造器</h5><table><thead><tr><th>构造器</th><th>描述</th></tr></thead><tbody><tr><td>BigDecimal(int)</td><td>创建一个具有参数所指定整数值的对象。</td></tr><tr><td>BigDecimal(double)</td><td>创建一个具有参数所指定双精度值的对象。 &#x2F;&#x2F;不推荐使用</td></tr><tr><td>BigDecimal(long)</td><td>创建一个具有参数所指定长整数值的对象。</td></tr><tr><td>BigDecimal(String)</td><td>创建一个具有参数所指定以字符串表示的数值的对象。&#x2F;&#x2F;推荐使用</td></tr></tbody></table><h6 id="为什么不推荐使用double构造器创建BigDecimal对象"><a href="#为什么不推荐使用double构造器创建BigDecimal对象" class="headerlink" title="为什么不推荐使用double构造器创建BigDecimal对象"></a>为什么不推荐使用<code>double</code>构造器创建BigDecimal对象</h6><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1.2</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2022/03/24/BigDecimal%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/image-20230324173902492.png" alt="image-20230324173902492"></p><p>JDK源码注释</p><p><img src="/2022/03/24/BigDecimal%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/image-20230324173841961.png" alt="image-20230324173841961"></p><p>翻译</p><blockquote><p>译文：将double转换为BigDecimal, BigDecimal是double的二进制浮点值的精确十进制表示。返回的BigDecimal的比例是最小的值(10规模Val)是整数。注:1. 这个构造函数的结果可能有些不可预测。人们可能会认为在Java中编写新的BigDecimal(0.1)会创建一个完全等于0.1的BigDecimal(一个未缩放的值1，缩放为1)，但实际上它等于0.1000000000000000055511151231257827021181583404541015625. 这是因为0.1不能精确地表示为双精度数(或者，就此而言，不能表示为任何有限长度的二进制分数)。因此，传递给构造函数的值并不完全等于0.1，尽管看起来是这样。2. 另一方面，String构造函数是完全可预测的:写入new BigDecimal(“0.1”)将创建一个完全等于0.1的BigDecimal，正如人们所期望的那样。因此，通常建议优先使用String构造函数。3.当必须使用double作为BigDecimal的源时，请注意此构造函数提供了精确的转换;它不会给出与使用double . tostring (double)方法然后使用BigDecimal(String)将double转换为String相同的结果。构造函数。要得到这个结果，使用静态valueOf(double)方法。Parameter: val – double value to be converted to BigDecimal. Throws: NumberFormatException - if val is infinite or NaN.</p></blockquote><p>另外，当你用了非字符串构造创建了一个BigDecimal对象时，如果进行了除运算，当结果有余数的时候会报<code>java.lang.ArithmeticException</code>这个异常</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add(BigDecimal augend)</td><td>加法</td></tr><tr><td>subtract(BigDecimal)</td><td><em>相减</em></td></tr><tr><td>multiply(BigDecimal)</td><td>相乘</td></tr><tr><td>divide(BigDecimal)</td><td>除法</td></tr></tbody></table><h5 id="保留小数"><a href="#保留小数" class="headerlink" title="保留小数"></a>保留小数</h5><p><font color="red">在进行除法运算的时候，针对可能出现的小数产生的计算，必须要多传两个参数</font></p><h6 id="ROUND-CEILING"><a href="#ROUND-CEILING" class="headerlink" title="ROUND_CEILING"></a>ROUND_CEILING</h6><p>&#x2F;&#x2F;向正无穷方向舍入</p><h6 id="ROUND-DOWN"><a href="#ROUND-DOWN" class="headerlink" title="ROUND_DOWN"></a>ROUND_DOWN</h6><p>&#x2F;&#x2F;向零方向舍入</p><h6 id="ROUND-FLOOR"><a href="#ROUND-FLOOR" class="headerlink" title="ROUND_FLOOR"></a>ROUND_FLOOR</h6><p> &#x2F;&#x2F;向负无穷方向舍入</p><h6 id="ROUND-HALF-DOWN"><a href="#ROUND-HALF-DOWN" class="headerlink" title="ROUND_HALF_DOWN"></a>ROUND_HALF_DOWN</h6><p> &#x2F;&#x2F;向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向下舍入, 例如1.55 保留一位小数结果为1.5</p><h6 id="ROUND-HALF-EVEN"><a href="#ROUND-HALF-EVEN" class="headerlink" title="ROUND_HALF_EVEN"></a>ROUND_HALF_EVEN</h6><p>  &#x2F;&#x2F;向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，如果保留位数是奇数，使用ROUND_HALF_UP，如果是偶数，使用ROUND_HALF_DOWN</p><h6 id="ROUND-HALF-UP"><a href="#ROUND-HALF-UP" class="headerlink" title="ROUND_HALF_UP"></a>ROUND_HALF_UP</h6><p> &#x2F;&#x2F;向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向上舍入, 1.55保留一位小数结果为1.6,也就是我们常说的“四舍五入”</p><h6 id="ROUND-UNNECESSARY"><a href="#ROUND-UNNECESSARY" class="headerlink" title="ROUND_UNNECESSARY"></a>ROUND_UNNECESSARY</h6><p>&#x2F;&#x2F;计算结果是精确的，不需要舍入模式</p><h6 id="ROUND-UP"><a href="#ROUND-UP" class="headerlink" title="ROUND_UP"></a>ROUND_UP</h6><p> &#x2F;&#x2F;向远离0的方向舍入</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
